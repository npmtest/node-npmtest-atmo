{"/home/travis/build/npmtest/node-npmtest-atmo/test.js":"/* istanbul instrument in package npmtest_atmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-atmo/lib.npmtest_atmo.js":"/* istanbul instrument in package npmtest_atmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_atmo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_atmo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-atmo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-atmo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_atmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_atmo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_atmo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_atmo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_atmo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_atmo.__dirname + '/lib.npmtest_atmo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/index.js":"#!/usr/bin/env node\r\nmodule.exports = require('./server');","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/server.js":"'use strict';\r\n\r\nvar express = require('express');\r\nvar app = express();\r\nvar http = require('http');\r\nvar server = http.createServer(app);\r\nvar io = require('socket.io')(server);\r\nvar apiServer = require('./apiServer');\r\nvar chalk = require('chalk');\r\nvar argv = require('yargs').argv;\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar fileExists = require('file-exists');\r\nvar cacheFilePath = path.join(__dirname, '../../cache/spec.json');\r\nvar pack = require('../../package.json');\r\nvar jsonfile = require('jsonfile');\r\nvar generatorsDataFile = path.join(__dirname, '../../cache/generators.json');\r\nvar npmi = require('npmi');\r\nvar figlet = require('figlet');\r\n\r\nconsole.log(chalk.blue(figlet.textSync('        Atmo')));\r\nconsole.log(chalk.gray('UI based Server Side Api Mocking for Prototyping'));\r\nconsole.log(chalk.gray('------------------------------------------------'));\r\nconsole.log(chalk.gray('                Version '+ pack.version));\r\nconsole.log(chalk.gray(''));\r\n\r\napp.use(express.static(path.resolve(__dirname, '../../dist')));\r\n\r\n/**\r\n * Port of the dashboard server\r\n */\r\nvar port = process.env.PORT || 3333;\r\n\r\n/**\r\n * Start the dashboard server\r\n */\r\nserver.listen(port, function () {\r\n  console.log(chalk.yellow('Atmo mission control: http://localhost:' + port));\r\n});\r\n\r\n/**\r\n * API server\r\n */\r\nvar apiServerPort = argv.port || 3334;\r\nvar api = apiServer.createApiServer(apiServerPort, argv.static, argv.logs);\r\n\r\nio.on('connection', function (socket) {\r\n  var cacheSpec = {};\r\n  if (fileExists(cacheFilePath)) {\r\n    cacheSpec = JSON.parse(fs.readFileSync(cacheFilePath));\r\n  }\r\n\r\n  socket.emit('onStart', {\r\n    port: apiServerPort,\r\n    spec: cacheSpec,\r\n    generators: jsonfile.readFileSync(generatorsDataFile).generators\r\n  });\r\n\r\n  socket.on('deploy', function (data) {\r\n    apiServer.deploy(apiServerPort, argv.static, data, argv.logs, function () {\r\n      socket.emit('deploymentComplete');\r\n      socket.emit('message', 'Your changes are deployed!')\r\n    });\r\n    fs.writeFileSync(cacheFilePath, JSON.stringify(data));\r\n  });\r\n\r\n  socket.on('save', function (spec) {\r\n    fs.writeFileSync(cacheFilePath, JSON.stringify(spec));\r\n    socket.emit('message', 'Your changes are saved locally.')\r\n  });\r\n\r\n  socket.on('generate', function (payload) {\r\n    var renerator = require(payload.generator);\r\n    renerator(payload.spec);\r\n    socket.emit('message', 'Your generated project is available in ' + path.join(process.cwd(), 'project'))\r\n  });\r\n\r\n  socket.on('installGenerator', function (name) {\r\n    installGenerator(name, socket);\r\n  });\r\n\r\n  socket.on('syncJsonServerDb', function (name) {\r\n    socket.emit('jsonDb', apiServer.getJsonServerDb());\r\n  });\r\n});\r\n\r\n/**\r\n * Add a generator name to the generator meta data file\r\n */\r\nfunction addGenarator(name) {\r\n  var generatorsData = jsonfile.readFileSync(generatorsDataFile);\r\n  generatorsData.generators.push(name);\r\n  jsonfile.writeFileSync(generatorsDataFile, generatorsData);\r\n  return generatorsData;\r\n}\r\n\r\n/**\r\n * Install the generator npm package programmatically\r\n */\r\nfunction installGenerator(name, socket) {\r\n  var justThePackageName = name;\r\n  var justTheVersion = 'latest';\r\n\r\n  if (name.indexOf('@') >= 0) {\r\n    justThePackageName = name.substring(0, name.indexOf(\"@\"));\r\n    justTheVersion = name.substring(name.indexOf(\"@\") + 1, name.length);\r\n  }\r\n\r\n  var options = {\r\n    name: justThePackageName,\r\n    path: __dirname,\r\n    version: justTheVersion,\r\n    forceInstall: true,\r\n    npmLoad: {\r\n      loglevel: 'silent'\r\n    }\r\n  };\r\n  npmi(options, function (err, result) {\r\n    if (err) {\r\n      socket.emit('message', err.message)\r\n    } else {\r\n      var generators = addGenarator(name);\r\n      socket.emit('generatorInstalled', {\r\n        generatorName: options.name,\r\n        generators: generators.generators\r\n      });\r\n    }\r\n  });\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/apiServer/index.js":"var express = require('express');\r\nvar http = require('http');\r\nvar path = require('path');\r\nvar chalk = require('chalk');\r\nvar enableDestroy = require('server-destroy');\r\nvar morgan = require('morgan');\r\nvar bodyParser = require('body-parser');\r\n\r\nvar app = null;\r\nvar server = null;\r\nvar io = null;\r\n\r\nvar httpModule = require('../endpoints/http');\r\nvar socketModule = require('../endpoints/socket');\r\nvar graphqlModule = require('../endpoints/graphql');\r\nvar jsonServerModule = require('../endpoints/jsonServer');\r\nvar proxyModule = require('../endpoints/proxy');\r\n\r\nvar jsonServerRouter = null;\r\n\r\n/**\r\n * Creates the API server with the specified port.\r\n */\r\nfunction createApiServer(port, static, logs) {\r\n  server && server.destroy();\r\n  app = express();\r\n  server = http.createServer(app);\r\n  io = require('socket.io')(server);\r\n\r\n  app.get('/_status', function internalStaus(req, res) {\r\n    res.send('API server running.');\r\n  });\r\n\r\n  if (logs) {\r\n    app.use(morgan('dev'));\r\n  }\r\n\r\n  app.use(bodyParser.json());\r\n  app.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n  if (static) {\r\n    app.use(express.static(path.join(process.cwd(), 'public')));\r\n  }\r\n\r\n  server.listen(port, function () {\r\n    console.log(chalk.green('Api: http://localhost:' + port));\r\n  });\r\n\r\n  enableDestroy(server);\r\n\r\n  return server;\r\n}\r\n\r\n/**\r\n * Deployes the new endpoints provided by the UI\r\n */\r\nfunction deploy(port, static, spec, logs, done) {\r\n  createApiServer(port, static, logs);\r\n  httpModule(app, spec);\r\n  socketModule(io, spec);\r\n  graphqlModule(app, spec);\r\n  jsonServerRouter = jsonServerModule(app, spec);\r\n  proxyModule(app, spec);\r\n  done();\r\n}\r\n\r\nfunction getJsonServerDb() {\r\n  return jsonServerRouter && jsonServerRouter.db.getState();\r\n}\r\n\r\nmodule.exports = {\r\n  createApiServer: createApiServer,\r\n  deploy: deploy,\r\n  getJsonServerDb: getJsonServerDb\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/http.js":"function allowCrossDomain(req, res, next) {\r\n  // intercept OPTIONS method\r\n  if ('OPTIONS' == req.method) {\r\n    var allowHeaders = req.headers['access-control-request-headers'] ? req.headers['access-control-request-headers'] + ',' : '';\r\n    allowHeaders += 'Content-Type,Authorization';\r\n\r\n    res.header('Access-Control-Allow-Origin', '*');\r\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\r\n    res.header('Access-Control-Allow-Headers', allowHeaders);\r\n\r\n    res.sendStatus(200);\r\n  } else {\r\n    next();\r\n  }\r\n}\r\n\r\nfunction httpModule(app, spec) {\r\n  app.use(allowCrossDomain);\r\n\r\n  for (var i = 0; i < spec.endpoints.length; i++) {\r\n    addRoute(app, spec.endpoints[i]);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds new routes\r\n */\r\nfunction addRoute(app, endpoint) {\r\n  if (endpoint.method === 'GET') {\r\n    app.get(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'POST') {\r\n    app.post(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'PUT') {\r\n    app.put(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'PATCH') {\r\n    app.patch(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'DELETE') {\r\n    app.delete(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'COPY') {\r\n    app.copy(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'HEAD') {\r\n    app.head(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'OPTIONS') {\r\n    app.options(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'PURGE') {\r\n    app.purge(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'LOCK') {\r\n    app.lock(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'UNLOCK') {\r\n    app.unlock(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  }\r\n}\r\n\r\nfunction responseCallback(req, res, endpoint) {\r\n  setHeaders(res, endpoint.headers);\r\n  \r\n  res.status(endpoint.response.responseCode);\r\n\r\n  if(endpoint.response.contentType.type === 'JavaScript') {\r\n    setContentTypeHeader(res, 'application/json');\r\n    eval(endpoint.response.content);\r\n  } else {\r\n    setContentTypeHeader(res, endpoint.response.contentType.contentType);\r\n    res.send(endpoint.response.content);\r\n  }  \r\n}\r\n\r\nfunction setHeaders(res, headers) {\r\n  headers.forEach(function (header) {\r\n    if (header.key !== \"\") {\r\n      res.set(header.key, header.value);\r\n    }\r\n  });\r\n}\r\n\r\nfunction setContentTypeHeader(res, contentType) {\r\n  res.set('Content-Type', contentType);\r\n}\r\n\r\nmodule.exports = httpModule;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/socket.js":"function socketModule(io, spec) {\r\n  initializeSocketEndpoints(io, spec.socketEndpoints)\r\n}\r\n\r\nfunction initializeSocketEndpoints(io, endpoints) {\r\n  io.on('connection', function (socket) {\r\n    socket.removeAllListeners();\r\n    for (var i = 0; i < endpoints.length; i++) {\r\n      registerEvent(endpoints[i], socket, io);\r\n    }\r\n  });\r\n}\r\n\r\nfunction registerEvent(endpoint, socket, io) {\r\n  socket.on(endpoint.eventName, function (data) {\r\n    if (endpoint.emitType === 'all') {\r\n      io.sockets.emit(endpoint.eventToEmit, endpoint.payload);\r\n    } else if (endpoint.emitType === 'broadcast') {\r\n      socket.broadcast.emit(endpoint.eventToEmit, endpoint.payload);\r\n    } else {\r\n      io.to(socket.id).emit(endpoint.eventToEmit, endpoint.payload);\r\n    }\r\n  });\r\n}\r\n\r\nmodule.exports = socketModule","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/graphql.js":"var apollo = require('apollo-server');\r\n\r\nfunction graphqlModule(app, spec) {\r\n  registerGraphqlEndpoints(app, spec.graphqlEndpoints)\r\n}\r\n\r\nvar mocks = {\r\n  String: function () {\r\n    return \"It works!\"\r\n  }\r\n};\r\n\r\nfunction registerGraphqlEndpoints(app, endpoints) {\r\n  for (var i = 0; i < endpoints.length; i++) {\r\n    var endpoint = endpoints[i];\r\n    app.use(endpoint.url, apollo.apolloServer({\r\n      graphiql: true,\r\n      pretty: true,\r\n      schema: endpoint.schema,\r\n      mocks: mocks\r\n    }));\r\n  }\r\n}\r\n\r\nmodule.exports = graphqlModule;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/jsonServer.js":"\r\nvar jsonServer = require('json-server');\r\n\r\nfunction jsonServerModule(app, spec) {\r\n  var router = null;\r\n  if (spec.jsonServerEndpoint) {\r\n    router = jsonServer.router(JSON.parse(spec.jsonServerEndpoint.model));\r\n    app.use(spec.jsonServerEndpoint.url, router);\r\n  }\r\n  return router;\r\n}\r\n\r\nmodule.exports = jsonServerModule;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/proxy.js":"\r\nvar proxy = require('express-http-proxy');\r\n\r\nfunction proxyModule(app, spec) {\r\n  for (var i = 0; i < spec.proxyEndpoints.length; i++) {\r\n    var endpoint = spec.proxyEndpoints[i];\r\n    app.use(endpoint.url, proxy(endpoint.urlToProxy, {\r\n      forwardPath: function (req, res) {\r\n        return require('url').parse(req.url).path;\r\n      },\r\n      intercept: function(rsp, data, req, responseOut, callback) {\r\n        responseOut.set('Access-Control-Allow-Origin', '*');\r\n        callback(null, data);\r\n      }\r\n    }));\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = proxyModule;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/config/app.js":"var config = {};\r\n\r\nconfig.title = 'My react app';\r\n\r\nmodule.exports = config;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/config/webpack.config.js":"var path = require('path');\r\nvar webpack = require('webpack');\r\nvar node_modules = path.resolve(__dirname, '../node_modules');\r\n\r\nvar dir_client = path.resolve(__dirname, '../src/client');\r\nvar dir_dist = path.resolve(__dirname, '../dist');\r\n\r\nmodule.exports = {\r\n  entry: [\r\n\t\t'webpack-dev-server/client?http://0.0.0.0:8080', // WebpackDevServer host and port\r\n\t\t'webpack/hot/only-dev-server',\r\n\t\tpath.resolve(dir_client, 'index.jsx')\r\n\t],\r\n  output: {\r\n    path: dir_dist, // for standalone building\r\n    publicPath: '/', // for hot building\r\n    filename: 'bundle.js'\r\n  },\r\n  resolve: {\r\n   extensions: ['', '.js', '.jsx']\r\n },\r\n  module: {\r\n    loaders: [\r\n      {test: /src(\\\\|\\/).+\\.jsx?$/, exclude: /node_modules/, loader: 'babel'},\r\n      { test: /\\.css$/, loader: \"style-loader!css-loader\" },\r\n      {test: /\\.(woff|woff2)(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=application/font-woff'},\r\n      {test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=application/octet-stream'},\r\n      {test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'file'},\r\n      {test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=image/svg+xml'},\r\n      { test: /\\.png$/, loader: \"url-loader?mimetype=image/png\" }\r\n    ]\r\n  },\r\n  plugins: [\r\n    // Avoid publishing files when compilation fails\r\n    new webpack.NoErrorsPlugin(),\r\n    new webpack.ProvidePlugin({\r\n      $: \"jquery\",\r\n      jQuery: \"jquery\",\r\n    }),\r\n    new webpack.DefinePlugin({\r\n      __DEV__: JSON.stringify(JSON.parse('true')),\r\n    })\r\n  ],\r\n  stats: {\r\n    colors: true // Nice colored output\r\n  },\r\n  // Create Sourcemaps for the bundle\r\n  devtool: 'source-map'\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/config/webpack.prod.config.js":"var path = require('path');\r\nvar webpack = require('webpack');\r\nvar node_modules = path.resolve(__dirname, '../node_modules');\r\n\r\nvar dir_client = path.resolve(__dirname, '../src/client');\r\nvar dir_dist = path.resolve(__dirname, '../dist');\r\n\r\nmodule.exports = {\r\n  entry: [\r\n\t\tpath.resolve(dir_client, 'index.jsx')\r\n\t],\r\n  output: {\r\n    path: dir_dist, // for standalone building\r\n    publicPath: '/', // for hot building\r\n    filename: 'bundle.js'\r\n  },\r\n  resolve: {\r\n   extensions: ['', '.js', '.jsx']\r\n },\r\n  module: {\r\n    loaders: [\r\n      {test: /src(\\\\|\\/).+\\.jsx?$/, exclude: /node_modules/, loader: 'babel'},\r\n      { test: /\\.css$/, loader: \"style-loader!css-loader\" },\r\n      {test: /\\.(woff|woff2)(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=application/font-woff'},\r\n      {test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=application/octet-stream'},\r\n      {test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'file'},\r\n      {test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=image/svg+xml'},\r\n      { test: /\\.png$/, loader: \"url-loader?mimetype=image/png\" }\r\n    ]\r\n  },\r\n  plugins: [\r\n    // Avoid publishing files when compilation fails\r\n    new webpack.NoErrorsPlugin(),\r\n    new webpack.ProvidePlugin({\r\n      $: \"jquery\",\r\n      jQuery: \"jquery\",\r\n    }),\r\n     new webpack.DefinePlugin({\r\n      __DEV__: JSON.stringify(JSON.parse('false')),\r\n    })\r\n  ],\r\n  stats: {\r\n    colors: true // Nice colored output\r\n  }\r\n};\r\n"}