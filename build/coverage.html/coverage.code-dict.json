{"/home/travis/build/npmtest/node-npmtest-atmo/test.js":"/* istanbul instrument in package npmtest_atmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-atmo/lib.npmtest_atmo.js":"/* istanbul instrument in package npmtest_atmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_atmo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_atmo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-atmo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-atmo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_atmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_atmo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_atmo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_atmo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_atmo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_atmo.__dirname + '/lib.npmtest_atmo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/index.js":"#!/usr/bin/env node\r\nmodule.exports = require('./server');","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/server.js":"'use strict';\r\n\r\nvar express = require('express');\r\nvar app = express();\r\nvar http = require('http');\r\nvar server = http.createServer(app);\r\nvar io = require('socket.io')(server);\r\nvar apiServer = require('./apiServer');\r\nvar chalk = require('chalk');\r\nvar argv = require('yargs').argv;\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar fileExists = require('file-exists');\r\nvar cacheFilePath = path.join(__dirname, '../../cache/spec.json');\r\nvar pack = require('../../package.json');\r\nvar jsonfile = require('jsonfile');\r\nvar generatorsDataFile = path.join(__dirname, '../../cache/generators.json');\r\nvar npmi = require('npmi');\r\nvar figlet = require('figlet');\r\n\r\nconsole.log(chalk.blue(figlet.textSync('        Atmo')));\r\nconsole.log(chalk.gray('UI based Server Side Api Mocking for Prototyping'));\r\nconsole.log(chalk.gray('------------------------------------------------'));\r\nconsole.log(chalk.gray('                Version '+ pack.version));\r\nconsole.log(chalk.gray(''));\r\n\r\napp.use(express.static(path.resolve(__dirname, '../../dist')));\r\n\r\n/**\r\n * Port of the dashboard server\r\n */\r\nvar port = process.env.PORT || 3333;\r\n\r\n/**\r\n * Start the dashboard server\r\n */\r\nserver.listen(port, function () {\r\n  console.log(chalk.yellow('Atmo mission control: http://localhost:' + port));\r\n});\r\n\r\n/**\r\n * API server\r\n */\r\nvar apiServerPort = argv.port || 3334;\r\nvar api = apiServer.createApiServer(apiServerPort, argv.static, argv.logs);\r\n\r\nio.on('connection', function (socket) {\r\n  var cacheSpec = {};\r\n  if (fileExists(cacheFilePath)) {\r\n    cacheSpec = JSON.parse(fs.readFileSync(cacheFilePath));\r\n  }\r\n\r\n  socket.emit('onStart', {\r\n    port: apiServerPort,\r\n    spec: cacheSpec,\r\n    generators: jsonfile.readFileSync(generatorsDataFile).generators\r\n  });\r\n\r\n  socket.on('deploy', function (data) {\r\n    apiServer.deploy(apiServerPort, argv.static, data, argv.logs, function () {\r\n      socket.emit('deploymentComplete');\r\n      socket.emit('message', 'Your changes are deployed!')\r\n    });\r\n    fs.writeFileSync(cacheFilePath, JSON.stringify(data));\r\n  });\r\n\r\n  socket.on('save', function (spec) {\r\n    fs.writeFileSync(cacheFilePath, JSON.stringify(spec));\r\n    socket.emit('message', 'Your changes are saved locally.')\r\n  });\r\n\r\n  socket.on('generate', function (payload) {\r\n    var renerator = require(payload.generator);\r\n    renerator(payload.spec);\r\n    socket.emit('message', 'Your generated project is available in ' + path.join(process.cwd(), 'project'))\r\n  });\r\n\r\n  socket.on('installGenerator', function (name) {\r\n    installGenerator(name, socket);\r\n  });\r\n\r\n  socket.on('syncJsonServerDb', function (name) {\r\n    socket.emit('jsonDb', apiServer.getJsonServerDb());\r\n  });\r\n});\r\n\r\n/**\r\n * Add a generator name to the generator meta data file\r\n */\r\nfunction addGenarator(name) {\r\n  var generatorsData = jsonfile.readFileSync(generatorsDataFile);\r\n  generatorsData.generators.push(name);\r\n  jsonfile.writeFileSync(generatorsDataFile, generatorsData);\r\n  return generatorsData;\r\n}\r\n\r\n/**\r\n * Install the generator npm package programmatically\r\n */\r\nfunction installGenerator(name, socket) {\r\n  var justThePackageName = name;\r\n  var justTheVersion = 'latest';\r\n\r\n  if (name.indexOf('@') >= 0) {\r\n    justThePackageName = name.substring(0, name.indexOf(\"@\"));\r\n    justTheVersion = name.substring(name.indexOf(\"@\") + 1, name.length);\r\n  }\r\n\r\n  var options = {\r\n    name: justThePackageName,\r\n    path: __dirname,\r\n    version: justTheVersion,\r\n    forceInstall: true,\r\n    npmLoad: {\r\n      loglevel: 'silent'\r\n    }\r\n  };\r\n  npmi(options, function (err, result) {\r\n    if (err) {\r\n      socket.emit('message', err.message)\r\n    } else {\r\n      var generators = addGenarator(name);\r\n      socket.emit('generatorInstalled', {\r\n        generatorName: options.name,\r\n        generators: generators.generators\r\n      });\r\n    }\r\n  });\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/bin/atmo":"#!/usr/bin/env node\nmodule.exports = require('../src/server/server.js');\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/config/app.js":"var config = {};\r\n\r\nconfig.title = 'My react app';\r\n\r\nmodule.exports = config;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/config/webpack.config.js":"var path = require('path');\r\nvar webpack = require('webpack');\r\nvar node_modules = path.resolve(__dirname, '../node_modules');\r\n\r\nvar dir_client = path.resolve(__dirname, '../src/client');\r\nvar dir_dist = path.resolve(__dirname, '../dist');\r\n\r\nmodule.exports = {\r\n  entry: [\r\n\t\t'webpack-dev-server/client?http://0.0.0.0:8080', // WebpackDevServer host and port\r\n\t\t'webpack/hot/only-dev-server',\r\n\t\tpath.resolve(dir_client, 'index.jsx')\r\n\t],\r\n  output: {\r\n    path: dir_dist, // for standalone building\r\n    publicPath: '/', // for hot building\r\n    filename: 'bundle.js'\r\n  },\r\n  resolve: {\r\n   extensions: ['', '.js', '.jsx']\r\n },\r\n  module: {\r\n    loaders: [\r\n      {test: /src(\\\\|\\/).+\\.jsx?$/, exclude: /node_modules/, loader: 'babel'},\r\n      { test: /\\.css$/, loader: \"style-loader!css-loader\" },\r\n      {test: /\\.(woff|woff2)(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=application/font-woff'},\r\n      {test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=application/octet-stream'},\r\n      {test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'file'},\r\n      {test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=image/svg+xml'},\r\n      { test: /\\.png$/, loader: \"url-loader?mimetype=image/png\" }\r\n    ]\r\n  },\r\n  plugins: [\r\n    // Avoid publishing files when compilation fails\r\n    new webpack.NoErrorsPlugin(),\r\n    new webpack.ProvidePlugin({\r\n      $: \"jquery\",\r\n      jQuery: \"jquery\",\r\n    }),\r\n    new webpack.DefinePlugin({\r\n      __DEV__: JSON.stringify(JSON.parse('true')),\r\n    })\r\n  ],\r\n  stats: {\r\n    colors: true // Nice colored output\r\n  },\r\n  // Create Sourcemaps for the bundle\r\n  devtool: 'source-map'\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/config/webpack.prod.config.js":"var path = require('path');\r\nvar webpack = require('webpack');\r\nvar node_modules = path.resolve(__dirname, '../node_modules');\r\n\r\nvar dir_client = path.resolve(__dirname, '../src/client');\r\nvar dir_dist = path.resolve(__dirname, '../dist');\r\n\r\nmodule.exports = {\r\n  entry: [\r\n\t\tpath.resolve(dir_client, 'index.jsx')\r\n\t],\r\n  output: {\r\n    path: dir_dist, // for standalone building\r\n    publicPath: '/', // for hot building\r\n    filename: 'bundle.js'\r\n  },\r\n  resolve: {\r\n   extensions: ['', '.js', '.jsx']\r\n },\r\n  module: {\r\n    loaders: [\r\n      {test: /src(\\\\|\\/).+\\.jsx?$/, exclude: /node_modules/, loader: 'babel'},\r\n      { test: /\\.css$/, loader: \"style-loader!css-loader\" },\r\n      {test: /\\.(woff|woff2)(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=application/font-woff'},\r\n      {test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=application/octet-stream'},\r\n      {test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'file'},\r\n      {test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'url?limit=10000&mimetype=image/svg+xml'},\r\n      { test: /\\.png$/, loader: \"url-loader?mimetype=image/png\" }\r\n    ]\r\n  },\r\n  plugins: [\r\n    // Avoid publishing files when compilation fails\r\n    new webpack.NoErrorsPlugin(),\r\n    new webpack.ProvidePlugin({\r\n      $: \"jquery\",\r\n      jQuery: \"jquery\",\r\n    }),\r\n     new webpack.DefinePlugin({\r\n      __DEV__: JSON.stringify(JSON.parse('false')),\r\n    })\r\n  ],\r\n  stats: {\r\n    colors: true // Nice colored output\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/client/lib/Beamer.js":"import socket from 'socket.io-client';\r\n\r\nexport default class Beamer {\r\n  constructor(url) {\r\n    this.connection = socket(url);\r\n   \r\n  }\r\n  \r\n  onStart(callback) {\r\n     this.connection.on('onStart', callback);\r\n  }\r\n\r\n  deployChanges = (payload) => {\r\n    this.connection.emit('deploy', payload);\r\n  }\r\n  \r\n  saveChanges = (spec) => {\r\n    this.connection.emit('save', spec);\r\n  }\r\n\r\n  generateProject = (spec) => {\r\n    this.connection.emit('generate', spec);\r\n  }\r\n\r\n  installGenerator= (name) => {\r\n    this.connection.emit('installGenerator', name);\r\n  }\r\n\r\n  syncJsonServer = () => {\r\n    this.connection.emit('syncJsonServerDb');\r\n  }\r\n  \r\n  \r\n  onDeploymentCompletion(callback) {\r\n     this.connection.on('deploymentComplete', callback);\r\n  }\r\n\r\n  onNewGeneratorInstallation(callback) {\r\n    this.connection.on('generatorInstalled', callback);\r\n  }\r\n\r\n  onMessage(callback) {\r\n    this.connection.on('message', callback);\r\n  }\r\n\r\n  onJsonServerDbUpdate(callback) {\r\n    this.connection.on('jsonDb', callback);\r\n  }\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/client/lib/Util.js":"import mobx from 'mobx';\r\nimport Endpoint from '../models/http/Endpoint';\r\nimport Response from '../models/http/Response';\r\nimport Header from '../models/http/Header';\r\nimport ContentType from '../models/http/ContentType';\r\nimport contentTypes from '../models/http/ContentTypes';\r\nimport SocketEndpoint from '../models/socket/SocketEndpoint';\r\nimport GraphqlEndpoint from '../models/graphql/GraphqlEndpoint';\r\nimport JsonServerEndpoint from '../models/jsonServer/JsonServerEndpoint';\r\nimport ProxyEndpoint from '../models/proxy/ProxyEndpoint';\r\n\r\n/**\r\n * Parses the spec to endpoints\r\n */\r\nexport function parseSpec(spec) {\r\n  var endpoints = [];\r\n  if (!spec.endpoints && !spec.socketEndpoints && !spec.graphqlEndpoints && !spec.jsonServerEndpoint) {\r\n    // if the spec doesn't have endpoint, initialize with a default http endpoint\r\n    endpoints.push(new Endpoint('/', 'GET', [new Header('Access-Control-Allow-Origin', '*')], new Response(contentTypes[0], '{}')));\r\n  } else {\r\n    for (let endpoint of spec.endpoints) {\r\n      let response = new Response(new ContentType(endpoint.response.contentType.type, endpoint.response.contentType.contentType), endpoint.response.content, endpoint.response.responseCode);\r\n      endpoints.push(new Endpoint(endpoint.url, endpoint.method, getHeadersFromJson(endpoint), response));\r\n    }\r\n\r\n    for (let endpoint of spec.socketEndpoints) {\r\n      endpoints.push(new SocketEndpoint(endpoint.eventName, endpoint.eventToEmit, endpoint.payload, endpoint.emitType));\r\n    }\r\n\r\n    for (let endpoint of spec.graphqlEndpoints) {\r\n      endpoints.push(new GraphqlEndpoint(endpoint.url, endpoint.schema));\r\n    }\r\n\r\n    for (let endpoint of spec.proxyEndpoints) {\r\n      endpoints.push(new ProxyEndpoint(endpoint.url, endpoint.urlToProxy));\r\n    }\r\n\r\n    if (spec.jsonServerEndpoint) {\r\n      endpoints.push(new JsonServerEndpoint(spec.jsonServerEndpoint.url, spec.jsonServerEndpoint.model));\r\n    }\r\n  }\r\n  return endpoints;\r\n}\r\n\r\n/**\r\n * Returns a plain object tranforming the endpoints\r\n */\r\nexport function getPayload(endpoints) {\r\n  let httpEndpoints = [];\r\n  let socketEndpoints = [];\r\n  let graphqlEndpoints = [];\r\n  let proxyEndpoints = [];\r\n  let jsonServerEndpoint = null;\r\n\r\n  for (let endpoint of endpoints) {\r\n    if (endpoint.type === 'http') {\r\n      httpEndpoints.push(endpoint);\r\n    } else if (endpoint.type === 'socket') {\r\n      socketEndpoints.push(endpoint);\r\n    } else if (endpoint.type === 'gql') {\r\n      graphqlEndpoints.push(endpoint);\r\n    } else if (endpoint.type === 'jsonServer') {\r\n      jsonServerEndpoint = endpoint;\r\n    } else if (endpoint.type === 'proxy') {\r\n      proxyEndpoints.push(endpoint);\r\n    }\r\n  }\r\n\r\n  let payload = {\r\n    endpoints: mobx.toJSON(httpEndpoints),\r\n    socketEndpoints: mobx.toJSON(socketEndpoints),\r\n    graphqlEndpoints: mobx.toJSON(graphqlEndpoints),\r\n    jsonServerEndpoint: jsonServerEndpoint,\r\n    proxyEndpoints: mobx.toJSON(proxyEndpoints)\r\n  };\r\n\r\n  return payload;\r\n}\r\n\r\n/**\r\n * Retrurns true if a json-server endpoint already exists; Else false.\r\n */\r\nexport function isAnyJsonServerEndpointAvailable(endpoints) {\r\n  for (let endpoint of endpoints) {\r\n    if (endpoint.type === 'jsonServer') {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns an array of headers for a http request\r\n */\r\nfunction getHeadersFromJson(endpoint) {\r\n  let headers = [];\r\n  for (let header of endpoint.headers) {\r\n    headers.push(new Header(header.key, header.value));\r\n  }\r\n  return headers;\r\n}","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/client/models/Statuses.js":"import Status from './Status';\r\n\r\nexport const deploying = new Status('selected radio', 'Deployment in progress...', 'Deploying', 'blue');\r\nexport const deployed = new Status('checkmark', 'API server is running!', 'Deployed', 'green');\r\nexport const failed = new Status('remove', 'Deployment failed. Check console for error log.', 'Failed', 'red');\r\nexport const initial = new Status('lightning', \"click 'Deploy' to start!\", '', 'gray');","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/client/models/Status.js":"import {observable} from 'mobx';\r\n\r\nexport default class Status {\r\n  @observable icon;\r\n  @observable message;\r\n  @observable miniMessage;\r\n  @observable color;\r\n\r\n  constructor(icon, message, miniMessage, color) {\r\n    this.icon = icon;\r\n    this.message = message;\r\n    this.miniMessage = miniMessage;\r\n    this.color = color;\r\n  }\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/client/semantic/semantic.js":" /*\r\n * # Semantic UI - 2.1.7\r\n * https://github.com/Semantic-Org/Semantic-UI\r\n * http://www.semantic-ui.com/\r\n *\r\n * Copyright 2014 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n/*!\r\n * # Semantic UI 2.1.7 - Site\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n;(function ( $, window, document, undefined ) {\r\n\r\n$.site = $.fn.site = function(parameters) {\r\n  var\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n\r\n    settings        = ( $.isPlainObject(parameters) )\r\n      ? $.extend(true, {}, $.site.settings, parameters)\r\n      : $.extend({}, $.site.settings),\r\n\r\n    namespace       = settings.namespace,\r\n    error           = settings.error,\r\n\r\n    eventNamespace  = '.' + namespace,\r\n    moduleNamespace = 'module-' + namespace,\r\n\r\n    $document       = $(document),\r\n    $module         = $document,\r\n    element         = this,\r\n    instance        = $module.data(moduleNamespace),\r\n\r\n    module,\r\n    returnedValue\r\n  ;\r\n  module = {\r\n\r\n    initialize: function() {\r\n      module.instantiate();\r\n    },\r\n\r\n    instantiate: function() {\r\n      module.verbose('Storing instance of site', module);\r\n      instance = module;\r\n      $module\r\n        .data(moduleNamespace, module)\r\n      ;\r\n    },\r\n\r\n    normalize: function() {\r\n      module.fix.console();\r\n      module.fix.requestAnimationFrame();\r\n    },\r\n\r\n    fix: {\r\n      console: function() {\r\n        module.debug('Normalizing window.console');\r\n        if (console === undefined || console.log === undefined) {\r\n          module.verbose('Console not available, normalizing events');\r\n          module.disable.console();\r\n        }\r\n        if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {\r\n          module.verbose('Console group not available, normalizing events');\r\n          window.console.group = function() {};\r\n          window.console.groupEnd = function() {};\r\n          window.console.groupCollapsed = function() {};\r\n        }\r\n        if (typeof console.markTimeline == 'undefined') {\r\n          module.verbose('Mark timeline not available, normalizing events');\r\n          window.console.markTimeline = function() {};\r\n        }\r\n      },\r\n      consoleClear: function() {\r\n        module.debug('Disabling programmatic console clearing');\r\n        window.console.clear = function() {};\r\n      },\r\n      requestAnimationFrame: function() {\r\n        module.debug('Normalizing requestAnimationFrame');\r\n        if(window.requestAnimationFrame === undefined) {\r\n          module.debug('RequestAnimationFrame not available, normalizing event');\r\n          window.requestAnimationFrame = window.requestAnimationFrame\r\n            || window.mozRequestAnimationFrame\r\n            || window.webkitRequestAnimationFrame\r\n            || window.msRequestAnimationFrame\r\n            || function(callback) { setTimeout(callback, 0); }\r\n          ;\r\n        }\r\n      }\r\n    },\r\n\r\n    moduleExists: function(name) {\r\n      return ($.fn[name] !== undefined && $.fn[name].settings !== undefined);\r\n    },\r\n\r\n    enabled: {\r\n      modules: function(modules) {\r\n        var\r\n          enabledModules = []\r\n        ;\r\n        modules = modules || settings.modules;\r\n        $.each(modules, function(index, name) {\r\n          if(module.moduleExists(name)) {\r\n            enabledModules.push(name);\r\n          }\r\n        });\r\n        return enabledModules;\r\n      }\r\n    },\r\n\r\n    disabled: {\r\n      modules: function(modules) {\r\n        var\r\n          disabledModules = []\r\n        ;\r\n        modules = modules || settings.modules;\r\n        $.each(modules, function(index, name) {\r\n          if(!module.moduleExists(name)) {\r\n            disabledModules.push(name);\r\n          }\r\n        });\r\n        return disabledModules;\r\n      }\r\n    },\r\n\r\n    change: {\r\n      setting: function(setting, value, modules, modifyExisting) {\r\n        modules = (typeof modules === 'string')\r\n          ? (modules === 'all')\r\n            ? settings.modules\r\n            : [modules]\r\n          : modules || settings.modules\r\n        ;\r\n        modifyExisting = (modifyExisting !== undefined)\r\n          ? modifyExisting\r\n          : true\r\n        ;\r\n        $.each(modules, function(index, name) {\r\n          var\r\n            namespace = (module.moduleExists(name))\r\n              ? $.fn[name].settings.namespace || false\r\n              : true,\r\n            $existingModules\r\n          ;\r\n          if(module.moduleExists(name)) {\r\n            module.verbose('Changing default setting', setting, value, name);\r\n            $.fn[name].settings[setting] = value;\r\n            if(modifyExisting && namespace) {\r\n              $existingModules = $(':data(module-' + namespace + ')');\r\n              if($existingModules.length > 0) {\r\n                module.verbose('Modifying existing settings', $existingModules);\r\n                $existingModules[name]('setting', setting, value);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      },\r\n      settings: function(newSettings, modules, modifyExisting) {\r\n        modules = (typeof modules === 'string')\r\n          ? [modules]\r\n          : modules || settings.modules\r\n        ;\r\n        modifyExisting = (modifyExisting !== undefined)\r\n          ? modifyExisting\r\n          : true\r\n        ;\r\n        $.each(modules, function(index, name) {\r\n          var\r\n            $existingModules\r\n          ;\r\n          if(module.moduleExists(name)) {\r\n            module.verbose('Changing default setting', newSettings, name);\r\n            $.extend(true, $.fn[name].settings, newSettings);\r\n            if(modifyExisting && namespace) {\r\n              $existingModules = $(':data(module-' + namespace + ')');\r\n              if($existingModules.length > 0) {\r\n                module.verbose('Modifying existing settings', $existingModules);\r\n                $existingModules[name]('setting', newSettings);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    enable: {\r\n      console: function() {\r\n        module.console(true);\r\n      },\r\n      debug: function(modules, modifyExisting) {\r\n        modules = modules || settings.modules;\r\n        module.debug('Enabling debug for modules', modules);\r\n        module.change.setting('debug', true, modules, modifyExisting);\r\n      },\r\n      verbose: function(modules, modifyExisting) {\r\n        modules = modules || settings.modules;\r\n        module.debug('Enabling verbose debug for modules', modules);\r\n        module.change.setting('verbose', true, modules, modifyExisting);\r\n      }\r\n    },\r\n    disable: {\r\n      console: function() {\r\n        module.console(false);\r\n      },\r\n      debug: function(modules, modifyExisting) {\r\n        modules = modules || settings.modules;\r\n        module.debug('Disabling debug for modules', modules);\r\n        module.change.setting('debug', false, modules, modifyExisting);\r\n      },\r\n      verbose: function(modules, modifyExisting) {\r\n        modules = modules || settings.modules;\r\n        module.debug('Disabling verbose debug for modules', modules);\r\n        module.change.setting('verbose', false, modules, modifyExisting);\r\n      }\r\n    },\r\n\r\n    console: function(enable) {\r\n      if(enable) {\r\n        if(instance.cache.console === undefined) {\r\n          module.error(error.console);\r\n          return;\r\n        }\r\n        module.debug('Restoring console function');\r\n        window.console = instance.cache.console;\r\n      }\r\n      else {\r\n        module.debug('Disabling console function');\r\n        instance.cache.console = window.console;\r\n        window.console = {\r\n          clear          : function(){},\r\n          error          : function(){},\r\n          group          : function(){},\r\n          groupCollapsed : function(){},\r\n          groupEnd       : function(){},\r\n          info           : function(){},\r\n          log            : function(){},\r\n          markTimeline   : function(){},\r\n          warn           : function(){}\r\n        };\r\n      }\r\n    },\r\n\r\n    destroy: function() {\r\n      module.verbose('Destroying previous site for', $module);\r\n      $module\r\n        .removeData(moduleNamespace)\r\n      ;\r\n    },\r\n\r\n    cache: {},\r\n\r\n    setting: function(name, value) {\r\n      if( $.isPlainObject(name) ) {\r\n        $.extend(true, settings, name);\r\n      }\r\n      else if(value !== undefined) {\r\n        settings[name] = value;\r\n      }\r\n      else {\r\n        return settings[name];\r\n      }\r\n    },\r\n    internal: function(name, value) {\r\n      if( $.isPlainObject(name) ) {\r\n        $.extend(true, module, name);\r\n      }\r\n      else if(value !== undefined) {\r\n        module[name] = value;\r\n      }\r\n      else {\r\n        return module[name];\r\n      }\r\n    },\r\n    debug: function() {\r\n      if(settings.debug) {\r\n        if(settings.performance) {\r\n          module.performance.log(arguments);\r\n        }\r\n        else {\r\n          module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n          module.debug.apply(console, arguments);\r\n        }\r\n      }\r\n    },\r\n    verbose: function() {\r\n      if(settings.verbose && settings.debug) {\r\n        if(settings.performance) {\r\n          module.performance.log(arguments);\r\n        }\r\n        else {\r\n          module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n          module.verbose.apply(console, arguments);\r\n        }\r\n      }\r\n    },\r\n    error: function() {\r\n      module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n      module.error.apply(console, arguments);\r\n    },\r\n    performance: {\r\n      log: function(message) {\r\n        var\r\n          currentTime,\r\n          executionTime,\r\n          previousTime\r\n        ;\r\n        if(settings.performance) {\r\n          currentTime   = new Date().getTime();\r\n          previousTime  = time || currentTime;\r\n          executionTime = currentTime - previousTime;\r\n          time          = currentTime;\r\n          performance.push({\r\n            'Element'        : element,\r\n            'Name'           : message[0],\r\n            'Arguments'      : [].slice.call(message, 1) || '',\r\n            'Execution Time' : executionTime\r\n          });\r\n        }\r\n        clearTimeout(module.performance.timer);\r\n        module.performance.timer = setTimeout(module.performance.display, 500);\r\n      },\r\n      display: function() {\r\n        var\r\n          title = settings.name + ':',\r\n          totalTime = 0\r\n        ;\r\n        time = false;\r\n        clearTimeout(module.performance.timer);\r\n        $.each(performance, function(index, data) {\r\n          totalTime += data['Execution Time'];\r\n        });\r\n        title += ' ' + totalTime + 'ms';\r\n        if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n          console.groupCollapsed(title);\r\n          if(console.table) {\r\n            console.table(performance);\r\n          }\r\n          else {\r\n            $.each(performance, function(index, data) {\r\n              console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n            });\r\n          }\r\n          console.groupEnd();\r\n        }\r\n        performance = [];\r\n      }\r\n    },\r\n    invoke: function(query, passedArguments, context) {\r\n      var\r\n        object = instance,\r\n        maxDepth,\r\n        found,\r\n        response\r\n      ;\r\n      passedArguments = passedArguments || queryArguments;\r\n      context         = element         || context;\r\n      if(typeof query == 'string' && object !== undefined) {\r\n        query    = query.split(/[\\. ]/);\r\n        maxDepth = query.length - 1;\r\n        $.each(query, function(depth, value) {\r\n          var camelCaseValue = (depth != maxDepth)\r\n            ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n            : query\r\n          ;\r\n          if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n            object = object[camelCaseValue];\r\n          }\r\n          else if( object[camelCaseValue] !== undefined ) {\r\n            found = object[camelCaseValue];\r\n            return false;\r\n          }\r\n          else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n            object = object[value];\r\n          }\r\n          else if( object[value] !== undefined ) {\r\n            found = object[value];\r\n            return false;\r\n          }\r\n          else {\r\n            module.error(error.method, query);\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      if ( $.isFunction( found ) ) {\r\n        response = found.apply(context, passedArguments);\r\n      }\r\n      else if(found !== undefined) {\r\n        response = found;\r\n      }\r\n      if($.isArray(returnedValue)) {\r\n        returnedValue.push(response);\r\n      }\r\n      else if(returnedValue !== undefined) {\r\n        returnedValue = [returnedValue, response];\r\n      }\r\n      else if(response !== undefined) {\r\n        returnedValue = response;\r\n      }\r\n      return found;\r\n    }\r\n  };\r\n\r\n  if(methodInvoked) {\r\n    if(instance === undefined) {\r\n      module.initialize();\r\n    }\r\n    module.invoke(query);\r\n  }\r\n  else {\r\n    if(instance !== undefined) {\r\n      module.destroy();\r\n    }\r\n    module.initialize();\r\n  }\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.site.settings = {\r\n\r\n  name        : 'Site',\r\n  namespace   : 'site',\r\n\r\n  error : {\r\n    console : 'Console cannot be restored, most likely it was overwritten outside of module',\r\n    method : 'The method you called is not defined.'\r\n  },\r\n\r\n  debug       : false,\r\n  verbose     : false,\r\n  performance : true,\r\n\r\n  modules: [\r\n    'accordion',\r\n    'api',\r\n    'checkbox',\r\n    'dimmer',\r\n    'dropdown',\r\n    'embed',\r\n    'form',\r\n    'modal',\r\n    'nag',\r\n    'popup',\r\n    'rating',\r\n    'shape',\r\n    'sidebar',\r\n    'state',\r\n    'sticky',\r\n    'tab',\r\n    'transition',\r\n    'visit',\r\n    'visibility'\r\n  ],\r\n\r\n  siteNamespace   : 'site',\r\n  namespaceStub   : {\r\n    cache     : {},\r\n    config    : {},\r\n    sections  : {},\r\n    section   : {},\r\n    utilities : {}\r\n  }\r\n\r\n};\r\n\r\n// allows for selection of elements with data attributes\r\n$.extend($.expr[ \":\" ], {\r\n  data: ($.expr.createPseudo)\r\n    ? $.expr.createPseudo(function(dataName) {\r\n        return function(elem) {\r\n          return !!$.data(elem, dataName);\r\n        };\r\n      })\r\n    : function(elem, i, match) {\r\n      // support: jQuery < 1.8\r\n      return !!$.data(elem, match[ 3 ]);\r\n    }\r\n});\r\n\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Form Validation\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.form = function(parameters) {\r\n  var\r\n    $allModules      = $(this),\r\n    moduleSelector   = $allModules.selector || '',\r\n\r\n    time             = new Date().getTime(),\r\n    performance      = [],\r\n\r\n    query            = arguments[0],\r\n    legacyParameters = arguments[1],\r\n    methodInvoked    = (typeof query == 'string'),\r\n    queryArguments   = [].slice.call(arguments, 1),\r\n    returnedValue\r\n  ;\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        $module     = $(this),\r\n        element     = this,\r\n\r\n        formErrors  = [],\r\n        keyHeldDown = false,\r\n\r\n        // set at run-time\r\n        $field,\r\n        $group,\r\n        $message,\r\n        $prompt,\r\n        $submit,\r\n        $clear,\r\n        $reset,\r\n\r\n        settings,\r\n        validation,\r\n\r\n        metadata,\r\n        selector,\r\n        className,\r\n        error,\r\n\r\n        namespace,\r\n        moduleNamespace,\r\n        eventNamespace,\r\n\r\n        instance,\r\n        module\r\n      ;\r\n\r\n      module      = {\r\n\r\n        initialize: function() {\r\n\r\n          // settings grabbed at run time\r\n          module.get.settings();\r\n          if(methodInvoked) {\r\n            if(instance === undefined) {\r\n              module.instantiate();\r\n            }\r\n            module.invoke(query);\r\n          }\r\n          else {\r\n            module.verbose('Initializing form validation', $module, settings);\r\n            module.bindEvents();\r\n            module.set.defaults();\r\n            module.instantiate();\r\n          }\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous module', instance);\r\n          module.removeEvents();\r\n          $module\r\n            .removeData(moduleNamespace)\r\n          ;\r\n        },\r\n\r\n        refresh: function() {\r\n          module.verbose('Refreshing selector cache');\r\n          $field      = $module.find(selector.field);\r\n          $group      = $module.find(selector.group);\r\n          $message    = $module.find(selector.message);\r\n          $prompt     = $module.find(selector.prompt);\r\n\r\n          $submit     = $module.find(selector.submit);\r\n          $clear      = $module.find(selector.clear);\r\n          $reset      = $module.find(selector.reset);\r\n        },\r\n\r\n        submit: function() {\r\n          module.verbose('Submitting form', $module);\r\n          $module\r\n            .submit()\r\n          ;\r\n        },\r\n\r\n        attachEvents: function(selector, action) {\r\n          action = action || 'submit';\r\n          $(selector)\r\n            .on('click' + eventNamespace, function(event) {\r\n              module[action]();\r\n              event.preventDefault();\r\n            })\r\n          ;\r\n        },\r\n\r\n        bindEvents: function() {\r\n          module.verbose('Attaching form events');\r\n          $module\r\n            .on('submit' + eventNamespace, module.validate.form)\r\n            .on('blur'   + eventNamespace, selector.field, module.event.field.blur)\r\n            .on('click'  + eventNamespace, selector.submit, module.submit)\r\n            .on('click'  + eventNamespace, selector.reset, module.reset)\r\n            .on('click'  + eventNamespace, selector.clear, module.clear)\r\n          ;\r\n          if(settings.keyboardShortcuts) {\r\n            $module\r\n              .on('keydown' + eventNamespace, selector.field, module.event.field.keydown)\r\n            ;\r\n          }\r\n          $field\r\n            .each(function() {\r\n              var\r\n                $input     = $(this),\r\n                type       = $input.prop('type'),\r\n                inputEvent = module.get.changeEvent(type, $input)\r\n              ;\r\n              $(this)\r\n                .on(inputEvent + eventNamespace, module.event.field.change)\r\n              ;\r\n            })\r\n          ;\r\n        },\r\n\r\n        clear: function() {\r\n          $field\r\n            .each(function () {\r\n              var\r\n                $field       = $(this),\r\n                $element     = $field.parent(),\r\n                $fieldGroup  = $field.closest($group),\r\n                $prompt      = $fieldGroup.find(selector.prompt),\r\n                defaultValue = $field.data(metadata.defaultValue) || '',\r\n                isCheckbox   = $element.is(selector.uiCheckbox),\r\n                isDropdown   = $element.is(selector.uiDropdown),\r\n                isErrored    = $fieldGroup.hasClass(className.error)\r\n              ;\r\n              if(isErrored) {\r\n                module.verbose('Resetting error on field', $fieldGroup);\r\n                $fieldGroup.removeClass(className.error);\r\n                $prompt.remove();\r\n              }\r\n              if(isDropdown) {\r\n                module.verbose('Resetting dropdown value', $element, defaultValue);\r\n                $element.dropdown('clear');\r\n              }\r\n              else if(isCheckbox) {\r\n                $field.prop('checked', false);\r\n              }\r\n              else {\r\n                module.verbose('Resetting field value', $field, defaultValue);\r\n                $field.val('');\r\n              }\r\n            })\r\n          ;\r\n        },\r\n\r\n        reset: function() {\r\n          $field\r\n            .each(function () {\r\n              var\r\n                $field       = $(this),\r\n                $element     = $field.parent(),\r\n                $fieldGroup  = $field.closest($group),\r\n                $prompt      = $fieldGroup.find(selector.prompt),\r\n                defaultValue = $field.data(metadata.defaultValue),\r\n                isCheckbox   = $element.is(selector.uiCheckbox),\r\n                isDropdown   = $element.is(selector.uiDropdown),\r\n                isErrored    = $fieldGroup.hasClass(className.error)\r\n              ;\r\n              if(defaultValue === undefined) {\r\n                return;\r\n              }\r\n              if(isErrored) {\r\n                module.verbose('Resetting error on field', $fieldGroup);\r\n                $fieldGroup.removeClass(className.error);\r\n                $prompt.remove();\r\n              }\r\n              if(isDropdown) {\r\n                module.verbose('Resetting dropdown value', $element, defaultValue);\r\n                $element.dropdown('restore defaults');\r\n              }\r\n              else if(isCheckbox) {\r\n                module.verbose('Resetting checkbox value', $element, defaultValue);\r\n                $field.prop('checked', defaultValue);\r\n              }\r\n              else {\r\n                module.verbose('Resetting field value', $field, defaultValue);\r\n                $field.val(defaultValue);\r\n              }\r\n            })\r\n          ;\r\n        },\r\n\r\n        is: {\r\n          bracketedRule: function(rule) {\r\n            return (rule.type && rule.type.match(settings.regExp.bracket));\r\n          },\r\n          valid: function() {\r\n            var\r\n              allValid = true\r\n            ;\r\n            module.verbose('Checking if form is valid');\r\n            $.each(validation, function(fieldName, field) {\r\n              if( !( module.validate.field(field, fieldName) ) ) {\r\n                allValid = false;\r\n              }\r\n            });\r\n            return allValid;\r\n          }\r\n        },\r\n\r\n        removeEvents: function() {\r\n          $module\r\n            .off(eventNamespace)\r\n          ;\r\n          $field\r\n            .off(eventNamespace)\r\n          ;\r\n          $submit\r\n            .off(eventNamespace)\r\n          ;\r\n          $field\r\n            .off(eventNamespace)\r\n          ;\r\n        },\r\n\r\n        event: {\r\n          field: {\r\n            keydown: function(event) {\r\n              var\r\n                $field  = $(this),\r\n                key     = event.which,\r\n                keyCode = {\r\n                  enter  : 13,\r\n                  escape : 27\r\n                }\r\n              ;\r\n              if( key == keyCode.escape) {\r\n                module.verbose('Escape key pressed blurring field');\r\n                $field\r\n                  .blur()\r\n                ;\r\n              }\r\n              if(!event.ctrlKey && key == keyCode.enter && $field.is(selector.input) && $field.not(selector.checkbox).length > 0 ) {\r\n                if(!keyHeldDown) {\r\n                  $field\r\n                    .one('keyup' + eventNamespace, module.event.field.keyup)\r\n                  ;\r\n                  module.submit();\r\n                  module.debug('Enter pressed on input submitting form');\r\n                }\r\n                keyHeldDown = true;\r\n              }\r\n            },\r\n            keyup: function() {\r\n              keyHeldDown = false;\r\n            },\r\n            blur: function(event) {\r\n              var\r\n                $field          = $(this),\r\n                $fieldGroup     = $field.closest($group),\r\n                validationRules = module.get.validation($field)\r\n              ;\r\n              if( $fieldGroup.hasClass(className.error) ) {\r\n                module.debug('Revalidating field', $field, validationRules);\r\n                module.validate.form.call(module, event, true);\r\n              }\r\n              else if(settings.on == 'blur' || settings.on == 'change') {\r\n                if(validationRules) {\r\n                  module.validate.field( validationRules );\r\n                }\r\n              }\r\n            },\r\n            change: function(event) {\r\n              var\r\n                $field      = $(this),\r\n                $fieldGroup = $field.closest($group)\r\n              ;\r\n              if(settings.on == 'change' || ( $fieldGroup.hasClass(className.error) && settings.revalidate) ) {\r\n                clearTimeout(module.timer);\r\n                module.timer = setTimeout(function() {\r\n                  module.debug('Revalidating field', $field,  module.get.validation($field));\r\n                  module.validate.form.call(module, event, true);\r\n                }, settings.delay);\r\n              }\r\n            }\r\n          }\r\n\r\n        },\r\n\r\n        get: {\r\n          ancillaryValue: function(rule) {\r\n            if(!rule.type || !module.is.bracketedRule(rule)) {\r\n              return false;\r\n            }\r\n            return rule.type.match(settings.regExp.bracket)[1] + '';\r\n          },\r\n          ruleName: function(rule) {\r\n            if( module.is.bracketedRule(rule) ) {\r\n              return rule.type.replace(rule.type.match(settings.regExp.bracket)[0], '');\r\n            }\r\n            return rule.type;\r\n          },\r\n          changeEvent: function(type, $input) {\r\n            if(type == 'checkbox' || type == 'radio' || type == 'hidden' || $input.is('select')) {\r\n              return 'change';\r\n            }\r\n            else {\r\n              return module.get.inputEvent();\r\n            }\r\n          },\r\n          inputEvent: function() {\r\n            return (document.createElement('input').oninput !== undefined)\r\n              ? 'input'\r\n              : (document.createElement('input').onpropertychange !== undefined)\r\n                ? 'propertychange'\r\n                : 'keyup'\r\n            ;\r\n          },\r\n          prompt: function(rule, field) {\r\n            var\r\n              ruleName      = module.get.ruleName(rule),\r\n              ancillary     = module.get.ancillaryValue(rule),\r\n              prompt        = rule.prompt || settings.prompt[ruleName] || settings.text.unspecifiedRule,\r\n              requiresValue = (prompt.search('{value}') !== -1),\r\n              requiresName  = (prompt.search('{name}') !== -1),\r\n              $label,\r\n              $field,\r\n              name\r\n            ;\r\n            if(requiresName || requiresValue) {\r\n              $field = module.get.field(field.identifier);\r\n            }\r\n            if(requiresValue) {\r\n              prompt = prompt.replace('{value}', $field.val());\r\n            }\r\n            if(requiresName) {\r\n              $label = $field.closest(selector.group).find('label').eq(0);\r\n              name = ($label.size() == 1)\r\n                ? $label.text()\r\n                : $field.prop('placeholder') || settings.text.unspecifiedField\r\n              ;\r\n              prompt = prompt.replace('{name}', name);\r\n            }\r\n            prompt = prompt.replace('{identifier}', field.identifier);\r\n            prompt = prompt.replace('{ruleValue}', ancillary);\r\n            if(!rule.prompt) {\r\n              module.verbose('Using default validation prompt for type', prompt, ruleName);\r\n            }\r\n            return prompt;\r\n          },\r\n          settings: function() {\r\n            if($.isPlainObject(parameters)) {\r\n              var\r\n                keys     = Object.keys(parameters),\r\n                isLegacySettings = (keys.length > 0)\r\n                  ? (parameters[keys[0]].identifier !== undefined && parameters[keys[0]].rules !== undefined)\r\n                  : false,\r\n                ruleKeys\r\n              ;\r\n              if(isLegacySettings) {\r\n                // 1.x (ducktyped)\r\n                settings   = $.extend(true, {}, $.fn.form.settings, legacyParameters);\r\n                validation = $.extend({}, $.fn.form.settings.defaults, parameters);\r\n                module.error(settings.error.oldSyntax, element);\r\n                module.verbose('Extending settings from legacy parameters', validation, settings);\r\n              }\r\n              else {\r\n                // 2.x\r\n                if(parameters.fields) {\r\n                  ruleKeys = Object.keys(parameters.fields);\r\n                  if( typeof parameters.fields[ruleKeys[0]] == 'string' || $.isArray(parameters.fields[ruleKeys[0]]) ) {\r\n                    $.each(parameters.fields, function(name, rules) {\r\n                      if(typeof rules == 'string') {\r\n                        rules = [rules];\r\n                      }\r\n                      parameters.fields[name] = {\r\n                        rules: []\r\n                      };\r\n                      $.each(rules, function(index, rule) {\r\n                        parameters.fields[name].rules.push({ type: rule });\r\n                      });\r\n                    });\r\n                  }\r\n                }\r\n\r\n                settings   = $.extend(true, {}, $.fn.form.settings, parameters);\r\n                validation = $.extend({}, $.fn.form.settings.defaults, settings.fields);\r\n                module.verbose('Extending settings', validation, settings);\r\n              }\r\n            }\r\n            else {\r\n              settings   = $.fn.form.settings;\r\n              validation = $.fn.form.settings.defaults;\r\n              module.verbose('Using default form validation', validation, settings);\r\n            }\r\n\r\n            // shorthand\r\n            namespace       = settings.namespace;\r\n            metadata        = settings.metadata;\r\n            selector        = settings.selector;\r\n            className       = settings.className;\r\n            error           = settings.error;\r\n            moduleNamespace = 'module-' + namespace;\r\n            eventNamespace  = '.' + namespace;\r\n\r\n            // grab instance\r\n            instance = $module.data(moduleNamespace);\r\n\r\n            // refresh selector cache\r\n            module.refresh();\r\n          },\r\n          field: function(identifier) {\r\n            module.verbose('Finding field with identifier', identifier);\r\n            if( $field.filter('#' + identifier).length > 0 ) {\r\n              return $field.filter('#' + identifier);\r\n            }\r\n            else if( $field.filter('[name=\"' + identifier +'\"]').length > 0 ) {\r\n              return $field.filter('[name=\"' + identifier +'\"]');\r\n            }\r\n            else if( $field.filter('[name=\"' + identifier +'[]\"]').length > 0 ) {\r\n              return $field.filter('[name=\"' + identifier +'[]\"]');\r\n            }\r\n            else if( $field.filter('[data-' + metadata.validate + '=\"'+ identifier +'\"]').length > 0 ) {\r\n              return $field.filter('[data-' + metadata.validate + '=\"'+ identifier +'\"]');\r\n            }\r\n            return $('<input/>');\r\n          },\r\n          fields: function(fields) {\r\n            var\r\n              $fields = $()\r\n            ;\r\n            $.each(fields, function(index, name) {\r\n              $fields = $fields.add( module.get.field(name) );\r\n            });\r\n            return $fields;\r\n          },\r\n          validation: function($field) {\r\n            var\r\n              fieldValidation,\r\n              identifier\r\n            ;\r\n            if(!validation) {\r\n              return false;\r\n            }\r\n            $.each(validation, function(fieldName, field) {\r\n              identifier = field.identifier || fieldName;\r\n              if( module.get.field(identifier)[0] == $field[0] ) {\r\n                field.identifier = identifier;\r\n                fieldValidation = field;\r\n              }\r\n            });\r\n            return fieldValidation || false;\r\n          },\r\n          value: function (field) {\r\n            var\r\n              fields = [],\r\n              results\r\n            ;\r\n            fields.push(field);\r\n            results = module.get.values.call(element, fields);\r\n            return results[field];\r\n          },\r\n          values: function (fields) {\r\n            var\r\n              $fields = $.isArray(fields)\r\n                ? module.get.fields(fields)\r\n                : $field,\r\n              values = {}\r\n            ;\r\n            $fields.each(function(index, field) {\r\n              var\r\n                $field     = $(field),\r\n                type       = $field.prop('type'),\r\n                name       = $field.prop('name'),\r\n                value      = $field.val(),\r\n                isCheckbox = $field.is(selector.checkbox),\r\n                isRadio    = $field.is(selector.radio),\r\n                isMultiple = (name.indexOf('[]') !== -1),\r\n                isChecked  = (isCheckbox)\r\n                  ? $field.is(':checked')\r\n                  : false\r\n              ;\r\n              if(name) {\r\n                if(isMultiple) {\r\n                  name = name.replace('[]', '');\r\n                  if(!values[name]) {\r\n                    values[name] = [];\r\n                  }\r\n                  if(isCheckbox) {\r\n                    if(isChecked) {\r\n                      values[name].push(value || true);\r\n                    }\r\n                    else {\r\n                      values[name].push(false);\r\n                    }\r\n                  }\r\n                  else {\r\n                    values[name].push(value);\r\n                  }\r\n                }\r\n                else {\r\n                  if(isRadio) {\r\n                    if(isChecked) {\r\n                      values[name] = value;\r\n                    }\r\n                  }\r\n                  else if(isCheckbox) {\r\n                    if(isChecked) {\r\n                      values[name] = value || true;\r\n                    }\r\n                    else {\r\n                      values[name] = false;\r\n                    }\r\n                  }\r\n                  else {\r\n                    values[name] = value;\r\n                  }\r\n                }\r\n              }\r\n            });\r\n            return values;\r\n          }\r\n        },\r\n\r\n        has: {\r\n\r\n          field: function(identifier) {\r\n            module.verbose('Checking for existence of a field with identifier', identifier);\r\n            if(typeof identifier !== 'string') {\r\n              module.error(error.identifier, identifier);\r\n            }\r\n            if( $field.filter('#' + identifier).length > 0 ) {\r\n              return true;\r\n            }\r\n            else if( $field.filter('[name=\"' + identifier +'\"]').length > 0 ) {\r\n              return true;\r\n            }\r\n            else if( $field.filter('[data-' + metadata.validate + '=\"'+ identifier +'\"]').length > 0 ) {\r\n              return true;\r\n            }\r\n            return false;\r\n          }\r\n\r\n        },\r\n\r\n        add: {\r\n          prompt: function(identifier, errors) {\r\n            var\r\n              $field       = module.get.field(identifier),\r\n              $fieldGroup  = $field.closest($group),\r\n              $prompt      = $fieldGroup.children(selector.prompt),\r\n              promptExists = ($prompt.length !== 0)\r\n            ;\r\n            errors = (typeof errors == 'string')\r\n              ? [errors]\r\n              : errors\r\n            ;\r\n            module.verbose('Adding field error state', identifier);\r\n            $fieldGroup\r\n              .addClass(className.error)\r\n            ;\r\n            if(settings.inline) {\r\n              if(!promptExists) {\r\n                $prompt = settings.templates.prompt(errors);\r\n                $prompt\r\n                  .appendTo($fieldGroup)\r\n                ;\r\n              }\r\n              $prompt\r\n                .html(errors[0])\r\n              ;\r\n              if(!promptExists) {\r\n                if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\r\n                  module.verbose('Displaying error with css transition', settings.transition);\r\n                  $prompt.transition(settings.transition + ' in', settings.duration);\r\n                }\r\n                else {\r\n                  module.verbose('Displaying error with fallback javascript animation');\r\n                  $prompt\r\n                    .fadeIn(settings.duration)\r\n                  ;\r\n                }\r\n              }\r\n              else {\r\n                module.verbose('Inline errors are disabled, no inline error added', identifier);\r\n              }\r\n            }\r\n          },\r\n          errors: function(errors) {\r\n            module.debug('Adding form error messages', errors);\r\n            module.set.error();\r\n            $message\r\n              .html( settings.templates.error(errors) )\r\n            ;\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          prompt: function(identifier) {\r\n            var\r\n              $field      = module.get.field(identifier),\r\n              $fieldGroup = $field.closest($group),\r\n              $prompt     = $fieldGroup.children(selector.prompt)\r\n            ;\r\n            $fieldGroup\r\n              .removeClass(className.error)\r\n            ;\r\n            if(settings.inline && $prompt.is(':visible')) {\r\n              module.verbose('Removing prompt for field', identifier);\r\n              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\r\n                $prompt.transition(settings.transition + ' out', settings.duration, function() {\r\n                  $prompt.remove();\r\n                });\r\n              }\r\n              else {\r\n                $prompt\r\n                  .fadeOut(settings.duration, function(){\r\n                    $prompt.remove();\r\n                  })\r\n                ;\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        set: {\r\n          success: function() {\r\n            $module\r\n              .removeClass(className.error)\r\n              .addClass(className.success)\r\n            ;\r\n          },\r\n          defaults: function () {\r\n            $field\r\n              .each(function () {\r\n                var\r\n                  $field     = $(this),\r\n                  isCheckbox = ($field.filter(selector.checkbox).length > 0),\r\n                  value      = (isCheckbox)\r\n                    ? $field.is(':checked')\r\n                    : $field.val()\r\n                ;\r\n                $field.data(metadata.defaultValue, value);\r\n              })\r\n            ;\r\n          },\r\n          error: function() {\r\n            $module\r\n              .removeClass(className.success)\r\n              .addClass(className.error)\r\n            ;\r\n          },\r\n          value: function (field, value) {\r\n            var\r\n              fields = {}\r\n            ;\r\n            fields[field] = value;\r\n            return module.set.values.call(element, fields);\r\n          },\r\n          values: function (fields) {\r\n            if($.isEmptyObject(fields)) {\r\n              return;\r\n            }\r\n            $.each(fields, function(key, value) {\r\n              var\r\n                $field      = module.get.field(key),\r\n                $element    = $field.parent(),\r\n                isMultiple  = $.isArray(value),\r\n                isCheckbox  = $element.is(selector.uiCheckbox),\r\n                isDropdown  = $element.is(selector.uiDropdown),\r\n                isRadio     = ($field.is(selector.radio) && isCheckbox),\r\n                fieldExists = ($field.length > 0),\r\n                $multipleField\r\n              ;\r\n              if(fieldExists) {\r\n                if(isMultiple && isCheckbox) {\r\n                  module.verbose('Selecting multiple', value, $field);\r\n                  $element.checkbox('uncheck');\r\n                  $.each(value, function(index, value) {\r\n                    $multipleField = $field.filter('[value=\"' + value + '\"]');\r\n                    $element       = $multipleField.parent();\r\n                    if($multipleField.length > 0) {\r\n                      $element.checkbox('check');\r\n                    }\r\n                  });\r\n                }\r\n                else if(isRadio) {\r\n                  module.verbose('Selecting radio value', value, $field);\r\n                  $field.filter('[value=\"' + value + '\"]')\r\n                    .parent(selector.uiCheckbox)\r\n                      .checkbox('check')\r\n                  ;\r\n                }\r\n                else if(isCheckbox) {\r\n                  module.verbose('Setting checkbox value', value, $element);\r\n                  if(value === true) {\r\n                    $element.checkbox('check');\r\n                  }\r\n                  else {\r\n                    $element.checkbox('uncheck');\r\n                  }\r\n                }\r\n                else if(isDropdown) {\r\n                  module.verbose('Setting dropdown value', value, $element);\r\n                  $element.dropdown('set selected', value);\r\n                }\r\n                else {\r\n                  module.verbose('Setting field value', value, $field);\r\n                  $field.val(value);\r\n                }\r\n              }\r\n            });\r\n          }\r\n        },\r\n\r\n        validate: {\r\n\r\n          form: function(event, ignoreCallbacks) {\r\n            var\r\n              values = module.get.values(),\r\n              apiRequest\r\n            ;\r\n\r\n            // input keydown event will fire submit repeatedly by browser default\r\n            if(keyHeldDown) {\r\n              return false;\r\n            }\r\n\r\n            // reset errors\r\n            formErrors = [];\r\n            if( module.is.valid() ) {\r\n              module.debug('Form has no validation errors, submitting');\r\n              module.set.success();\r\n              if(ignoreCallbacks !== true) {\r\n                return settings.onSuccess.call(element, event, values);\r\n              }\r\n            }\r\n            else {\r\n              module.debug('Form has errors');\r\n              module.set.error();\r\n              if(!settings.inline) {\r\n                module.add.errors(formErrors);\r\n              }\r\n              // prevent ajax submit\r\n              if($module.data('moduleApi') !== undefined) {\r\n                event.stopImmediatePropagation();\r\n              }\r\n              if(ignoreCallbacks !== true) {\r\n                return settings.onFailure.call(element, formErrors, values);\r\n              }\r\n            }\r\n          },\r\n\r\n          // takes a validation object and returns whether field passes validation\r\n          field: function(field, fieldName) {\r\n            var\r\n              identifier  = field.identifier || fieldName,\r\n              $field      = module.get.field(identifier),\r\n              fieldValid  = true,\r\n              fieldErrors = []\r\n            ;\r\n            if(!field.identifier) {\r\n              module.debug('Using field name as identifier', identifier);\r\n              field.identifier = identifier;\r\n            }\r\n            if($field.prop('disabled')) {\r\n              module.debug('Field is disabled. Skipping', identifier);\r\n              fieldValid = true;\r\n            }\r\n            else if(field.optional && $.trim($field.val()) === ''){\r\n              module.debug('Field is optional and empty. Skipping', identifier);\r\n              fieldValid = true;\r\n            }\r\n            else if(field.rules !== undefined) {\r\n              $.each(field.rules, function(index, rule) {\r\n                if( module.has.field(identifier) && !( module.validate.rule(field, rule) ) ) {\r\n                  module.debug('Field is invalid', identifier, rule.type);\r\n                  fieldErrors.push(module.get.prompt(rule, field));\r\n                  fieldValid = false;\r\n                }\r\n              });\r\n            }\r\n            if(fieldValid) {\r\n              module.remove.prompt(identifier, fieldErrors);\r\n              settings.onValid.call($field);\r\n            }\r\n            else {\r\n              formErrors = formErrors.concat(fieldErrors);\r\n              module.add.prompt(identifier, fieldErrors);\r\n              settings.onInvalid.call($field, fieldErrors);\r\n              return false;\r\n            }\r\n            return true;\r\n          },\r\n\r\n          // takes validation rule and returns whether field passes rule\r\n          rule: function(field, rule) {\r\n            var\r\n              $field       = module.get.field(field.identifier),\r\n              type         = rule.type,\r\n              value        = $field.val(),\r\n              isValid      = true,\r\n              ancillary    = module.get.ancillaryValue(rule),\r\n              ruleName     = module.get.ruleName(rule),\r\n              ruleFunction = settings.rules[ruleName]\r\n            ;\r\n            if( !$.isFunction(ruleFunction) ) {\r\n              module.error(error.noRule, ruleName);\r\n              return;\r\n            }\r\n            // cast to string avoiding encoding special values\r\n            value = (value === undefined || value === '' || value === null)\r\n              ? ''\r\n              : $.trim(value + '')\r\n            ;\r\n            return ruleFunction.call($field, value, ancillary);\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if($allModules.length > 1) {\r\n              title += ' ' + '(' + $allModules.length + ')';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n      module.initialize();\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.form.settings = {\r\n\r\n  name              : 'Form',\r\n  namespace         : 'form',\r\n\r\n  debug             : false,\r\n  verbose           : false,\r\n  performance       : true,\r\n\r\n  fields            : false,\r\n\r\n  keyboardShortcuts : true,\r\n  on                : 'submit',\r\n  inline            : false,\r\n\r\n  delay             : 200,\r\n  revalidate        : true,\r\n\r\n  transition        : 'scale',\r\n  duration          : 200,\r\n\r\n  onValid           : function() {},\r\n  onInvalid         : function() {},\r\n  onSuccess         : function() { return true; },\r\n  onFailure         : function() { return false; },\r\n\r\n  metadata : {\r\n    defaultValue : 'default',\r\n    validate     : 'validate'\r\n  },\r\n\r\n  regExp: {\r\n    bracket : /\\[(.*)\\]/i,\r\n    decimal : /^\\d*(\\.)\\d+/,\r\n    email   : \"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\",\r\n    escape  : /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\r\n    flags   : /^\\/(.*)\\/(.*)?/,\r\n    integer : /^\\-?\\d+$/,\r\n    number  : /^\\-?\\d*(\\.\\d+)?$/,\r\n    url     : /(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/i\r\n  },\r\n\r\n  text: {\r\n    unspecifiedRule  : 'Please enter a valid value',\r\n    unspecifiedField : 'This field'\r\n  },\r\n\r\n  prompt: {\r\n    empty                : '{name} must have a value',\r\n    checked              : '{name} must be checked',\r\n    email                : '{name} must be a valid e-mail',\r\n    url                  : '{name} must be a valid url',\r\n    regExp               : '{name} is not formatted correctly',\r\n    integer              : '{name} must be an integer',\r\n    decimal              : '{name} must be a decimal number',\r\n    number               : '{name} must be set to a number',\r\n    is                   : '{name} must be \"{ruleValue}\"',\r\n    isExactly            : '{name} must be exactly \"{ruleValue}\"',\r\n    not                  : '{name} cannot be set to \"{ruleValue}\"',\r\n    notExactly           : '{name} cannot be set to exactly \"{ruleValue}\"',\r\n    contain              : '{name} cannot contain \"{ruleValue}\"',\r\n    containExactly       : '{name} cannot contain exactly \"{ruleValue}\"',\r\n    doesntContain        : '{name} must contain  \"{ruleValue}\"',\r\n    doesntContainExactly : '{name} must contain exactly \"{ruleValue}\"',\r\n    minLength            : '{name} must be at least {ruleValue} characters',\r\n    length               : '{name} must be at least {ruleValue} characters',\r\n    exactLength          : '{name} must be exactly {ruleValue} characters',\r\n    maxLength            : '{name} cannot be longer than {ruleValue} characters',\r\n    match                : '{name} must match {ruleValue} field',\r\n    different            : '{name} must have a different value than {ruleValue} field',\r\n    creditCard           : '{name} must be a valid credit card number',\r\n    minCount             : '{name} must have at least {ruleValue} choices',\r\n    exactCount           : '{name} must have exactly {ruleValue} choices',\r\n    maxCount             : '{name} must have {ruleValue} or less choices'\r\n  },\r\n\r\n  selector : {\r\n    checkbox   : 'input[type=\"checkbox\"], input[type=\"radio\"]',\r\n    clear      : '.clear',\r\n    field      : 'input, textarea, select',\r\n    group      : '.field',\r\n    input      : 'input',\r\n    message    : '.error.message',\r\n    prompt     : '.prompt.label',\r\n    radio      : 'input[type=\"radio\"]',\r\n    reset      : '.reset:not([type=\"reset\"])',\r\n    submit     : '.submit:not([type=\"submit\"])',\r\n    uiCheckbox : '.ui.checkbox',\r\n    uiDropdown : '.ui.dropdown'\r\n  },\r\n\r\n  className : {\r\n    error   : 'error',\r\n    label   : 'ui prompt label',\r\n    pressed : 'down',\r\n    success : 'success'\r\n  },\r\n\r\n  error: {\r\n    identifier : 'You must specify a string identifier for each field',\r\n    method     : 'The method you called is not defined.',\r\n    noRule     : 'There is no rule matching the one you specified',\r\n    oldSyntax  : 'Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.'\r\n  },\r\n\r\n  templates: {\r\n\r\n    // template that produces error message\r\n    error: function(errors) {\r\n      var\r\n        html = '<ul class=\"list\">'\r\n      ;\r\n      $.each(errors, function(index, value) {\r\n        html += '<li>' + value + '</li>';\r\n      });\r\n      html += '</ul>';\r\n      return $(html);\r\n    },\r\n\r\n    // template that produces label\r\n    prompt: function(errors) {\r\n      return $('<div/>')\r\n        .addClass('ui basic red pointing prompt label')\r\n        .html(errors[0])\r\n      ;\r\n    }\r\n  },\r\n\r\n  rules: {\r\n\r\n    // is not empty or blank string\r\n    empty: function(value) {\r\n      return !(value === undefined || '' === value || $.isArray(value) && value.length === 0);\r\n    },\r\n\r\n    // checkbox checked\r\n    checked: function() {\r\n      return ($(this).filter(':checked').length > 0);\r\n    },\r\n\r\n    // is most likely an email\r\n    email: function(value){\r\n      var\r\n        emailRegExp = new RegExp($.fn.form.settings.regExp.email, 'i')\r\n      ;\r\n      return emailRegExp.test(value);\r\n    },\r\n\r\n    // value is most likely url\r\n    url: function(value) {\r\n      return $.fn.form.settings.regExp.url.test(value);\r\n    },\r\n\r\n    // matches specified regExp\r\n    regExp: function(value, regExp) {\r\n      var\r\n        regExpParts = regExp.match($.fn.form.settings.regExp.flags),\r\n        flags\r\n      ;\r\n      // regular expression specified as /baz/gi (flags)\r\n      if(regExpParts) {\r\n        regExp = (regExpParts.length >= 2)\r\n          ? regExpParts[1]\r\n          : regExp\r\n        ;\r\n        flags = (regExpParts.length >= 3)\r\n          ? regExpParts[2]\r\n          : ''\r\n        ;\r\n      }\r\n      return value.match( new RegExp(regExp, flags) );\r\n    },\r\n\r\n    // is valid integer or matches range\r\n    integer: function(value, range) {\r\n      var\r\n        intRegExp = $.fn.form.settings.regExp.integer,\r\n        min,\r\n        max,\r\n        parts\r\n      ;\r\n      if( !range || ['', '..'].indexOf(range) !== -1) {\r\n        // do nothing\r\n      }\r\n      else if(range.indexOf('..') == -1) {\r\n        if(intRegExp.test(range)) {\r\n          min = max = range - 0;\r\n        }\r\n      }\r\n      else {\r\n        parts = range.split('..', 2);\r\n        if(intRegExp.test(parts[0])) {\r\n          min = parts[0] - 0;\r\n        }\r\n        if(intRegExp.test(parts[1])) {\r\n          max = parts[1] - 0;\r\n        }\r\n      }\r\n      return (\r\n        intRegExp.test(value) &&\r\n        (min === undefined || value >= min) &&\r\n        (max === undefined || value <= max)\r\n      );\r\n    },\r\n\r\n    // is valid number (with decimal)\r\n    decimal: function(value) {\r\n      return $.fn.form.settings.regExp.decimal.test(value);\r\n    },\r\n\r\n    // is valid number\r\n    number: function(value) {\r\n      return $.fn.form.settings.regExp.number.test(value);\r\n    },\r\n\r\n    // is value (case insensitive)\r\n    is: function(value, text) {\r\n      text = (typeof text == 'string')\r\n        ? text.toLowerCase()\r\n        : text\r\n      ;\r\n      value = (typeof value == 'string')\r\n        ? value.toLowerCase()\r\n        : value\r\n      ;\r\n      return (value == text);\r\n    },\r\n\r\n    // is value\r\n    isExactly: function(value, text) {\r\n      return (value == text);\r\n    },\r\n\r\n    // value is not another value (case insensitive)\r\n    not: function(value, notValue) {\r\n      value = (typeof value == 'string')\r\n        ? value.toLowerCase()\r\n        : value\r\n      ;\r\n      notValue = (typeof notValue == 'string')\r\n        ? notValue.toLowerCase()\r\n        : notValue\r\n      ;\r\n      return (value != notValue);\r\n    },\r\n\r\n    // value is not another value (case sensitive)\r\n    notExactly: function(value, notValue) {\r\n      return (value != notValue);\r\n    },\r\n\r\n    // value contains text (insensitive)\r\n    contains: function(value, text) {\r\n      // escape regex characters\r\n      text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\r\n      return (value.search( new RegExp(text, 'i') ) !== -1);\r\n    },\r\n\r\n    // value contains text (case sensitive)\r\n    containsExactly: function(value, text) {\r\n      // escape regex characters\r\n      text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\r\n      return (value.search( new RegExp(text) ) !== -1);\r\n    },\r\n\r\n    // value contains text (insensitive)\r\n    doesntContain: function(value, text) {\r\n      // escape regex characters\r\n      text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\r\n      return (value.search( new RegExp(text, 'i') ) === -1);\r\n    },\r\n\r\n    // value contains text (case sensitive)\r\n    doesntContainExactly: function(value, text) {\r\n      // escape regex characters\r\n      text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\r\n      return (value.search( new RegExp(text) ) === -1);\r\n    },\r\n\r\n    // is at least string length\r\n    minLength: function(value, requiredLength) {\r\n      return (value !== undefined)\r\n        ? (value.length >= requiredLength)\r\n        : false\r\n      ;\r\n    },\r\n\r\n    // see rls notes for 2.0.6 (this is a duplicate of minLength)\r\n    length: function(value, requiredLength) {\r\n      return (value !== undefined)\r\n        ? (value.length >= requiredLength)\r\n        : false\r\n      ;\r\n    },\r\n\r\n    // is exactly length\r\n    exactLength: function(value, requiredLength) {\r\n      return (value !== undefined)\r\n        ? (value.length == requiredLength)\r\n        : false\r\n      ;\r\n    },\r\n\r\n    // is less than length\r\n    maxLength: function(value, maxLength) {\r\n      return (value !== undefined)\r\n        ? (value.length <= maxLength)\r\n        : false\r\n      ;\r\n    },\r\n\r\n    // matches another field\r\n    match: function(value, identifier) {\r\n      var\r\n        $form = $(this),\r\n        matchingValue\r\n      ;\r\n      if( $('[data-validate=\"'+ identifier +'\"]').length > 0 ) {\r\n        matchingValue = $('[data-validate=\"'+ identifier +'\"]').val();\r\n      }\r\n      else if($('#' + identifier).length > 0) {\r\n        matchingValue = $('#' + identifier).val();\r\n      }\r\n      else if($('[name=\"' + identifier +'\"]').length > 0) {\r\n        matchingValue = $('[name=\"' + identifier + '\"]').val();\r\n      }\r\n      else if( $('[name=\"' + identifier +'[]\"]').length > 0 ) {\r\n        matchingValue = $('[name=\"' + identifier +'[]\"]');\r\n      }\r\n      return (matchingValue !== undefined)\r\n        ? ( value.toString() == matchingValue.toString() )\r\n        : false\r\n      ;\r\n    },\r\n\r\n    // different than another field\r\n    different: function(value, identifier) {\r\n      // use either id or name of field\r\n      var\r\n        $form = $(this),\r\n        matchingValue\r\n      ;\r\n      if( $('[data-validate=\"'+ identifier +'\"]').length > 0 ) {\r\n        matchingValue = $('[data-validate=\"'+ identifier +'\"]').val();\r\n      }\r\n      else if($('#' + identifier).length > 0) {\r\n        matchingValue = $('#' + identifier).val();\r\n      }\r\n      else if($('[name=\"' + identifier +'\"]').length > 0) {\r\n        matchingValue = $('[name=\"' + identifier + '\"]').val();\r\n      }\r\n      else if( $('[name=\"' + identifier +'[]\"]').length > 0 ) {\r\n        matchingValue = $('[name=\"' + identifier +'[]\"]');\r\n      }\r\n      return (matchingValue !== undefined)\r\n        ? ( value.toString() !== matchingValue.toString() )\r\n        : false\r\n      ;\r\n    },\r\n\r\n    creditCard: function(cardNumber, cardTypes) {\r\n      var\r\n        cards = {\r\n          visa: {\r\n            pattern : /^4/,\r\n            length  : [16]\r\n          },\r\n          amex: {\r\n            pattern : /^3[47]/,\r\n            length  : [15]\r\n          },\r\n          mastercard: {\r\n            pattern : /^5[1-5]/,\r\n            length  : [16]\r\n          },\r\n          discover: {\r\n            pattern : /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,\r\n            length  : [16]\r\n          },\r\n          unionPay: {\r\n            pattern : /^(62|88)/,\r\n            length  : [16, 17, 18, 19]\r\n          },\r\n          jcb: {\r\n            pattern : /^35(2[89]|[3-8][0-9])/,\r\n            length  : [16]\r\n          },\r\n          maestro: {\r\n            pattern : /^(5018|5020|5038|6304|6759|676[1-3])/,\r\n            length  : [12, 13, 14, 15, 16, 17, 18, 19]\r\n          },\r\n          dinersClub: {\r\n            pattern : /^(30[0-5]|^36)/,\r\n            length  : [14]\r\n          },\r\n          laser: {\r\n            pattern : /^(6304|670[69]|6771)/,\r\n            length  : [16, 17, 18, 19]\r\n          },\r\n          visaElectron: {\r\n            pattern : /^(4026|417500|4508|4844|491(3|7))/,\r\n            length  : [16]\r\n          }\r\n        },\r\n        valid         = {},\r\n        validCard     = false,\r\n        requiredTypes = (typeof cardTypes == 'string')\r\n          ? cardTypes.split(',')\r\n          : false,\r\n        unionPay,\r\n        validation\r\n      ;\r\n\r\n      if(typeof cardNumber !== 'string' || cardNumber.length === 0) {\r\n        return;\r\n      }\r\n\r\n      // verify card types\r\n      if(requiredTypes) {\r\n        $.each(requiredTypes, function(index, type){\r\n          // verify each card type\r\n          validation = cards[type];\r\n          if(validation) {\r\n            valid = {\r\n              length  : ($.inArray(cardNumber.length, validation.length) !== -1),\r\n              pattern : (cardNumber.search(validation.pattern) !== -1)\r\n            };\r\n            if(valid.length && valid.pattern) {\r\n              validCard = true;\r\n            }\r\n          }\r\n        });\r\n\r\n        if(!validCard) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // skip luhn for UnionPay\r\n      unionPay = {\r\n        number  : ($.inArray(cardNumber.length, cards.unionPay.length) !== -1),\r\n        pattern : (cardNumber.search(cards.unionPay.pattern) !== -1)\r\n      };\r\n      if(unionPay.number && unionPay.pattern) {\r\n        return true;\r\n      }\r\n\r\n      // verify luhn, adapted from  <https://gist.github.com/2134376>\r\n      var\r\n        length        = cardNumber.length,\r\n        multiple      = 0,\r\n        producedValue = [\r\n          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n          [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]\r\n        ],\r\n        sum           = 0\r\n      ;\r\n      while (length--) {\r\n        sum += producedValue[multiple][parseInt(cardNumber.charAt(length), 10)];\r\n        multiple ^= 1;\r\n      }\r\n      return (sum % 10 === 0 && sum > 0);\r\n    },\r\n\r\n    minCount: function(value, minCount) {\r\n      if(minCount == 0) {\r\n        return true;\r\n      }\r\n      if(minCount == 1) {\r\n        return (value !== '');\r\n      }\r\n      return (value.split(',').length >= minCount);\r\n    },\r\n\r\n    exactCount: function(value, exactCount) {\r\n      if(exactCount == 0) {\r\n        return (value === '');\r\n      }\r\n      if(exactCount == 1) {\r\n        return (value !== '' && value.search(',') === -1);\r\n      }\r\n      return (value.split(',').length == exactCount);\r\n    },\r\n\r\n    maxCount: function(value, maxCount) {\r\n      if(maxCount == 0) {\r\n        return false;\r\n      }\r\n      if(maxCount == 1) {\r\n        return (value.search(',') === -1);\r\n      }\r\n      return (value.split(',').length <= maxCount);\r\n    }\r\n  }\r\n\r\n};\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Accordion\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ($, window, document, undefined) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.accordion = function(parameters) {\r\n  var\r\n    $allModules     = $(this),\r\n\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n\r\n    requestAnimationFrame = window.requestAnimationFrame\r\n      || window.mozRequestAnimationFrame\r\n      || window.webkitRequestAnimationFrame\r\n      || window.msRequestAnimationFrame\r\n      || function(callback) { setTimeout(callback, 0); },\r\n\r\n    returnedValue\r\n  ;\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings        = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.accordion.settings, parameters)\r\n          : $.extend({}, $.fn.accordion.settings),\r\n\r\n        className       = settings.className,\r\n        namespace       = settings.namespace,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n        moduleSelector  = $allModules.selector || '',\r\n\r\n        $module  = $(this),\r\n        $title   = $module.find(selector.title),\r\n        $content = $module.find(selector.content),\r\n\r\n        element  = this,\r\n        instance = $module.data(moduleNamespace),\r\n        observer,\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.debug('Initializing', $module);\r\n          module.bind.events();\r\n          if(settings.observeChanges) {\r\n            module.observeChanges();\r\n          }\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.debug('Destroying previous instance', $module);\r\n          $module\r\n            .off(eventNamespace)\r\n            .removeData(moduleNamespace)\r\n          ;\r\n        },\r\n\r\n        refresh: function() {\r\n          $title   = $module.find(selector.title);\r\n          $content = $module.find(selector.content);\r\n        },\r\n\r\n        observeChanges: function() {\r\n          if('MutationObserver' in window) {\r\n            observer = new MutationObserver(function(mutations) {\r\n              module.debug('DOM tree modified, updating selector cache');\r\n              module.refresh();\r\n            });\r\n            observer.observe(element, {\r\n              childList : true,\r\n              subtree   : true\r\n            });\r\n            module.debug('Setting up mutation observer', observer);\r\n          }\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            module.debug('Binding delegated events');\r\n            $module\r\n              .on(settings.on + eventNamespace, selector.trigger, module.event.click)\r\n            ;\r\n          }\r\n        },\r\n\r\n        event: {\r\n          click: function() {\r\n            module.toggle.call(this);\r\n          }\r\n        },\r\n\r\n        toggle: function(query) {\r\n          var\r\n            $activeTitle = (query !== undefined)\r\n              ? (typeof query === 'number')\r\n                ? $title.eq(query)\r\n                : $(query).closest(selector.title)\r\n              : $(this).closest(selector.title),\r\n            $activeContent = $activeTitle.next($content),\r\n            isAnimating = $activeContent.hasClass(className.animating),\r\n            isActive    = $activeContent.hasClass(className.active),\r\n            isOpen      = (isActive && !isAnimating),\r\n            isOpening   = (!isActive && isAnimating)\r\n          ;\r\n          module.debug('Toggling visibility of content', $activeTitle);\r\n          if(isOpen || isOpening) {\r\n            if(settings.collapsible) {\r\n              module.close.call($activeTitle);\r\n            }\r\n            else {\r\n              module.debug('Cannot close accordion content collapsing is disabled');\r\n            }\r\n          }\r\n          else {\r\n            module.open.call($activeTitle);\r\n          }\r\n        },\r\n\r\n        open: function(query) {\r\n          var\r\n            $activeTitle = (query !== undefined)\r\n              ? (typeof query === 'number')\r\n                ? $title.eq(query)\r\n                : $(query).closest(selector.title)\r\n              : $(this).closest(selector.title),\r\n            $activeContent = $activeTitle.next($content),\r\n            isAnimating = $activeContent.hasClass(className.animating),\r\n            isActive    = $activeContent.hasClass(className.active),\r\n            isOpen      = (isActive || isAnimating)\r\n          ;\r\n          if(isOpen) {\r\n            module.debug('Accordion already open, skipping', $activeContent);\r\n            return;\r\n          }\r\n          module.debug('Opening accordion content', $activeTitle);\r\n          settings.onOpening.call($activeContent);\r\n          if(settings.exclusive) {\r\n            module.closeOthers.call($activeTitle);\r\n          }\r\n          $activeTitle\r\n            .addClass(className.active)\r\n          ;\r\n          $activeContent\r\n            .stop(true, true)\r\n            .addClass(className.animating)\r\n          ;\r\n          if(settings.animateChildren) {\r\n            if($.fn.transition !== undefined && $module.transition('is supported')) {\r\n              $activeContent\r\n                .children()\r\n                  .transition({\r\n                    animation   : 'fade in',\r\n                    queue       : false,\r\n                    useFailSafe : true,\r\n                    debug       : settings.debug,\r\n                    verbose     : settings.verbose,\r\n                    duration    : settings.duration\r\n                  })\r\n              ;\r\n            }\r\n            else {\r\n              $activeContent\r\n                .children()\r\n                  .stop(true, true)\r\n                  .animate({\r\n                    opacity: 1\r\n                  }, settings.duration, module.resetOpacity)\r\n              ;\r\n            }\r\n          }\r\n          $activeContent\r\n            .slideDown(settings.duration, settings.easing, function() {\r\n              $activeContent\r\n                .removeClass(className.animating)\r\n                .addClass(className.active)\r\n              ;\r\n              module.reset.display.call(this);\r\n              settings.onOpen.call(this);\r\n              settings.onChange.call(this);\r\n            })\r\n          ;\r\n        },\r\n\r\n        close: function(query) {\r\n          var\r\n            $activeTitle = (query !== undefined)\r\n              ? (typeof query === 'number')\r\n                ? $title.eq(query)\r\n                : $(query).closest(selector.title)\r\n              : $(this).closest(selector.title),\r\n            $activeContent = $activeTitle.next($content),\r\n            isAnimating    = $activeContent.hasClass(className.animating),\r\n            isActive       = $activeContent.hasClass(className.active),\r\n            isOpening      = (!isActive && isAnimating),\r\n            isClosing      = (isActive && isAnimating)\r\n          ;\r\n          if((isActive || isOpening) && !isClosing) {\r\n            module.debug('Closing accordion content', $activeContent);\r\n            settings.onClosing.call($activeContent);\r\n            $activeTitle\r\n              .removeClass(className.active)\r\n            ;\r\n            $activeContent\r\n              .stop(true, true)\r\n              .addClass(className.animating)\r\n            ;\r\n            if(settings.animateChildren) {\r\n              if($.fn.transition !== undefined && $module.transition('is supported')) {\r\n                $activeContent\r\n                  .children()\r\n                    .transition({\r\n                      animation   : 'fade out',\r\n                      queue       : false,\r\n                      useFailSafe : true,\r\n                      debug       : settings.debug,\r\n                      verbose     : settings.verbose,\r\n                      duration    : settings.duration\r\n                    })\r\n                ;\r\n              }\r\n              else {\r\n                $activeContent\r\n                  .children()\r\n                    .stop(true, true)\r\n                    .animate({\r\n                      opacity: 0\r\n                    }, settings.duration, module.resetOpacity)\r\n                ;\r\n              }\r\n            }\r\n            $activeContent\r\n              .slideUp(settings.duration, settings.easing, function() {\r\n                $activeContent\r\n                  .removeClass(className.animating)\r\n                  .removeClass(className.active)\r\n                ;\r\n                module.reset.display.call(this);\r\n                settings.onClose.call(this);\r\n                settings.onChange.call(this);\r\n              })\r\n            ;\r\n          }\r\n        },\r\n\r\n        closeOthers: function(index) {\r\n          var\r\n            $activeTitle = (index !== undefined)\r\n              ? $title.eq(index)\r\n              : $(this).closest(selector.title),\r\n            $parentTitles    = $activeTitle.parents(selector.content).prev(selector.title),\r\n            $activeAccordion = $activeTitle.closest(selector.accordion),\r\n            activeSelector   = selector.title + '.' + className.active + ':visible',\r\n            activeContent    = selector.content + '.' + className.active + ':visible',\r\n            $openTitles,\r\n            $nestedTitles,\r\n            $openContents\r\n          ;\r\n          if(settings.closeNested) {\r\n            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);\r\n            $openContents = $openTitles.next($content);\r\n          }\r\n          else {\r\n            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);\r\n            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);\r\n            $openTitles   = $openTitles.not($nestedTitles);\r\n            $openContents = $openTitles.next($content);\r\n          }\r\n          if( ($openTitles.length > 0) ) {\r\n            module.debug('Exclusive enabled, closing other content', $openTitles);\r\n            $openTitles\r\n              .removeClass(className.active)\r\n            ;\r\n            $openContents\r\n              .removeClass(className.animating)\r\n              .stop(true, true)\r\n            ;\r\n            if(settings.animateChildren) {\r\n              if($.fn.transition !== undefined && $module.transition('is supported')) {\r\n                $openContents\r\n                  .children()\r\n                    .transition({\r\n                      animation   : 'fade out',\r\n                      useFailSafe : true,\r\n                      debug       : settings.debug,\r\n                      verbose     : settings.verbose,\r\n                      duration    : settings.duration\r\n                    })\r\n                ;\r\n              }\r\n              else {\r\n                $openContents\r\n                  .children()\r\n                    .stop(true, true)\r\n                    .animate({\r\n                      opacity: 0\r\n                    }, settings.duration, module.resetOpacity)\r\n                ;\r\n              }\r\n            }\r\n            $openContents\r\n              .slideUp(settings.duration , settings.easing, function() {\r\n                $(this).removeClass(className.active);\r\n                module.reset.display.call(this);\r\n              })\r\n            ;\r\n          }\r\n        },\r\n\r\n        reset: {\r\n\r\n          display: function() {\r\n            module.verbose('Removing inline display from element', this);\r\n            $(this).css('display', '');\r\n            if( $(this).attr('style') === '') {\r\n              $(this)\r\n                .attr('style', '')\r\n                .removeAttr('style')\r\n              ;\r\n            }\r\n          },\r\n\r\n          opacity: function() {\r\n            module.verbose('Removing inline opacity from element', this);\r\n            $(this).css('opacity', '');\r\n            if( $(this).attr('style') === '') {\r\n              $(this)\r\n                .attr('style', '')\r\n                .removeAttr('style')\r\n              ;\r\n            }\r\n          },\r\n\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          module.debug('Changing internal', name, value);\r\n          if(value !== undefined) {\r\n            if( $.isPlainObject(name) ) {\r\n              $.extend(true, module, name);\r\n            }\r\n            else {\r\n              module[name] = value;\r\n            }\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.accordion.settings = {\r\n\r\n  name            : 'Accordion',\r\n  namespace       : 'accordion',\r\n\r\n  debug           : false,\r\n  verbose         : false,\r\n  performance     : true,\r\n\r\n  on              : 'click', // event on title that opens accordion\r\n\r\n  observeChanges  : true,  // whether accordion should automatically refresh on DOM insertion\r\n\r\n  exclusive       : true,  // whether a single accordion content panel should be open at once\r\n  collapsible     : true,  // whether accordion content can be closed\r\n  closeNested     : false, // whether nested content should be closed when a panel is closed\r\n  animateChildren : true,  // whether children opacity should be animated\r\n\r\n  duration        : 350, // duration of animation\r\n  easing          : 'easeOutQuad', // easing equation for animation\r\n\r\n\r\n  onOpening       : function(){}, // callback before open animation\r\n  onOpen          : function(){}, // callback after open animation\r\n  onClosing       : function(){}, // callback before closing animation\r\n  onClose         : function(){}, // callback after closing animation\r\n  onChange        : function(){}, // callback after closing or opening animation\r\n\r\n  error: {\r\n    method : 'The method you called is not defined'\r\n  },\r\n\r\n  className   : {\r\n    active    : 'active',\r\n    animating : 'animating'\r\n  },\r\n\r\n  selector    : {\r\n    accordion : '.accordion',\r\n    title     : '.title',\r\n    trigger   : '.title',\r\n    content   : '.content'\r\n  }\r\n\r\n};\r\n\r\n// Adds easing\r\n$.extend( $.easing, {\r\n  easeOutQuad: function (x, t, b, c, d) {\r\n    return -c *(t/=d)*(t-2) + b;\r\n  }\r\n});\r\n\r\n})( jQuery, window, document );\r\n\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Checkbox\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.checkbox = function(parameters) {\r\n  var\r\n    $allModules    = $(this),\r\n    moduleSelector = $allModules.selector || '',\r\n\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings        = $.extend(true, {}, $.fn.checkbox.settings, parameters),\r\n\r\n        className       = settings.className,\r\n        namespace       = settings.namespace,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        $module         = $(this),\r\n        $label          = $(this).children(selector.label),\r\n        $input          = $(this).children(selector.input),\r\n        input           = $input[0],\r\n\r\n        initialLoad     = false,\r\n        shortcutPressed = false,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        observer,\r\n        element         = this,\r\n        module\r\n      ;\r\n\r\n      module      = {\r\n\r\n        initialize: function() {\r\n          module.verbose('Initializing checkbox', settings);\r\n\r\n          module.create.label();\r\n          module.bind.events();\r\n\r\n          module.set.tabbable();\r\n          module.hide.input();\r\n\r\n          module.observeChanges();\r\n          module.instantiate();\r\n          module.setup();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying module');\r\n          module.unbind.events();\r\n          module.show.input();\r\n          $module.removeData(moduleNamespace);\r\n        },\r\n\r\n        fix: {\r\n          reference: function() {\r\n            if( $module.is(selector.input) ) {\r\n              module.debug('Behavior called on <input> adjusting invoked element');\r\n              $module = $module.closest(selector.checkbox);\r\n              module.refresh();\r\n            }\r\n          }\r\n        },\r\n\r\n        setup: function() {\r\n          module.set.initialLoad();\r\n          if( module.is.indeterminate() ) {\r\n            module.debug('Initial value is indeterminate');\r\n            module.indeterminate();\r\n          }\r\n          else if( module.is.checked() ) {\r\n            module.debug('Initial value is checked');\r\n            module.check();\r\n          }\r\n          else {\r\n            module.debug('Initial value is unchecked');\r\n            module.uncheck();\r\n          }\r\n          module.remove.initialLoad();\r\n        },\r\n\r\n        refresh: function() {\r\n          $label = $module.children(selector.label);\r\n          $input = $module.children(selector.input);\r\n          input  = $input[0];\r\n        },\r\n\r\n        hide: {\r\n          input: function() {\r\n            module.verbose('Modfying <input> z-index to be unselectable');\r\n            $input.addClass(className.hidden);\r\n          }\r\n        },\r\n        show: {\r\n          input: function() {\r\n            module.verbose('Modfying <input> z-index to be selectable');\r\n            $input.removeClass(className.hidden);\r\n          }\r\n        },\r\n\r\n        observeChanges: function() {\r\n          if('MutationObserver' in window) {\r\n            observer = new MutationObserver(function(mutations) {\r\n              module.debug('DOM tree modified, updating selector cache');\r\n              module.refresh();\r\n            });\r\n            observer.observe(element, {\r\n              childList : true,\r\n              subtree   : true\r\n            });\r\n            module.debug('Setting up mutation observer', observer);\r\n          }\r\n        },\r\n\r\n        attachEvents: function(selector, event) {\r\n          var\r\n            $element = $(selector)\r\n          ;\r\n          event = $.isFunction(module[event])\r\n            ? module[event]\r\n            : module.toggle\r\n          ;\r\n          if($element.length > 0) {\r\n            module.debug('Attaching checkbox events to element', selector, event);\r\n            $element\r\n              .on('click' + eventNamespace, event)\r\n            ;\r\n          }\r\n          else {\r\n            module.error(error.notFound);\r\n          }\r\n        },\r\n\r\n        event: {\r\n          click: function(event) {\r\n            var\r\n              $target = $(event.target)\r\n            ;\r\n            if( $target.is(selector.input) ) {\r\n              module.verbose('Using default check action on initialized checkbox');\r\n              return;\r\n            }\r\n            if( $target.is(selector.link) ) {\r\n              module.debug('Clicking link inside checkbox, skipping toggle');\r\n              return;\r\n            }\r\n            module.toggle();\r\n            $input.focus();\r\n            event.preventDefault();\r\n          },\r\n          keydown: function(event) {\r\n            var\r\n              key     = event.which,\r\n              keyCode = {\r\n                enter  : 13,\r\n                space  : 32,\r\n                escape : 27\r\n              }\r\n            ;\r\n            if(key == keyCode.escape) {\r\n              module.verbose('Escape key pressed blurring field');\r\n              $input.blur();\r\n              shortcutPressed = true;\r\n            }\r\n            else if(!event.ctrlKey && ( key == keyCode.space || key == keyCode.enter) ) {\r\n              module.verbose('Enter/space key pressed, toggling checkbox');\r\n              module.toggle();\r\n              shortcutPressed = true;\r\n            }\r\n            else {\r\n              shortcutPressed = false;\r\n            }\r\n          },\r\n          keyup: function(event) {\r\n            if(shortcutPressed) {\r\n              event.preventDefault();\r\n            }\r\n          }\r\n        },\r\n\r\n        check: function() {\r\n          if( !module.should.allowCheck() ) {\r\n            return;\r\n          }\r\n          module.debug('Checking checkbox', $input);\r\n          module.set.checked();\r\n          if( !module.should.ignoreCallbacks() ) {\r\n            settings.onChecked.call(input);\r\n            settings.onChange.call(input);\r\n          }\r\n        },\r\n\r\n        uncheck: function() {\r\n          if( !module.should.allowUncheck() ) {\r\n            return;\r\n          }\r\n          module.debug('Unchecking checkbox');\r\n          module.set.unchecked();\r\n          if( !module.should.ignoreCallbacks() ) {\r\n            settings.onUnchecked.call(input);\r\n            settings.onChange.call(input);\r\n          }\r\n        },\r\n\r\n        indeterminate: function() {\r\n          if( module.should.allowIndeterminate() ) {\r\n            module.debug('Checkbox is already indeterminate');\r\n            return;\r\n          }\r\n          module.debug('Making checkbox indeterminate');\r\n          module.set.indeterminate();\r\n          if( !module.should.ignoreCallbacks() ) {\r\n            settings.onIndeterminate.call(input);\r\n            settings.onChange.call(input);\r\n          }\r\n        },\r\n\r\n        determinate: function() {\r\n          if( module.should.allowDeterminate() ) {\r\n            module.debug('Checkbox is already determinate');\r\n            return;\r\n          }\r\n          module.debug('Making checkbox determinate');\r\n          module.set.determinate();\r\n          if( !module.should.ignoreCallbacks() ) {\r\n            settings.onDeterminate.call(input);\r\n            settings.onChange.call(input);\r\n          }\r\n        },\r\n\r\n        enable: function() {\r\n          if( module.is.enabled() ) {\r\n            module.debug('Checkbox is already enabled');\r\n            return;\r\n          }\r\n          module.debug('Enabling checkbox');\r\n          module.set.enabled();\r\n          settings.onEnabled.call(input);\r\n        },\r\n\r\n        disable: function() {\r\n          if( module.is.disabled() ) {\r\n            module.debug('Checkbox is already disabled');\r\n            return;\r\n          }\r\n          module.debug('Disabling checkbox');\r\n          module.set.disabled();\r\n          settings.onDisabled.call(input);\r\n        },\r\n\r\n        get: {\r\n          radios: function() {\r\n            var\r\n              name = module.get.name()\r\n            ;\r\n            return $('input[name=\"' + name + '\"]').closest(selector.checkbox);\r\n          },\r\n          otherRadios: function() {\r\n            return module.get.radios().not($module);\r\n          },\r\n          name: function() {\r\n            return $input.attr('name');\r\n          }\r\n        },\r\n\r\n        is: {\r\n          initialLoad: function() {\r\n            return initialLoad;\r\n          },\r\n          radio: function() {\r\n            return ($input.hasClass(className.radio) || $input.attr('type') == 'radio');\r\n          },\r\n          indeterminate: function() {\r\n            return $input.prop('indeterminate') !== undefined && $input.prop('indeterminate');\r\n          },\r\n          checked: function() {\r\n            return $input.prop('checked') !== undefined && $input.prop('checked');\r\n          },\r\n          disabled: function() {\r\n            return $input.prop('disabled') !== undefined && $input.prop('disabled');\r\n          },\r\n          enabled: function() {\r\n            return !module.is.disabled();\r\n          },\r\n          determinate: function() {\r\n            return !module.is.indeterminate();\r\n          },\r\n          unchecked: function() {\r\n            return !module.is.checked();\r\n          }\r\n        },\r\n\r\n        should: {\r\n          allowCheck: function() {\r\n            if(module.is.determinate() && module.is.checked() && !module.should.forceCallbacks() ) {\r\n              module.debug('Should not allow check, checkbox is already checked');\r\n              return false;\r\n            }\r\n            if(settings.beforeChecked.apply(input) === false) {\r\n              module.debug('Should not allow check, beforeChecked cancelled');\r\n              return false;\r\n            }\r\n            return true;\r\n          },\r\n          allowUncheck: function() {\r\n            if(module.is.determinate() && module.is.unchecked() && !module.should.forceCallbacks() ) {\r\n              module.debug('Should not allow uncheck, checkbox is already unchecked');\r\n              return false;\r\n            }\r\n            if(settings.beforeUnchecked.apply(input) === false) {\r\n              module.debug('Should not allow uncheck, beforeUnchecked cancelled');\r\n              return false;\r\n            }\r\n            return true;\r\n          },\r\n          allowIndeterminate: function() {\r\n            if(module.is.indeterminate() && !module.should.forceCallbacks() ) {\r\n              module.debug('Should not allow indeterminate, checkbox is already indeterminate');\r\n              return false;\r\n            }\r\n            if(settings.beforeIndeterminate.apply(input) === false) {\r\n              module.debug('Should not allow indeterminate, beforeIndeterminate cancelled');\r\n              return false;\r\n            }\r\n            return true;\r\n          },\r\n          allowDeterminate: function() {\r\n            if(module.is.determinate() && !module.should.forceCallbacks() ) {\r\n              module.debug('Should not allow determinate, checkbox is already determinate');\r\n              return false;\r\n            }\r\n            if(settings.beforeDeterminate.apply(input) === false) {\r\n              module.debug('Should not allow determinate, beforeDeterminate cancelled');\r\n              return false;\r\n            }\r\n            return true;\r\n          },\r\n          forceCallbacks: function() {\r\n            return (module.is.initialLoad() && settings.fireOnInit);\r\n          },\r\n          ignoreCallbacks: function() {\r\n            return (initialLoad && !settings.fireOnInit);\r\n          }\r\n        },\r\n\r\n        can: {\r\n          change: function() {\r\n            return !( $module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') || $input.prop('readonly') );\r\n          },\r\n          uncheck: function() {\r\n            return (typeof settings.uncheckable === 'boolean')\r\n              ? settings.uncheckable\r\n              : !module.is.radio()\r\n            ;\r\n          }\r\n        },\r\n\r\n        set: {\r\n          initialLoad: function() {\r\n            initialLoad = true;\r\n          },\r\n          checked: function() {\r\n            module.verbose('Setting class to checked');\r\n            $module\r\n              .removeClass(className.indeterminate)\r\n              .addClass(className.checked)\r\n            ;\r\n            if( module.is.radio() ) {\r\n              module.uncheckOthers();\r\n            }\r\n            if(!module.is.indeterminate() && module.is.checked()) {\r\n              module.debug('Input is already checked, skipping input property change');\r\n              return;\r\n            }\r\n            module.verbose('Setting state to checked', input);\r\n            $input\r\n              .prop('indeterminate', false)\r\n              .prop('checked', true)\r\n            ;\r\n            module.trigger.change();\r\n          },\r\n          unchecked: function() {\r\n            module.verbose('Removing checked class');\r\n            $module\r\n              .removeClass(className.indeterminate)\r\n              .removeClass(className.checked)\r\n            ;\r\n            if(!module.is.indeterminate() &&  module.is.unchecked() ) {\r\n              module.debug('Input is already unchecked');\r\n              return;\r\n            }\r\n            module.debug('Setting state to unchecked');\r\n            $input\r\n              .prop('indeterminate', false)\r\n              .prop('checked', false)\r\n            ;\r\n            module.trigger.change();\r\n          },\r\n          indeterminate: function() {\r\n            module.verbose('Setting class to indeterminate');\r\n            $module\r\n              .addClass(className.indeterminate)\r\n            ;\r\n            if( module.is.indeterminate() ) {\r\n              module.debug('Input is already indeterminate, skipping input property change');\r\n              return;\r\n            }\r\n            module.debug('Setting state to indeterminate');\r\n            $input\r\n              .prop('indeterminate', true)\r\n            ;\r\n            module.trigger.change();\r\n          },\r\n          determinate: function() {\r\n            module.verbose('Removing indeterminate class');\r\n            $module\r\n              .removeClass(className.indeterminate)\r\n            ;\r\n            if( module.is.determinate() ) {\r\n              module.debug('Input is already determinate, skipping input property change');\r\n              return;\r\n            }\r\n            module.debug('Setting state to determinate');\r\n            $input\r\n              .prop('indeterminate', false)\r\n            ;\r\n          },\r\n          disabled: function() {\r\n            module.verbose('Setting class to disabled');\r\n            $module\r\n              .addClass(className.disabled)\r\n            ;\r\n            if( module.is.disabled() ) {\r\n              module.debug('Input is already disabled, skipping input property change');\r\n              return;\r\n            }\r\n            module.debug('Setting state to disabled');\r\n            $input\r\n              .prop('disabled', 'disabled')\r\n            ;\r\n            module.trigger.change();\r\n          },\r\n          enabled: function() {\r\n            module.verbose('Removing disabled class');\r\n            $module.removeClass(className.disabled);\r\n            if( module.is.enabled() ) {\r\n              module.debug('Input is already enabled, skipping input property change');\r\n              return;\r\n            }\r\n            module.debug('Setting state to enabled');\r\n            $input\r\n              .prop('disabled', false)\r\n            ;\r\n            module.trigger.change();\r\n          },\r\n          tabbable: function() {\r\n            module.verbose('Adding tabindex to checkbox');\r\n            if( $input.attr('tabindex') === undefined) {\r\n              $input.attr('tabindex', 0);\r\n            }\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          initialLoad: function() {\r\n            initialLoad = false;\r\n          }\r\n        },\r\n\r\n        trigger: {\r\n          change: function() {\r\n            var\r\n              events       = document.createEvent('HTMLEvents'),\r\n              inputElement = $input[0]\r\n            ;\r\n            if(inputElement) {\r\n              module.verbose('Triggering native change event');\r\n              events.initEvent('change', true, false);\r\n              inputElement.dispatchEvent(events);\r\n            }\r\n          }\r\n        },\r\n\r\n\r\n        create: {\r\n          label: function() {\r\n            if($input.prevAll(selector.label).length > 0) {\r\n              $input.prev(selector.label).detach().insertAfter($input);\r\n              module.debug('Moving existing label', $label);\r\n            }\r\n            else if( !module.has.label() ) {\r\n              $label = $('<label>').insertAfter($input);\r\n              module.debug('Creating label', $label);\r\n            }\r\n          }\r\n        },\r\n\r\n        has: {\r\n          label: function() {\r\n            return ($label.length > 0);\r\n          }\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            module.verbose('Attaching checkbox events');\r\n            $module\r\n              .on('click'   + eventNamespace, module.event.click)\r\n              .on('keydown' + eventNamespace, selector.input, module.event.keydown)\r\n              .on('keyup'   + eventNamespace, selector.input, module.event.keyup)\r\n            ;\r\n          }\r\n        },\r\n\r\n        unbind: {\r\n          events: function() {\r\n            module.debug('Removing events');\r\n            $module\r\n              .off(eventNamespace)\r\n            ;\r\n          }\r\n        },\r\n\r\n        uncheckOthers: function() {\r\n          var\r\n            $radios = module.get.otherRadios()\r\n          ;\r\n          module.debug('Unchecking other radios', $radios);\r\n          $radios.removeClass(className.checked);\r\n        },\r\n\r\n        toggle: function() {\r\n          if( !module.can.change() ) {\r\n            if(!module.is.radio()) {\r\n              module.debug('Checkbox is read-only or disabled, ignoring toggle');\r\n            }\r\n            return;\r\n          }\r\n          if( module.is.indeterminate() || module.is.unchecked() ) {\r\n            module.debug('Currently unchecked');\r\n            module.check();\r\n          }\r\n          else if( module.is.checked() && module.can.uncheck() ) {\r\n            module.debug('Currently checked');\r\n            module.uncheck();\r\n          }\r\n        },\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.checkbox.settings = {\r\n\r\n  name                : 'Checkbox',\r\n  namespace           : 'checkbox',\r\n\r\n  debug               : false,\r\n  verbose             : true,\r\n  performance         : true,\r\n\r\n  // delegated event context\r\n  uncheckable         : 'auto',\r\n  fireOnInit          : false,\r\n\r\n  onChange            : function(){},\r\n\r\n  beforeChecked       : function(){},\r\n  beforeUnchecked     : function(){},\r\n  beforeDeterminate   : function(){},\r\n  beforeIndeterminate : function(){},\r\n\r\n  onChecked           : function(){},\r\n  onUnchecked         : function(){},\r\n\r\n  onDeterminate       : function() {},\r\n  onIndeterminate     : function() {},\r\n\r\n  onEnable            : function(){},\r\n  onDisable           : function(){},\r\n\r\n  className       : {\r\n    checked       : 'checked',\r\n    indeterminate : 'indeterminate',\r\n    disabled      : 'disabled',\r\n    hidden        : 'hidden',\r\n    radio         : 'radio',\r\n    readOnly      : 'read-only'\r\n  },\r\n\r\n  error     : {\r\n    method       : 'The method you called is not defined'\r\n  },\r\n\r\n  selector : {\r\n    checkbox : '.ui.checkbox',\r\n    label    : 'label, .box',\r\n    input    : 'input[type=\"checkbox\"], input[type=\"radio\"]',\r\n    link     : 'a[href]'\r\n  }\r\n\r\n};\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Dimmer\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.dimmer = function(parameters) {\r\n  var\r\n    $allModules     = $(this),\r\n\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings        = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.dimmer.settings, parameters)\r\n          : $.extend({}, $.fn.dimmer.settings),\r\n\r\n        selector        = settings.selector,\r\n        namespace       = settings.namespace,\r\n        className       = settings.className,\r\n        error           = settings.error,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n        moduleSelector  = $allModules.selector || '',\r\n\r\n        clickEvent      = ('ontouchstart' in document.documentElement)\r\n          ? 'touchstart'\r\n          : 'click',\r\n\r\n        $module = $(this),\r\n        $dimmer,\r\n        $dimmable,\r\n\r\n        element   = this,\r\n        instance  = $module.data(moduleNamespace),\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        preinitialize: function() {\r\n          if( module.is.dimmer() ) {\r\n\r\n            $dimmable = $module.parent();\r\n            $dimmer   = $module;\r\n          }\r\n          else {\r\n            $dimmable = $module;\r\n            if( module.has.dimmer() ) {\r\n              if(settings.dimmerName) {\r\n                $dimmer = $dimmable.find(selector.dimmer).filter('.' + settings.dimmerName);\r\n              }\r\n              else {\r\n                $dimmer = $dimmable.find(selector.dimmer);\r\n              }\r\n            }\r\n            else {\r\n              $dimmer = module.create();\r\n            }\r\n          }\r\n        },\r\n\r\n        initialize: function() {\r\n          module.debug('Initializing dimmer', settings);\r\n\r\n          module.bind.events();\r\n          module.set.dimmable();\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, instance)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous module', $dimmer);\r\n          module.unbind.events();\r\n          module.remove.variation();\r\n          $dimmable\r\n            .off(eventNamespace)\r\n          ;\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            if(settings.on == 'hover') {\r\n              $dimmable\r\n                .on('mouseenter' + eventNamespace, module.show)\r\n                .on('mouseleave' + eventNamespace, module.hide)\r\n              ;\r\n            }\r\n            else if(settings.on == 'click') {\r\n              $dimmable\r\n                .on(clickEvent + eventNamespace, module.toggle)\r\n              ;\r\n            }\r\n            if( module.is.page() ) {\r\n              module.debug('Setting as a page dimmer', $dimmable);\r\n              module.set.pageDimmer();\r\n            }\r\n\r\n            if( module.is.closable() ) {\r\n              module.verbose('Adding dimmer close event', $dimmer);\r\n              $dimmable\r\n                .on(clickEvent + eventNamespace, selector.dimmer, module.event.click)\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        unbind: {\r\n          events: function() {\r\n            $module\r\n              .removeData(moduleNamespace)\r\n            ;\r\n          }\r\n        },\r\n\r\n        event: {\r\n          click: function(event) {\r\n            module.verbose('Determining if event occured on dimmer', event);\r\n            if( $dimmer.find(event.target).length === 0 || $(event.target).is(selector.content) ) {\r\n              module.hide();\r\n              event.stopImmediatePropagation();\r\n            }\r\n          }\r\n        },\r\n\r\n        addContent: function(element) {\r\n          var\r\n            $content = $(element)\r\n          ;\r\n          module.debug('Add content to dimmer', $content);\r\n          if($content.parent()[0] !== $dimmer[0]) {\r\n            $content.detach().appendTo($dimmer);\r\n          }\r\n        },\r\n\r\n        create: function() {\r\n          var\r\n            $element = $( settings.template.dimmer() )\r\n          ;\r\n          if(settings.variation) {\r\n            module.debug('Creating dimmer with variation', settings.variation);\r\n            $element.addClass(settings.variation);\r\n          }\r\n          if(settings.dimmerName) {\r\n            module.debug('Creating named dimmer', settings.dimmerName);\r\n            $element.addClass(settings.dimmerName);\r\n          }\r\n          $element\r\n            .appendTo($dimmable)\r\n          ;\r\n          return $element;\r\n        },\r\n\r\n        show: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          module.debug('Showing dimmer', $dimmer, settings);\r\n          if( (!module.is.dimmed() || module.is.animating()) && module.is.enabled() ) {\r\n            module.animate.show(callback);\r\n            settings.onShow.call(element);\r\n            settings.onChange.call(element);\r\n          }\r\n          else {\r\n            module.debug('Dimmer is already shown or disabled');\r\n          }\r\n        },\r\n\r\n        hide: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if( module.is.dimmed() || module.is.animating() ) {\r\n            module.debug('Hiding dimmer', $dimmer);\r\n            module.animate.hide(callback);\r\n            settings.onHide.call(element);\r\n            settings.onChange.call(element);\r\n          }\r\n          else {\r\n            module.debug('Dimmer is not visible');\r\n          }\r\n        },\r\n\r\n        toggle: function() {\r\n          module.verbose('Toggling dimmer visibility', $dimmer);\r\n          if( !module.is.dimmed() ) {\r\n            module.show();\r\n          }\r\n          else {\r\n            module.hide();\r\n          }\r\n        },\r\n\r\n        animate: {\r\n          show: function(callback) {\r\n            callback = $.isFunction(callback)\r\n              ? callback\r\n              : function(){}\r\n            ;\r\n            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {\r\n              if(settings.opacity !== 'auto') {\r\n                module.set.opacity();\r\n              }\r\n              $dimmer\r\n                .transition({\r\n                  animation   : settings.transition + ' in',\r\n                  queue       : false,\r\n                  duration    : module.get.duration(),\r\n                  useFailSafe : true,\r\n                  onStart     : function() {\r\n                    module.set.dimmed();\r\n                  },\r\n                  onComplete  : function() {\r\n                    module.set.active();\r\n                    callback();\r\n                  }\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              module.verbose('Showing dimmer animation with javascript');\r\n              module.set.dimmed();\r\n              if(settings.opacity == 'auto') {\r\n                settings.opacity = 0.8;\r\n              }\r\n              $dimmer\r\n                .stop()\r\n                .css({\r\n                  opacity : 0,\r\n                  width   : '100%',\r\n                  height  : '100%'\r\n                })\r\n                .fadeTo(module.get.duration(), settings.opacity, function() {\r\n                  $dimmer.removeAttr('style');\r\n                  module.set.active();\r\n                  callback();\r\n                })\r\n              ;\r\n            }\r\n          },\r\n          hide: function(callback) {\r\n            callback = $.isFunction(callback)\r\n              ? callback\r\n              : function(){}\r\n            ;\r\n            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {\r\n              module.verbose('Hiding dimmer with css');\r\n              $dimmer\r\n                .transition({\r\n                  animation   : settings.transition + ' out',\r\n                  queue       : false,\r\n                  duration    : module.get.duration(),\r\n                  useFailSafe : true,\r\n                  onStart     : function() {\r\n                    module.remove.dimmed();\r\n                  },\r\n                  onComplete  : function() {\r\n                    module.remove.active();\r\n                    callback();\r\n                  }\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              module.verbose('Hiding dimmer with javascript');\r\n              module.remove.dimmed();\r\n              $dimmer\r\n                .stop()\r\n                .fadeOut(module.get.duration(), function() {\r\n                  module.remove.active();\r\n                  $dimmer.removeAttr('style');\r\n                  callback();\r\n                })\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        get: {\r\n          dimmer: function() {\r\n            return $dimmer;\r\n          },\r\n          duration: function() {\r\n            if(typeof settings.duration == 'object') {\r\n              if( module.is.active() ) {\r\n                return settings.duration.hide;\r\n              }\r\n              else {\r\n                return settings.duration.show;\r\n              }\r\n            }\r\n            return settings.duration;\r\n          }\r\n        },\r\n\r\n        has: {\r\n          dimmer: function() {\r\n            if(settings.dimmerName) {\r\n              return ($module.find(selector.dimmer).filter('.' + settings.dimmerName).length > 0);\r\n            }\r\n            else {\r\n              return ( $module.find(selector.dimmer).length > 0 );\r\n            }\r\n          }\r\n        },\r\n\r\n        is: {\r\n          active: function() {\r\n            return $dimmer.hasClass(className.active);\r\n          },\r\n          animating: function() {\r\n            return ( $dimmer.is(':animated') || $dimmer.hasClass(className.animating) );\r\n          },\r\n          closable: function() {\r\n            if(settings.closable == 'auto') {\r\n              if(settings.on == 'hover') {\r\n                return false;\r\n              }\r\n              return true;\r\n            }\r\n            return settings.closable;\r\n          },\r\n          dimmer: function() {\r\n            return $module.hasClass(className.dimmer);\r\n          },\r\n          dimmable: function() {\r\n            return $module.hasClass(className.dimmable);\r\n          },\r\n          dimmed: function() {\r\n            return $dimmable.hasClass(className.dimmed);\r\n          },\r\n          disabled: function() {\r\n            return $dimmable.hasClass(className.disabled);\r\n          },\r\n          enabled: function() {\r\n            return !module.is.disabled();\r\n          },\r\n          page: function () {\r\n            return $dimmable.is('body');\r\n          },\r\n          pageDimmer: function() {\r\n            return $dimmer.hasClass(className.pageDimmer);\r\n          }\r\n        },\r\n\r\n        can: {\r\n          show: function() {\r\n            return !$dimmer.hasClass(className.disabled);\r\n          }\r\n        },\r\n\r\n        set: {\r\n          opacity: function(opacity) {\r\n            var\r\n              color      = $dimmer.css('background-color'),\r\n              colorArray = color.split(','),\r\n              isRGBA     = (colorArray && colorArray.length == 4)\r\n            ;\r\n            opacity    = settings.opacity === 0 ? 0 : settings.opacity || opacity;\r\n            if(isRGBA) {\r\n              colorArray[3] = opacity + ')';\r\n              color         = colorArray.join(',');\r\n            }\r\n            else {\r\n              color = 'rgba(0, 0, 0, ' + opacity + ')';\r\n            }\r\n            module.debug('Setting opacity to', opacity);\r\n            $dimmer.css('background-color', color);\r\n          },\r\n          active: function() {\r\n            $dimmer.addClass(className.active);\r\n          },\r\n          dimmable: function() {\r\n            $dimmable.addClass(className.dimmable);\r\n          },\r\n          dimmed: function() {\r\n            $dimmable.addClass(className.dimmed);\r\n          },\r\n          pageDimmer: function() {\r\n            $dimmer.addClass(className.pageDimmer);\r\n          },\r\n          disabled: function() {\r\n            $dimmer.addClass(className.disabled);\r\n          },\r\n          variation: function(variation) {\r\n            variation = variation || settings.variation;\r\n            if(variation) {\r\n              $dimmer.addClass(variation);\r\n            }\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          active: function() {\r\n            $dimmer\r\n              .removeClass(className.active)\r\n            ;\r\n          },\r\n          dimmed: function() {\r\n            $dimmable.removeClass(className.dimmed);\r\n          },\r\n          disabled: function() {\r\n            $dimmer.removeClass(className.disabled);\r\n          },\r\n          variation: function(variation) {\r\n            variation = variation || settings.variation;\r\n            if(variation) {\r\n              $dimmer.removeClass(variation);\r\n            }\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if($allModules.length > 1) {\r\n              title += ' ' + '(' + $allModules.length + ')';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      module.preinitialize();\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.dimmer.settings = {\r\n\r\n  name        : 'Dimmer',\r\n  namespace   : 'dimmer',\r\n\r\n  debug       : false,\r\n  verbose     : false,\r\n  performance : true,\r\n\r\n  // name to distinguish between multiple dimmers in context\r\n  dimmerName  : false,\r\n\r\n  // whether to add a variation type\r\n  variation   : false,\r\n\r\n  // whether to bind close events\r\n  closable    : 'auto',\r\n\r\n  // whether to use css animations\r\n  useCSS      : true,\r\n\r\n  // css animation to use\r\n  transition  : 'fade',\r\n\r\n  // event to bind to\r\n  on          : false,\r\n\r\n  // overriding opacity value\r\n  opacity     : 'auto',\r\n\r\n  // transition durations\r\n  duration    : {\r\n    show : 500,\r\n    hide : 500\r\n  },\r\n\r\n  onChange    : function(){},\r\n  onShow      : function(){},\r\n  onHide      : function(){},\r\n\r\n  error   : {\r\n    method   : 'The method you called is not defined.'\r\n  },\r\n\r\n  className : {\r\n    active     : 'active',\r\n    animating  : 'animating',\r\n    dimmable   : 'dimmable',\r\n    dimmed     : 'dimmed',\r\n    dimmer     : 'dimmer',\r\n    disabled   : 'disabled',\r\n    hide       : 'hide',\r\n    pageDimmer : 'page',\r\n    show       : 'show'\r\n  },\r\n\r\n  selector: {\r\n    dimmer   : '> .ui.dimmer',\r\n    content  : '.ui.dimmer > .content, .ui.dimmer > .content > .center'\r\n  },\r\n\r\n  template: {\r\n    dimmer: function() {\r\n     return $('<div />').attr('class', 'ui dimmer');\r\n    }\r\n  }\r\n\r\n};\r\n\r\n})( jQuery, window, document );\r\n/*!\r\n * # Semantic UI 2.1.7 - Dropdown\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.dropdown = function(parameters) {\r\n  var\r\n    $allModules    = $(this),\r\n    $document      = $(document),\r\n\r\n    moduleSelector = $allModules.selector || '',\r\n\r\n    hasTouch       = ('ontouchstart' in document.documentElement),\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function(elementIndex) {\r\n      var\r\n        settings          = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.dropdown.settings, parameters)\r\n          : $.extend({}, $.fn.dropdown.settings),\r\n\r\n        className       = settings.className,\r\n        message         = settings.message,\r\n        fields          = settings.fields,\r\n        keys            = settings.keys,\r\n        metadata        = settings.metadata,\r\n        namespace       = settings.namespace,\r\n        regExp          = settings.regExp,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n        templates       = settings.templates,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        $module         = $(this),\r\n        $context        = $(settings.context),\r\n        $text           = $module.find(selector.text),\r\n        $search         = $module.find(selector.search),\r\n        $input          = $module.find(selector.input),\r\n        $icon           = $module.find(selector.icon),\r\n\r\n        $combo = ($module.prev().find(selector.text).length > 0)\r\n          ? $module.prev().find(selector.text)\r\n          : $module.prev(),\r\n\r\n        $menu           = $module.children(selector.menu),\r\n        $item           = $menu.find(selector.item),\r\n\r\n        activated       = false,\r\n        itemActivated   = false,\r\n        internalChange  = false,\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        initialLoad,\r\n        pageLostFocus,\r\n        elementNamespace,\r\n        id,\r\n        selectObserver,\r\n        menuObserver,\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.debug('Initializing dropdown', settings);\r\n\r\n          if( module.is.alreadySetup() ) {\r\n            module.setup.reference();\r\n          }\r\n          else {\r\n            module.setup.layout();\r\n            module.refreshData();\r\n\r\n            module.save.defaults();\r\n            module.restore.selected();\r\n\r\n            module.create.id();\r\n            module.bind.events();\r\n\r\n            module.observeChanges();\r\n            module.instantiate();\r\n          }\r\n\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of dropdown', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous dropdown', $module);\r\n          module.remove.tabbable();\r\n          $module\r\n            .off(eventNamespace)\r\n            .removeData(moduleNamespace)\r\n          ;\r\n          $menu\r\n            .off(eventNamespace)\r\n          ;\r\n          $document\r\n            .off(elementNamespace)\r\n          ;\r\n          if(selectObserver) {\r\n            selectObserver.disconnect();\r\n          }\r\n          if(menuObserver) {\r\n            menuObserver.disconnect();\r\n          }\r\n        },\r\n\r\n        observeChanges: function() {\r\n          if('MutationObserver' in window) {\r\n            selectObserver = new MutationObserver(function(mutations) {\r\n              module.debug('<select> modified, recreating menu');\r\n              module.setup.select();\r\n            });\r\n            menuObserver = new MutationObserver(function(mutations) {\r\n              module.debug('Menu modified, updating selector cache');\r\n              module.refresh();\r\n            });\r\n            if(module.has.input()) {\r\n              selectObserver.observe($input[0], {\r\n                childList : true,\r\n                subtree   : true\r\n              });\r\n            }\r\n            if(module.has.menu()) {\r\n              menuObserver.observe($menu[0], {\r\n                childList : true,\r\n                subtree   : true\r\n              });\r\n            }\r\n            module.debug('Setting up mutation observer', selectObserver, menuObserver);\r\n          }\r\n        },\r\n\r\n        create: {\r\n          id: function() {\r\n            id = (Math.random().toString(16) + '000000000').substr(2, 8);\r\n            elementNamespace = '.' + id;\r\n            module.verbose('Creating unique id for element', id);\r\n          },\r\n          userChoice: function(values) {\r\n            var\r\n              $userChoices,\r\n              $userChoice,\r\n              isUserValue,\r\n              html\r\n            ;\r\n            values = values || module.get.userValues();\r\n            if(!values) {\r\n              return false;\r\n            }\r\n            values = $.isArray(values)\r\n              ? values\r\n              : [values]\r\n            ;\r\n            $.each(values, function(index, value) {\r\n              if(module.get.item(value) === false) {\r\n                html         = settings.templates.addition( module.add.variables(message.addResult, value) );\r\n                $userChoice  = $('<div />')\r\n                  .html(html)\r\n                  .attr('data-' + metadata.value, value)\r\n                  .attr('data-' + metadata.text, value)\r\n                  .addClass(className.addition)\r\n                  .addClass(className.item)\r\n                ;\r\n                $userChoices = ($userChoices === undefined)\r\n                  ? $userChoice\r\n                  : $userChoices.add($userChoice)\r\n                ;\r\n                module.verbose('Creating user choices for value', value, $userChoice);\r\n              }\r\n            });\r\n            return $userChoices;\r\n          },\r\n          userLabels: function(value) {\r\n            var\r\n              userValues = module.get.userValues()\r\n            ;\r\n            if(userValues) {\r\n              module.debug('Adding user labels', userValues);\r\n              $.each(userValues, function(index, value) {\r\n                module.verbose('Adding custom user value');\r\n                module.add.label(value, value);\r\n              });\r\n            }\r\n          },\r\n          menu: function() {\r\n            $menu = $('<div />')\r\n              .addClass(className.menu)\r\n              .appendTo($module)\r\n            ;\r\n          }\r\n        },\r\n\r\n        search: function(query) {\r\n          query = (query !== undefined)\r\n            ? query\r\n            : module.get.query()\r\n          ;\r\n          module.verbose('Searching for query', query);\r\n          module.filter(query);\r\n        },\r\n\r\n        select: {\r\n          firstUnfiltered: function() {\r\n            module.verbose('Selecting first non-filtered element');\r\n            module.remove.selectedItem();\r\n            $item\r\n              .not(selector.unselectable)\r\n                .eq(0)\r\n                .addClass(className.selected)\r\n            ;\r\n          },\r\n          nextAvailable: function($selected) {\r\n            $selected = $selected.eq(0);\r\n            var\r\n              $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),\r\n              $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),\r\n              hasNext        = ($nextAvailable.length > 0)\r\n            ;\r\n            if(hasNext) {\r\n              module.verbose('Moving selection to', $nextAvailable);\r\n              $nextAvailable.addClass(className.selected);\r\n            }\r\n            else {\r\n              module.verbose('Moving selection to', $prevAvailable);\r\n              $prevAvailable.addClass(className.selected);\r\n            }\r\n          }\r\n        },\r\n\r\n        setup: {\r\n          api: function() {\r\n            var\r\n              apiSettings = {\r\n                debug : settings.debug,\r\n                on    : false\r\n              }\r\n            ;\r\n            module.verbose('First request, initializing API');\r\n            $module\r\n              .api(apiSettings)\r\n            ;\r\n          },\r\n          layout: function() {\r\n            if( $module.is('select') ) {\r\n              module.setup.select();\r\n              module.setup.returnedObject();\r\n            }\r\n            if( !module.has.menu() ) {\r\n              module.create.menu();\r\n            }\r\n            if( module.is.search() && !module.has.search() ) {\r\n              module.verbose('Adding search input');\r\n              $search = $('<input />')\r\n                .addClass(className.search)\r\n                .prop('autocomplete', 'off')\r\n                .insertBefore($text)\r\n              ;\r\n            }\r\n            if(settings.allowTab) {\r\n              module.set.tabbable();\r\n            }\r\n          },\r\n          select: function() {\r\n            var\r\n              selectValues  = module.get.selectValues()\r\n            ;\r\n            module.debug('Dropdown initialized on a select', selectValues);\r\n            if( $module.is('select') ) {\r\n              $input = $module;\r\n            }\r\n            // see if select is placed correctly already\r\n            if($input.parent(selector.dropdown).length > 0) {\r\n              module.debug('UI dropdown already exists. Creating dropdown menu only');\r\n              $module = $input.closest(selector.dropdown);\r\n              if( !module.has.menu() ) {\r\n                module.create.menu();\r\n              }\r\n              $menu = $module.children(selector.menu);\r\n              module.setup.menu(selectValues);\r\n            }\r\n            else {\r\n              module.debug('Creating entire dropdown from select');\r\n              $module = $('<div />')\r\n                .attr('class', $input.attr('class') )\r\n                .addClass(className.selection)\r\n                .addClass(className.dropdown)\r\n                .html( templates.dropdown(selectValues) )\r\n                .insertBefore($input)\r\n              ;\r\n              if($input.hasClass(className.multiple) && $input.prop('multiple') === false) {\r\n                module.error(error.missingMultiple);\r\n                $input.prop('multiple', true);\r\n              }\r\n              if($input.is('[multiple]')) {\r\n                module.set.multiple();\r\n              }\r\n              if ($input.prop('disabled')) {\r\n                module.debug('Disabling dropdown')\r\n                $module.addClass(className.disabled)\r\n              }\r\n              $input\r\n                .removeAttr('class')\r\n                .detach()\r\n                .prependTo($module)\r\n              ;\r\n            }\r\n            module.refresh();\r\n          },\r\n          menu: function(values) {\r\n            $menu.html( templates.menu(values, fields));\r\n            $item = $menu.find(selector.item);\r\n          },\r\n          reference: function() {\r\n            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');\r\n            // replace module reference\r\n            $module = $module.parent(selector.dropdown);\r\n            module.refresh();\r\n            module.setup.returnedObject();\r\n            // invoke method in context of current instance\r\n            if(methodInvoked) {\r\n              instance = module;\r\n              module.invoke(query);\r\n            }\r\n          },\r\n          returnedObject: function() {\r\n            var\r\n              $firstModules = $allModules.slice(0, elementIndex),\r\n              $lastModules = $allModules.slice(elementIndex + 1)\r\n            ;\r\n            // adjust all modules to use correct reference\r\n            $allModules = $firstModules.add($module).add($lastModules);\r\n          }\r\n        },\r\n\r\n        refresh: function() {\r\n          module.refreshSelectors();\r\n          module.refreshData();\r\n        },\r\n\r\n        refreshSelectors: function() {\r\n          module.verbose('Refreshing selector cache');\r\n          $text   = $module.find(selector.text);\r\n          $search = $module.find(selector.search);\r\n          $input  = $module.find(selector.input);\r\n          $icon   = $module.find(selector.icon);\r\n          $combo  = ($module.prev().find(selector.text).length > 0)\r\n            ? $module.prev().find(selector.text)\r\n            : $module.prev()\r\n          ;\r\n          $menu    = $module.children(selector.menu);\r\n          $item    = $menu.find(selector.item);\r\n        },\r\n\r\n        refreshData: function() {\r\n          module.verbose('Refreshing cached metadata');\r\n          $item\r\n            .removeData(metadata.text)\r\n            .removeData(metadata.value)\r\n          ;\r\n          $module\r\n            .removeData(metadata.defaultText)\r\n            .removeData(metadata.defaultValue)\r\n            .removeData(metadata.placeholderText)\r\n          ;\r\n        },\r\n\r\n        toggle: function() {\r\n          module.verbose('Toggling menu visibility');\r\n          if( !module.is.active() ) {\r\n            module.show();\r\n          }\r\n          else {\r\n            module.hide();\r\n          }\r\n        },\r\n\r\n        show: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if( module.can.show() && !module.is.active() ) {\r\n            module.debug('Showing dropdown');\r\n            if(module.is.multiple() && !module.has.search() && module.is.allFiltered()) {\r\n              return true;\r\n            }\r\n            if(module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered()) ) {\r\n              module.remove.message();\r\n            }\r\n            if(settings.onShow.call(element) !== false) {\r\n              module.animate.show(function() {\r\n                if( module.can.click() ) {\r\n                  module.bind.intent();\r\n                }\r\n                module.set.visible();\r\n                callback.call(element);\r\n              });\r\n            }\r\n          }\r\n        },\r\n\r\n        hide: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if( module.is.active() ) {\r\n            module.debug('Hiding dropdown');\r\n            if(settings.onHide.call(element) !== false) {\r\n              module.animate.hide(function() {\r\n                module.remove.visible();\r\n                callback.call(element);\r\n              });\r\n            }\r\n          }\r\n        },\r\n\r\n        hideOthers: function() {\r\n          module.verbose('Finding other dropdowns to hide');\r\n          $allModules\r\n            .not($module)\r\n              .has(selector.menu + '.' + className.visible)\r\n                .dropdown('hide')\r\n          ;\r\n        },\r\n\r\n        hideMenu: function() {\r\n          module.verbose('Hiding menu  instantaneously');\r\n          module.remove.active();\r\n          module.remove.visible();\r\n          $menu.transition('hide');\r\n        },\r\n\r\n        hideSubMenus: function() {\r\n          var\r\n            $subMenus = $menu.children(selector.item).find(selector.menu)\r\n          ;\r\n          module.verbose('Hiding sub menus', $subMenus);\r\n          $subMenus.transition('hide');\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            if(hasTouch) {\r\n              module.bind.touchEvents();\r\n            }\r\n            module.bind.keyboardEvents();\r\n            module.bind.inputEvents();\r\n            module.bind.mouseEvents();\r\n          },\r\n          touchEvents: function() {\r\n            module.debug('Touch device detected binding additional touch events');\r\n            if( module.is.searchSelection() ) {\r\n              // do nothing special yet\r\n            }\r\n            else if( module.is.single() ) {\r\n              $module\r\n                .on('touchstart' + eventNamespace, module.event.test.toggle)\r\n              ;\r\n            }\r\n            $menu\r\n              .on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter)\r\n            ;\r\n          },\r\n          keyboardEvents: function() {\r\n            module.verbose('Binding keyboard events');\r\n            $module\r\n              .on('keydown' + eventNamespace, module.event.keydown)\r\n            ;\r\n            if( module.has.search() ) {\r\n              $module\r\n                .on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input)\r\n              ;\r\n            }\r\n            if( module.is.multiple() ) {\r\n              $document\r\n                .on('keydown' + elementNamespace, module.event.document.keydown)\r\n              ;\r\n            }\r\n          },\r\n          inputEvents: function() {\r\n            module.verbose('Binding input change events');\r\n            $module\r\n              .on('change' + eventNamespace, selector.input, module.event.change)\r\n            ;\r\n          },\r\n          mouseEvents: function() {\r\n            module.verbose('Binding mouse events');\r\n            if(module.is.multiple()) {\r\n              $module\r\n                .on('click'   + eventNamespace, selector.label,  module.event.label.click)\r\n                .on('click'   + eventNamespace, selector.remove, module.event.remove.click)\r\n              ;\r\n            }\r\n            if( module.is.searchSelection() ) {\r\n              $module\r\n                .on('mousedown' + eventNamespace, selector.menu,   module.event.menu.mousedown)\r\n                .on('mouseup'   + eventNamespace, selector.menu,   module.event.menu.mouseup)\r\n                .on('click'     + eventNamespace, selector.icon,   module.event.icon.click)\r\n                .on('click'     + eventNamespace, selector.search, module.show)\r\n                .on('focus'     + eventNamespace, selector.search, module.event.search.focus)\r\n                .on('blur'      + eventNamespace, selector.search, module.event.search.blur)\r\n                .on('click'     + eventNamespace, selector.text,   module.event.text.focus)\r\n              ;\r\n              if(module.is.multiple()) {\r\n                $module\r\n                  .on('click' + eventNamespace, module.event.click)\r\n                ;\r\n              }\r\n            }\r\n            else {\r\n              if(settings.on == 'click') {\r\n                $module\r\n                  .on('click' + eventNamespace, selector.icon, module.event.icon.click)\r\n                  .on('click' + eventNamespace, module.event.test.toggle)\r\n                ;\r\n              }\r\n              else if(settings.on == 'hover') {\r\n                $module\r\n                  .on('mouseenter' + eventNamespace, module.delay.show)\r\n                  .on('mouseleave' + eventNamespace, module.delay.hide)\r\n                ;\r\n              }\r\n              else {\r\n                $module\r\n                  .on(settings.on + eventNamespace, module.toggle)\r\n                ;\r\n              }\r\n              $module\r\n                .on('mousedown' + eventNamespace, module.event.mousedown)\r\n                .on('mouseup'   + eventNamespace, module.event.mouseup)\r\n                .on('focus'     + eventNamespace, module.event.focus)\r\n                .on('blur'      + eventNamespace, module.event.blur)\r\n              ;\r\n            }\r\n            $menu\r\n              .on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter)\r\n              .on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave)\r\n              .on('click'      + eventNamespace, selector.item, module.event.item.click)\r\n            ;\r\n          },\r\n          intent: function() {\r\n            module.verbose('Binding hide intent event to document');\r\n            if(hasTouch) {\r\n              $document\r\n                .on('touchstart' + elementNamespace, module.event.test.touch)\r\n                .on('touchmove'  + elementNamespace, module.event.test.touch)\r\n              ;\r\n            }\r\n            $document\r\n              .on('click' + elementNamespace, module.event.test.hide)\r\n            ;\r\n          }\r\n        },\r\n\r\n        unbind: {\r\n          intent: function() {\r\n            module.verbose('Removing hide intent event from document');\r\n            if(hasTouch) {\r\n              $document\r\n                .off('touchstart' + elementNamespace)\r\n                .off('touchmove' + elementNamespace)\r\n              ;\r\n            }\r\n            $document\r\n              .off('click' + elementNamespace)\r\n            ;\r\n          }\r\n        },\r\n\r\n        filter: function(query) {\r\n          var\r\n            searchTerm = (query !== undefined)\r\n              ? query\r\n              : module.get.query(),\r\n            afterFiltered = function() {\r\n              if(module.is.multiple()) {\r\n                module.filterActive();\r\n              }\r\n              module.select.firstUnfiltered();\r\n              if( module.has.allResultsFiltered() ) {\r\n                if( settings.onNoResults.call(element, searchTerm) ) {\r\n                  if(!settings.allowAdditions) {\r\n                    module.verbose('All items filtered, showing message', searchTerm);\r\n                    module.add.message(message.noResults);\r\n                  }\r\n                }\r\n                else {\r\n                  module.verbose('All items filtered, hiding dropdown', searchTerm);\r\n                  module.hideMenu();\r\n                }\r\n              }\r\n              else {\r\n                module.remove.message();\r\n              }\r\n              if(settings.allowAdditions) {\r\n                module.add.userSuggestion(query);\r\n              }\r\n              if(module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch() ) {\r\n                module.show();\r\n              }\r\n            }\r\n          ;\r\n          if(settings.useLabels && module.has.maxSelections()) {\r\n            return;\r\n          }\r\n          if(settings.apiSettings) {\r\n            if( module.can.useAPI() ) {\r\n              module.queryRemote(searchTerm, function() {\r\n                afterFiltered();\r\n              });\r\n            }\r\n            else {\r\n              module.error(error.noAPI);\r\n            }\r\n          }\r\n          else {\r\n            module.filterItems(searchTerm);\r\n            afterFiltered();\r\n          }\r\n        },\r\n\r\n        queryRemote: function(query, callback) {\r\n          var\r\n            apiSettings = {\r\n              errorDuration        : false,\r\n              throttle             : settings.throttle,\r\n              urlData              : {\r\n                query: query\r\n              },\r\n              onError: function() {\r\n                module.add.message(message.serverError);\r\n                callback();\r\n              },\r\n              onFailure: function() {\r\n                module.add.message(message.serverError);\r\n                callback();\r\n              },\r\n              onSuccess : function(response) {\r\n                module.remove.message();\r\n                module.setup.menu({\r\n                  values: response[fields.remoteValues]\r\n                });\r\n                callback();\r\n              }\r\n            }\r\n          ;\r\n          if( !$module.api('get request') ) {\r\n            module.setup.api();\r\n          }\r\n          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);\r\n          $module\r\n            .api('setting', apiSettings)\r\n            .api('query')\r\n          ;\r\n        },\r\n\r\n        filterItems: function(query) {\r\n          var\r\n            searchTerm = (query !== undefined)\r\n              ? query\r\n              : module.get.query(),\r\n            results          =  null,\r\n            escapedTerm      = module.escape.regExp(searchTerm),\r\n            beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm')\r\n          ;\r\n          // avoid loop if we're matching nothing\r\n          if( module.has.query() ) {\r\n            results = [];\r\n\r\n            module.verbose('Searching for matching values', searchTerm);\r\n            $item\r\n              .each(function(){\r\n                var\r\n                  $choice = $(this),\r\n                  text,\r\n                  value\r\n                ;\r\n                if(settings.match == 'both' || settings.match == 'text') {\r\n                  text = String(module.get.choiceText($choice, false));\r\n                  if(text.search(beginsWithRegExp) !== -1) {\r\n                    results.push(this);\r\n                    return true;\r\n                  }\r\n                  else if(settings.fullTextSearch && module.fuzzySearch(searchTerm, text)) {\r\n                    results.push(this);\r\n                    return true;\r\n                  }\r\n                }\r\n                if(settings.match == 'both' || settings.match == 'value') {\r\n                  value = String(module.get.choiceValue($choice, text));\r\n\r\n                  if(value.search(beginsWithRegExp) !== -1) {\r\n                    results.push(this);\r\n                    return true;\r\n                  }\r\n                  else if(settings.fullTextSearch && module.fuzzySearch(searchTerm, value)) {\r\n                    results.push(this);\r\n                    return true;\r\n                  }\r\n                }\r\n              })\r\n            ;\r\n          }\r\n          module.debug('Showing only matched items', searchTerm);\r\n          module.remove.filteredItem();\r\n          if(results) {\r\n            $item\r\n              .not(results)\r\n              .addClass(className.filtered)\r\n            ;\r\n          }\r\n        },\r\n\r\n        fuzzySearch: function(query, term) {\r\n          var\r\n            termLength  = term.length,\r\n            queryLength = query.length\r\n          ;\r\n          query = query.toLowerCase();\r\n          term  = term.toLowerCase();\r\n          if(queryLength > termLength) {\r\n            return false;\r\n          }\r\n          if(queryLength === termLength) {\r\n            return (query === term);\r\n          }\r\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\r\n            var\r\n              queryCharacter = query.charCodeAt(characterIndex)\r\n            ;\r\n            while(nextCharacterIndex < termLength) {\r\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\r\n                continue search;\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n          return true;\r\n        },\r\n\r\n        filterActive: function() {\r\n          if(settings.useLabels) {\r\n            $item.filter('.' + className.active)\r\n              .addClass(className.filtered)\r\n            ;\r\n          }\r\n        },\r\n\r\n        focusSearch: function() {\r\n          if( module.is.search() && !module.is.focusedOnSearch() ) {\r\n            $search[0].focus();\r\n          }\r\n        },\r\n\r\n        forceSelection: function() {\r\n          var\r\n            $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),\r\n            $activeItem        = $item.not(className.filtered).filter('.' + className.active).eq(0),\r\n            $selectedItem      = ($currentlySelected.length > 0)\r\n              ? $currentlySelected\r\n              : $activeItem,\r\n            hasSelected = ($selectedItem.size() > 0)\r\n          ;\r\n          if( module.has.query() ) {\r\n            if(hasSelected) {\r\n              module.debug('Forcing partial selection to selected item', $selectedItem);\r\n              module.event.item.click.call($selectedItem);\r\n              return;\r\n            }\r\n            else {\r\n              module.remove.searchTerm();\r\n            }\r\n          }\r\n          module.hide();\r\n        },\r\n\r\n        event: {\r\n          change: function() {\r\n            if(!internalChange) {\r\n              module.debug('Input changed, updating selection');\r\n              module.set.selected();\r\n            }\r\n          },\r\n          focus: function() {\r\n            if(settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {\r\n              module.show();\r\n            }\r\n          },\r\n          click: function(event) {\r\n            var\r\n              $target = $(event.target)\r\n            ;\r\n            // focus search\r\n            if($target.is($module) && !module.is.focusedOnSearch()) {\r\n              module.focusSearch();\r\n            }\r\n          },\r\n          blur: function(event) {\r\n            pageLostFocus = (document.activeElement === this);\r\n            if(!activated && !pageLostFocus) {\r\n              module.remove.activeLabel();\r\n              module.hide();\r\n            }\r\n          },\r\n          // prevents focus callback from occurring on mousedown\r\n          mousedown: function() {\r\n            activated = true;\r\n          },\r\n          mouseup: function() {\r\n            activated = false;\r\n          },\r\n          search: {\r\n            focus: function() {\r\n              activated = true;\r\n              if(module.is.multiple()) {\r\n                module.remove.activeLabel();\r\n              }\r\n              if(settings.showOnFocus) {\r\n                module.search();\r\n                module.show();\r\n              }\r\n            },\r\n            blur: function(event) {\r\n              pageLostFocus = (document.activeElement === this);\r\n              if(!itemActivated && !pageLostFocus) {\r\n                if(module.is.multiple()) {\r\n                  module.remove.activeLabel();\r\n                  module.hide();\r\n                }\r\n                else if(settings.forceSelection) {\r\n                  module.forceSelection();\r\n                }\r\n                else {\r\n                  module.hide();\r\n                }\r\n              }\r\n              else if(pageLostFocus) {\r\n                if(settings.forceSelection) {\r\n                  module.forceSelection();\r\n                }\r\n              }\r\n            }\r\n          },\r\n          icon: {\r\n            click: function(event) {\r\n              module.toggle();\r\n              event.stopPropagation();\r\n            }\r\n          },\r\n          text: {\r\n            focus: function(event) {\r\n              activated = true;\r\n              module.focusSearch();\r\n            }\r\n          },\r\n          input: function(event) {\r\n            if(module.is.multiple() || module.is.searchSelection()) {\r\n              module.set.filtered();\r\n            }\r\n            clearTimeout(module.timer);\r\n            module.timer = setTimeout(module.search, settings.delay.search);\r\n          },\r\n          label: {\r\n            click: function(event) {\r\n              var\r\n                $label        = $(this),\r\n                $labels       = $module.find(selector.label),\r\n                $activeLabels = $labels.filter('.' + className.active),\r\n                $nextActive   = $label.nextAll('.' + className.active),\r\n                $prevActive   = $label.prevAll('.' + className.active),\r\n                $range = ($nextActive.length > 0)\r\n                  ? $label.nextUntil($nextActive).add($activeLabels).add($label)\r\n                  : $label.prevUntil($prevActive).add($activeLabels).add($label)\r\n              ;\r\n              if(event.shiftKey) {\r\n                $activeLabels.removeClass(className.active);\r\n                $range.addClass(className.active);\r\n              }\r\n              else if(event.ctrlKey) {\r\n                $label.toggleClass(className.active);\r\n              }\r\n              else {\r\n                $activeLabels.removeClass(className.active);\r\n                $label.addClass(className.active);\r\n              }\r\n              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));\r\n            }\r\n          },\r\n          remove: {\r\n            click: function() {\r\n              var\r\n                $label = $(this).parent()\r\n              ;\r\n              if( $label.hasClass(className.active) ) {\r\n                // remove all selected labels\r\n                module.remove.activeLabels();\r\n              }\r\n              else {\r\n                // remove this label only\r\n                module.remove.activeLabels( $label );\r\n              }\r\n            }\r\n          },\r\n          test: {\r\n            toggle: function(event) {\r\n              var\r\n                toggleBehavior = (module.is.multiple())\r\n                  ? module.show\r\n                  : module.toggle\r\n              ;\r\n              if( module.determine.eventOnElement(event, toggleBehavior) ) {\r\n                event.preventDefault();\r\n              }\r\n            },\r\n            touch: function(event) {\r\n              module.determine.eventOnElement(event, function() {\r\n                if(event.type == 'touchstart') {\r\n                  module.timer = setTimeout(function() {\r\n                    module.hide();\r\n                  }, settings.delay.touch);\r\n                }\r\n                else if(event.type == 'touchmove') {\r\n                  clearTimeout(module.timer);\r\n                }\r\n              });\r\n              event.stopPropagation();\r\n            },\r\n            hide: function(event) {\r\n              module.determine.eventInModule(event, module.hide);\r\n            }\r\n          },\r\n          menu: {\r\n            mousedown: function() {\r\n              itemActivated = true;\r\n            },\r\n            mouseup: function() {\r\n              itemActivated = false;\r\n            }\r\n          },\r\n          item: {\r\n            mouseenter: function(event) {\r\n              var\r\n                $subMenu    = $(this).children(selector.menu),\r\n                $otherMenus = $(this).siblings(selector.item).children(selector.menu)\r\n              ;\r\n              if( $subMenu.length > 0 ) {\r\n                clearTimeout(module.itemTimer);\r\n                module.itemTimer = setTimeout(function() {\r\n                  module.verbose('Showing sub-menu', $subMenu);\r\n                  $.each($otherMenus, function() {\r\n                    module.animate.hide(false, $(this));\r\n                  });\r\n                  module.animate.show(false,  $subMenu);\r\n                }, settings.delay.show);\r\n                event.preventDefault();\r\n              }\r\n            },\r\n            mouseleave: function(event) {\r\n              var\r\n                $subMenu = $(this).children(selector.menu)\r\n              ;\r\n              if($subMenu.length > 0) {\r\n                clearTimeout(module.itemTimer);\r\n                module.itemTimer = setTimeout(function() {\r\n                  module.verbose('Hiding sub-menu', $subMenu);\r\n                  module.animate.hide(false,  $subMenu);\r\n                }, settings.delay.hide);\r\n              }\r\n            },\r\n            touchend: function() {\r\n            },\r\n            click: function (event) {\r\n              var\r\n                $choice        = $(this),\r\n                $target        = (event)\r\n                  ? $(event.target)\r\n                  : $(''),\r\n                $subMenu       = $choice.find(selector.menu),\r\n                text           = module.get.choiceText($choice),\r\n                value          = module.get.choiceValue($choice, text),\r\n                hasSubMenu     = ($subMenu.length > 0),\r\n                isBubbledEvent = ($subMenu.find($target).length > 0)\r\n              ;\r\n              if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {\r\n                if(!settings.useLabels) {\r\n                  module.remove.filteredItem();\r\n                  module.remove.searchTerm();\r\n                  module.set.scrollPosition($choice);\r\n                }\r\n                module.determine.selectAction.call(this, text, value);\r\n              }\r\n            }\r\n          },\r\n\r\n          document: {\r\n            // label selection should occur even when element has no focus\r\n            keydown: function(event) {\r\n              var\r\n                pressedKey    = event.which,\r\n                isShortcutKey = module.is.inObject(pressedKey, keys)\r\n              ;\r\n              if(isShortcutKey) {\r\n                var\r\n                  $label            = $module.find(selector.label),\r\n                  $activeLabel      = $label.filter('.' + className.active),\r\n                  activeValue       = $activeLabel.data(metadata.value),\r\n                  labelIndex        = $label.index($activeLabel),\r\n                  labelCount        = $label.length,\r\n                  hasActiveLabel    = ($activeLabel.length > 0),\r\n                  hasMultipleActive = ($activeLabel.length > 1),\r\n                  isFirstLabel      = (labelIndex === 0),\r\n                  isLastLabel       = (labelIndex + 1 == labelCount),\r\n                  isSearch          = module.is.searchSelection(),\r\n                  isFocusedOnSearch = module.is.focusedOnSearch(),\r\n                  isFocused         = module.is.focused(),\r\n                  caretAtStart      = (isFocusedOnSearch && module.get.caretPosition() === 0),\r\n                  $nextLabel\r\n                ;\r\n                if(isSearch && !hasActiveLabel && !isFocusedOnSearch) {\r\n                  return;\r\n                }\r\n\r\n                if(pressedKey == keys.leftArrow) {\r\n                  // activate previous label\r\n                  if((isFocused || caretAtStart) && !hasActiveLabel) {\r\n                    module.verbose('Selecting previous label');\r\n                    $label.last().addClass(className.active);\r\n                  }\r\n                  else if(hasActiveLabel) {\r\n                    if(!event.shiftKey) {\r\n                      module.verbose('Selecting previous label');\r\n                      $label.removeClass(className.active);\r\n                    }\r\n                    else {\r\n                      module.verbose('Adding previous label to selection');\r\n                    }\r\n                    if(isFirstLabel && !hasMultipleActive) {\r\n                      $activeLabel.addClass(className.active);\r\n                    }\r\n                    else {\r\n                      $activeLabel.prev(selector.siblingLabel)\r\n                        .addClass(className.active)\r\n                        .end()\r\n                      ;\r\n                    }\r\n                    event.preventDefault();\r\n                  }\r\n                }\r\n                else if(pressedKey == keys.rightArrow) {\r\n                  // activate first label\r\n                  if(isFocused && !hasActiveLabel) {\r\n                    $label.first().addClass(className.active);\r\n                  }\r\n                  // activate next label\r\n                  if(hasActiveLabel) {\r\n                    if(!event.shiftKey) {\r\n                      module.verbose('Selecting next label');\r\n                      $label.removeClass(className.active);\r\n                    }\r\n                    else {\r\n                      module.verbose('Adding next label to selection');\r\n                    }\r\n                    if(isLastLabel) {\r\n                      if(isSearch) {\r\n                        if(!isFocusedOnSearch) {\r\n                          module.focusSearch();\r\n                        }\r\n                        else {\r\n                          $label.removeClass(className.active);\r\n                        }\r\n                      }\r\n                      else if(hasMultipleActive) {\r\n                        $activeLabel.next(selector.siblingLabel).addClass(className.active);\r\n                      }\r\n                      else {\r\n                        $activeLabel.addClass(className.active);\r\n                      }\r\n                    }\r\n                    else {\r\n                      $activeLabel.next(selector.siblingLabel).addClass(className.active);\r\n                    }\r\n                    event.preventDefault();\r\n                  }\r\n                }\r\n                else if(pressedKey == keys.deleteKey || pressedKey == keys.backspace) {\r\n                  if(hasActiveLabel) {\r\n                    module.verbose('Removing active labels');\r\n                    if(isLastLabel) {\r\n                      if(isSearch && !isFocusedOnSearch) {\r\n                        module.focusSearch();\r\n                      }\r\n                    }\r\n                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);\r\n                    module.remove.activeLabels($activeLabel);\r\n                    event.preventDefault();\r\n                  }\r\n                  else if(caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {\r\n                    module.verbose('Removing last label on input backspace');\r\n                    $activeLabel = $label.last().addClass(className.active);\r\n                    module.remove.activeLabels($activeLabel);\r\n                  }\r\n                }\r\n                else {\r\n                  $activeLabel.removeClass(className.active);\r\n                }\r\n              }\r\n            }\r\n          },\r\n\r\n          keydown: function(event) {\r\n            var\r\n              pressedKey    = event.which,\r\n              isShortcutKey = module.is.inObject(pressedKey, keys)\r\n            ;\r\n            if(isShortcutKey) {\r\n              var\r\n                $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),\r\n                $activeItem        = $menu.children('.' + className.active).eq(0),\r\n                $selectedItem      = ($currentlySelected.length > 0)\r\n                  ? $currentlySelected\r\n                  : $activeItem,\r\n                $visibleItems = ($selectedItem.length > 0)\r\n                  ? $selectedItem.siblings(':not(.' + className.filtered +')').andSelf()\r\n                  : $menu.children(':not(.' + className.filtered +')'),\r\n                $subMenu             = $selectedItem.children(selector.menu),\r\n                $parentMenu          = $selectedItem.closest(selector.menu),\r\n                inVisibleMenu        = ($parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0),\r\n                hasSubMenu           = ($subMenu.length> 0),\r\n                hasSelectedItem      = ($selectedItem.length > 0),\r\n                selectedIsSelectable = ($selectedItem.not(selector.unselectable).length > 0),\r\n                delimiterPressed     = (pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple()),\r\n                $nextItem,\r\n                isSubMenuItem,\r\n                newIndex\r\n              ;\r\n              // visible menu keyboard shortcuts\r\n              if( module.is.visible() ) {\r\n\r\n                // enter (select or open sub-menu)\r\n                if(pressedKey == keys.enter || delimiterPressed) {\r\n                  if(pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {\r\n                    module.verbose('Pressed enter on unselectable category, opening sub menu');\r\n                    pressedKey = keys.rightArrow;\r\n                  }\r\n                  else if(selectedIsSelectable) {\r\n                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);\r\n                    module.event.item.click.call($selectedItem, event);\r\n                    if(module.is.searchSelection()) {\r\n                      module.remove.searchTerm();\r\n                    }\r\n                  }\r\n                  event.preventDefault();\r\n                }\r\n\r\n                // left arrow (hide sub-menu)\r\n                if(pressedKey == keys.leftArrow) {\r\n\r\n                  isSubMenuItem = ($parentMenu[0] !== $menu[0]);\r\n\r\n                  if(isSubMenuItem) {\r\n                    module.verbose('Left key pressed, closing sub-menu');\r\n                    module.animate.hide(false,  $parentMenu);\r\n                    $selectedItem\r\n                      .removeClass(className.selected)\r\n                    ;\r\n                    $parentMenu\r\n                      .closest(selector.item)\r\n                        .addClass(className.selected)\r\n                    ;\r\n                    event.preventDefault();\r\n                  }\r\n                }\r\n\r\n                // right arrow (show sub-menu)\r\n                if(pressedKey == keys.rightArrow) {\r\n                  if(hasSubMenu) {\r\n                    module.verbose('Right key pressed, opening sub-menu');\r\n                    module.animate.show(false,  $subMenu);\r\n                    $selectedItem\r\n                      .removeClass(className.selected)\r\n                    ;\r\n                    $subMenu\r\n                      .find(selector.item).eq(0)\r\n                        .addClass(className.selected)\r\n                    ;\r\n                    event.preventDefault();\r\n                  }\r\n                }\r\n\r\n                // up arrow (traverse menu up)\r\n                if(pressedKey == keys.upArrow) {\r\n                  $nextItem = (hasSelectedItem && inVisibleMenu)\r\n                    ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)\r\n                    : $item.eq(0)\r\n                  ;\r\n                  if($visibleItems.index( $nextItem ) < 0) {\r\n                    module.verbose('Up key pressed but reached top of current menu');\r\n                    event.preventDefault();\r\n                    return;\r\n                  }\r\n                  else {\r\n                    module.verbose('Up key pressed, changing active item');\r\n                    $selectedItem\r\n                      .removeClass(className.selected)\r\n                    ;\r\n                    $nextItem\r\n                      .addClass(className.selected)\r\n                    ;\r\n                    module.set.scrollPosition($nextItem);\r\n                  }\r\n                  event.preventDefault();\r\n                }\r\n\r\n                // down arrow (traverse menu down)\r\n                if(pressedKey == keys.downArrow) {\r\n                  $nextItem = (hasSelectedItem && inVisibleMenu)\r\n                    ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)\r\n                    : $item.eq(0)\r\n                  ;\r\n                  if($nextItem.length === 0) {\r\n                    module.verbose('Down key pressed but reached bottom of current menu');\r\n                    event.preventDefault();\r\n                    return;\r\n                  }\r\n                  else {\r\n                    module.verbose('Down key pressed, changing active item');\r\n                    $item\r\n                      .removeClass(className.selected)\r\n                    ;\r\n                    $nextItem\r\n                      .addClass(className.selected)\r\n                    ;\r\n                    module.set.scrollPosition($nextItem);\r\n                  }\r\n                  event.preventDefault();\r\n                }\r\n\r\n                // page down (show next page)\r\n                if(pressedKey == keys.pageUp) {\r\n                  module.scrollPage('up');\r\n                  event.preventDefault();\r\n                }\r\n                if(pressedKey == keys.pageDown) {\r\n                  module.scrollPage('down');\r\n                  event.preventDefault();\r\n                }\r\n\r\n                // escape (close menu)\r\n                if(pressedKey == keys.escape) {\r\n                  module.verbose('Escape key pressed, closing dropdown');\r\n                  module.hide();\r\n                }\r\n\r\n              }\r\n              else {\r\n                // delimiter key\r\n                if(delimiterPressed) {\r\n                  event.preventDefault();\r\n                }\r\n                // down arrow (open menu)\r\n                if(pressedKey == keys.downArrow) {\r\n                  module.verbose('Down key pressed, showing dropdown');\r\n                  module.show();\r\n                  event.preventDefault();\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if( module.is.selection() && !module.is.search() ) {\r\n                module.set.selectedLetter( String.fromCharCode(pressedKey) );\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        trigger: {\r\n          change: function() {\r\n            var\r\n              events       = document.createEvent('HTMLEvents'),\r\n              inputElement = $input[0]\r\n            ;\r\n            if(inputElement) {\r\n              module.verbose('Triggering native change event');\r\n              events.initEvent('change', true, false);\r\n              inputElement.dispatchEvent(events);\r\n            }\r\n          }\r\n        },\r\n\r\n        determine: {\r\n          selectAction: function(text, value) {\r\n            module.verbose('Determining action', settings.action);\r\n            if( $.isFunction( module.action[settings.action] ) ) {\r\n              module.verbose('Triggering preset action', settings.action, text, value);\r\n              module.action[ settings.action ].call(this, text, value);\r\n            }\r\n            else if( $.isFunction(settings.action) ) {\r\n              module.verbose('Triggering user action', settings.action, text, value);\r\n              settings.action.call(this, text, value);\r\n            }\r\n            else {\r\n              module.error(error.action, settings.action);\r\n            }\r\n          },\r\n          eventInModule: function(event, callback) {\r\n            var\r\n              $target    = $(event.target),\r\n              inDocument = ($target.closest(document.documentElement).length > 0),\r\n              inModule   = ($target.closest($module).length > 0)\r\n            ;\r\n            callback = $.isFunction(callback)\r\n              ? callback\r\n              : function(){}\r\n            ;\r\n            if(inDocument && !inModule) {\r\n              module.verbose('Triggering event', callback);\r\n              callback();\r\n              return true;\r\n            }\r\n            else {\r\n              module.verbose('Event occurred in dropdown, canceling callback');\r\n              return false;\r\n            }\r\n          },\r\n          eventOnElement: function(event, callback) {\r\n            var\r\n              $target    = $(event.target),\r\n              $label     = $target.closest(selector.siblingLabel),\r\n              notOnLabel = ($module.find($label).length === 0),\r\n              notInMenu  = ($target.closest($menu).length === 0)\r\n            ;\r\n            callback = $.isFunction(callback)\r\n              ? callback\r\n              : function(){}\r\n            ;\r\n            if(notOnLabel && notInMenu) {\r\n              module.verbose('Triggering event', callback);\r\n              callback();\r\n              return true;\r\n            }\r\n            else {\r\n              module.verbose('Event occurred in dropdown menu, canceling callback');\r\n              return false;\r\n            }\r\n          }\r\n        },\r\n\r\n        action: {\r\n\r\n          nothing: function() {},\r\n\r\n          activate: function(text, value) {\r\n            value = (value !== undefined)\r\n              ? value\r\n              : text\r\n            ;\r\n            if( module.can.activate( $(this) ) ) {\r\n              module.set.selected(value, $(this));\r\n              if(module.is.multiple() && !module.is.allFiltered()) {\r\n                return;\r\n              }\r\n              else {\r\n                module.hideAndClear();\r\n              }\r\n            }\r\n          },\r\n\r\n          select: function(text, value) {\r\n            // mimics action.activate but does not select text\r\n            module.action.activate.call(this);\r\n          },\r\n\r\n          combo: function(text, value) {\r\n            value = (value !== undefined)\r\n              ? value\r\n              : text\r\n            ;\r\n            module.set.selected(value, $(this));\r\n            module.hideAndClear();\r\n          },\r\n\r\n          hide: function(text, value) {\r\n            module.set.value(value);\r\n            module.hideAndClear();\r\n          }\r\n\r\n        },\r\n\r\n        get: {\r\n          id: function() {\r\n            return id;\r\n          },\r\n          defaultText: function() {\r\n            return $module.data(metadata.defaultText);\r\n          },\r\n          defaultValue: function() {\r\n            return $module.data(metadata.defaultValue);\r\n          },\r\n          placeholderText: function() {\r\n            return $module.data(metadata.placeholderText) || '';\r\n          },\r\n          text: function() {\r\n            return $text.text();\r\n          },\r\n          query: function() {\r\n            return $.trim($search.val());\r\n          },\r\n          searchWidth: function(characterCount) {\r\n            return (characterCount * settings.glyphWidth) + 'em';\r\n          },\r\n          selectionCount: function() {\r\n            var\r\n              values = module.get.values(),\r\n              count\r\n            ;\r\n            count = ( module.is.multiple() )\r\n              ? $.isArray(values)\r\n                ? values.length\r\n                : 0\r\n              : (module.get.value() !== '')\r\n                ? 1\r\n                : 0\r\n            ;\r\n            return count;\r\n          },\r\n          transition: function($subMenu) {\r\n            return (settings.transition == 'auto')\r\n              ? module.is.upward($subMenu)\r\n                ? 'slide up'\r\n                : 'slide down'\r\n              : settings.transition\r\n            ;\r\n          },\r\n          userValues: function() {\r\n            var\r\n              values = module.get.values()\r\n            ;\r\n            if(!values) {\r\n              return false;\r\n            }\r\n            values = $.isArray(values)\r\n              ? values\r\n              : [values]\r\n            ;\r\n            return $.grep(values, function(value) {\r\n              return (module.get.item(value) === false);\r\n            });\r\n          },\r\n          uniqueArray: function(array) {\r\n            return $.grep(array, function (value, index) {\r\n                return $.inArray(value, array) === index;\r\n            });\r\n          },\r\n          caretPosition: function() {\r\n            var\r\n              input = $search.get(0),\r\n              range,\r\n              rangeLength\r\n            ;\r\n            if('selectionStart' in input) {\r\n              return input.selectionStart;\r\n            }\r\n            else if (document.selection) {\r\n              input.focus();\r\n              range       = document.selection.createRange();\r\n              rangeLength = range.text.length;\r\n              range.moveStart('character', -input.value.length);\r\n              return range.text.length - rangeLength;\r\n            }\r\n          },\r\n          value: function() {\r\n            var\r\n              value = ($input.length > 0)\r\n                ? $input.val()\r\n                : $module.data(metadata.value)\r\n            ;\r\n            // prevents placeholder element from being selected when multiple\r\n            if($.isArray(value) && value.length === 1 && value[0] === '') {\r\n              return '';\r\n            }\r\n            return value;\r\n          },\r\n          values: function() {\r\n            var\r\n              value = module.get.value()\r\n            ;\r\n            if(value === '') {\r\n              return '';\r\n            }\r\n            return ( !module.has.selectInput() && module.is.multiple() )\r\n              ? (typeof value == 'string') // delimited string\r\n                ? value.split(settings.delimiter)\r\n                : ''\r\n              : value\r\n            ;\r\n          },\r\n          remoteValues: function() {\r\n            var\r\n              values = module.get.values(),\r\n              remoteValues = false\r\n            ;\r\n            if(values) {\r\n              if(typeof values == 'string') {\r\n                values = [values];\r\n              }\r\n              remoteValues = {};\r\n              $.each(values, function(index, value) {\r\n                var\r\n                  name = module.read.remoteData(value)\r\n                ;\r\n                module.verbose('Restoring value from session data', name, value);\r\n                remoteValues[value] = (name)\r\n                  ? name\r\n                  : value\r\n                ;\r\n              });\r\n            }\r\n            return remoteValues;\r\n          },\r\n          choiceText: function($choice, preserveHTML) {\r\n            preserveHTML = (preserveHTML !== undefined)\r\n              ? preserveHTML\r\n              : settings.preserveHTML\r\n            ;\r\n            if($choice) {\r\n              if($choice.find(selector.menu).length > 0) {\r\n                module.verbose('Retreiving text of element with sub-menu');\r\n                $choice = $choice.clone();\r\n                $choice.find(selector.menu).remove();\r\n                $choice.find(selector.menuIcon).remove();\r\n              }\r\n              return ($choice.data(metadata.text) !== undefined)\r\n                ? $choice.data(metadata.text)\r\n                : (preserveHTML)\r\n                  ? $.trim($choice.html())\r\n                  : $.trim($choice.text())\r\n              ;\r\n            }\r\n          },\r\n          choiceValue: function($choice, choiceText) {\r\n            choiceText = choiceText || module.get.choiceText($choice);\r\n            if(!$choice) {\r\n              return false;\r\n            }\r\n            return ($choice.data(metadata.value) !== undefined)\r\n              ? String( $choice.data(metadata.value) )\r\n              : (typeof choiceText === 'string')\r\n                ? $.trim(choiceText.toLowerCase())\r\n                : String(choiceText)\r\n            ;\r\n          },\r\n          inputEvent: function() {\r\n            var\r\n              input = $search[0]\r\n            ;\r\n            if(input) {\r\n              return (input.oninput !== undefined)\r\n                ? 'input'\r\n                : (input.onpropertychange !== undefined)\r\n                  ? 'propertychange'\r\n                  : 'keyup'\r\n              ;\r\n            }\r\n            return false;\r\n          },\r\n          selectValues: function() {\r\n            var\r\n              select = {}\r\n            ;\r\n            select.values = [];\r\n            $module\r\n              .find('option')\r\n                .each(function() {\r\n                  var\r\n                    $option  = $(this),\r\n                    name     = $option.html(),\r\n                    disabled = $option.attr('disabled'),\r\n                    value    = ( $option.attr('value') !== undefined )\r\n                      ? $option.attr('value')\r\n                      : name\r\n                  ;\r\n                  if(settings.placeholder === 'auto' && value === '') {\r\n                    select.placeholder = name;\r\n                  }\r\n                  else {\r\n                    select.values.push({\r\n                      name     : name,\r\n                      value    : value,\r\n                      disabled : disabled\r\n                    });\r\n                  }\r\n                })\r\n            ;\r\n            if(settings.placeholder && settings.placeholder !== 'auto') {\r\n              module.debug('Setting placeholder value to', settings.placeholder);\r\n              select.placeholder = settings.placeholder;\r\n            }\r\n            if(settings.sortSelect) {\r\n              select.values.sort(function(a, b) {\r\n                return (a.name > b.name)\r\n                  ? 1\r\n                  : -1\r\n                ;\r\n              });\r\n              module.debug('Retrieved and sorted values from select', select);\r\n            }\r\n            else {\r\n              module.debug('Retreived values from select', select);\r\n            }\r\n            return select;\r\n          },\r\n          activeItem: function() {\r\n            return $item.filter('.'  + className.active);\r\n          },\r\n          selectedItem: function() {\r\n            var\r\n              $selectedItem = $item.not(selector.unselectable).filter('.'  + className.selected)\r\n            ;\r\n            return ($selectedItem.length > 0)\r\n              ? $selectedItem\r\n              : $item.eq(0)\r\n            ;\r\n          },\r\n          itemWithAdditions: function(value) {\r\n            var\r\n              $items       = module.get.item(value),\r\n              $userItems   = module.create.userChoice(value),\r\n              hasUserItems = ($userItems && $userItems.length > 0)\r\n            ;\r\n            if(hasUserItems) {\r\n              $items = ($items.length > 0)\r\n                ? $items.add($userItems)\r\n                : $userItems\r\n              ;\r\n            }\r\n            return $items;\r\n          },\r\n          item: function(value, strict) {\r\n            var\r\n              $selectedItem = false,\r\n              shouldSearch,\r\n              isMultiple\r\n            ;\r\n            value = (value !== undefined)\r\n              ? value\r\n              : ( module.get.values() !== undefined)\r\n                ? module.get.values()\r\n                : module.get.text()\r\n            ;\r\n            shouldSearch = (isMultiple)\r\n              ? (value.length > 0)\r\n              : (value !== undefined && value !== null)\r\n            ;\r\n            isMultiple = (module.is.multiple() && $.isArray(value));\r\n            strict     = (value === '' || value === 0)\r\n              ? true\r\n              : strict || false\r\n            ;\r\n            if(shouldSearch) {\r\n              $item\r\n                .each(function() {\r\n                  var\r\n                    $choice       = $(this),\r\n                    optionText    = module.get.choiceText($choice),\r\n                    optionValue   = module.get.choiceValue($choice, optionText)\r\n                  ;\r\n                  // safe early exit\r\n                  if(optionValue === null || optionValue === undefined) {\r\n                    return;\r\n                  }\r\n                  if(isMultiple) {\r\n                    if($.inArray( String(optionValue), value) !== -1 || $.inArray(optionText, value) !== -1) {\r\n                      $selectedItem = ($selectedItem)\r\n                        ? $selectedItem.add($choice)\r\n                        : $choice\r\n                      ;\r\n                    }\r\n                  }\r\n                  else if(strict) {\r\n                    module.verbose('Ambiguous dropdown value using strict type check', $choice, value);\r\n                    if( optionValue === value || optionText === value) {\r\n                      $selectedItem = $choice;\r\n                      return true;\r\n                    }\r\n                  }\r\n                  else {\r\n                    if( String(optionValue) == String(value) || optionText == value) {\r\n                      module.verbose('Found select item by value', optionValue, value);\r\n                      $selectedItem = $choice;\r\n                      return true;\r\n                    }\r\n                  }\r\n                })\r\n              ;\r\n            }\r\n            return $selectedItem;\r\n          }\r\n        },\r\n\r\n        check: {\r\n          maxSelections: function(selectionCount) {\r\n            if(settings.maxSelections) {\r\n              selectionCount = (selectionCount !== undefined)\r\n                ? selectionCount\r\n                : module.get.selectionCount()\r\n              ;\r\n              if(selectionCount >= settings.maxSelections) {\r\n                module.debug('Maximum selection count reached');\r\n                if(settings.useLabels) {\r\n                  $item.addClass(className.filtered);\r\n                  module.add.message(message.maxSelections);\r\n                }\r\n                return true;\r\n              }\r\n              else {\r\n                module.verbose('No longer at maximum selection count');\r\n                module.remove.message();\r\n                module.remove.filteredItem();\r\n                if(module.is.searchSelection()) {\r\n                  module.filterItems();\r\n                }\r\n                return false;\r\n              }\r\n            }\r\n            return true;\r\n          }\r\n        },\r\n\r\n        restore: {\r\n          defaults: function() {\r\n            module.clear();\r\n            module.restore.defaultText();\r\n            module.restore.defaultValue();\r\n          },\r\n          defaultText: function() {\r\n            var\r\n              defaultText     = module.get.defaultText(),\r\n              placeholderText = module.get.placeholderText\r\n            ;\r\n            if(defaultText === placeholderText) {\r\n              module.debug('Restoring default placeholder text', defaultText);\r\n              module.set.placeholderText(defaultText);\r\n            }\r\n            else {\r\n              module.debug('Restoring default text', defaultText);\r\n              module.set.text(defaultText);\r\n            }\r\n          },\r\n          defaultValue: function() {\r\n            var\r\n              defaultValue = module.get.defaultValue()\r\n            ;\r\n            if(defaultValue !== undefined) {\r\n              module.debug('Restoring default value', defaultValue);\r\n              if(defaultValue !== '') {\r\n                module.set.value(defaultValue);\r\n                module.set.selected();\r\n              }\r\n              else {\r\n                module.remove.activeItem();\r\n                module.remove.selectedItem();\r\n              }\r\n            }\r\n          },\r\n          labels: function() {\r\n            if(settings.allowAdditions) {\r\n              if(!settings.useLabels) {\r\n                module.error(error.labels);\r\n                settings.useLabels = true;\r\n              }\r\n              module.debug('Restoring selected values');\r\n              module.create.userLabels();\r\n            }\r\n            module.check.maxSelections();\r\n          },\r\n          selected: function() {\r\n            module.restore.values();\r\n            if(module.is.multiple()) {\r\n              module.debug('Restoring previously selected values and labels');\r\n              module.restore.labels();\r\n            }\r\n            else {\r\n              module.debug('Restoring previously selected values');\r\n            }\r\n          },\r\n          values: function() {\r\n            // prevents callbacks from occuring on initial load\r\n            module.set.initialLoad();\r\n            if(settings.apiSettings) {\r\n              if(settings.saveRemoteData) {\r\n                module.restore.remoteValues();\r\n              }\r\n              else {\r\n                module.clearValue();\r\n              }\r\n            }\r\n            else {\r\n              module.set.selected();\r\n            }\r\n            module.remove.initialLoad();\r\n          },\r\n          remoteValues: function() {\r\n            var\r\n              values = module.get.remoteValues()\r\n            ;\r\n            module.debug('Recreating selected from session data', values);\r\n            if(values) {\r\n              if( module.is.single() ) {\r\n                $.each(values, function(value, name) {\r\n                  module.set.text(name);\r\n                });\r\n              }\r\n              else {\r\n                $.each(values, function(value, name) {\r\n                  module.add.label(value, name);\r\n                });\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        read: {\r\n          remoteData: function(value) {\r\n            var\r\n              name\r\n            ;\r\n            if(window.Storage === undefined) {\r\n              module.error(error.noStorage);\r\n              return;\r\n            }\r\n            name = sessionStorage.getItem(value);\r\n            return (name !== undefined)\r\n              ? name\r\n              : false\r\n            ;\r\n          }\r\n        },\r\n\r\n        save: {\r\n          defaults: function() {\r\n            module.save.defaultText();\r\n            module.save.placeholderText();\r\n            module.save.defaultValue();\r\n          },\r\n          defaultValue: function() {\r\n            var\r\n              value = module.get.value()\r\n            ;\r\n            module.verbose('Saving default value as', value);\r\n            $module.data(metadata.defaultValue, value);\r\n          },\r\n          defaultText: function() {\r\n            var\r\n              text = module.get.text()\r\n            ;\r\n            module.verbose('Saving default text as', text);\r\n            $module.data(metadata.defaultText, text);\r\n          },\r\n          placeholderText: function() {\r\n            var\r\n              text\r\n            ;\r\n            if(settings.placeholder !== false && $text.hasClass(className.placeholder)) {\r\n              text = module.get.text();\r\n              module.verbose('Saving placeholder text as', text);\r\n              $module.data(metadata.placeholderText, text);\r\n            }\r\n          },\r\n          remoteData: function(name, value) {\r\n            if(window.Storage === undefined) {\r\n              module.error(error.noStorage);\r\n              return;\r\n            }\r\n            module.verbose('Saving remote data to session storage', value, name);\r\n            sessionStorage.setItem(value, name);\r\n          }\r\n        },\r\n\r\n        clear: function() {\r\n          if(module.is.multiple()) {\r\n            module.remove.labels();\r\n          }\r\n          else {\r\n            module.remove.activeItem();\r\n            module.remove.selectedItem();\r\n          }\r\n          module.set.placeholderText();\r\n          module.clearValue();\r\n        },\r\n\r\n        clearValue: function() {\r\n          module.set.value('');\r\n        },\r\n\r\n        scrollPage: function(direction, $selectedItem) {\r\n          var\r\n            $currentItem  = $selectedItem || module.get.selectedItem(),\r\n            $menu         = $currentItem.closest(selector.menu),\r\n            menuHeight    = $menu.outerHeight(),\r\n            currentScroll = $menu.scrollTop(),\r\n            itemHeight    = $item.eq(0).outerHeight(),\r\n            itemsPerPage  = Math.floor(menuHeight / itemHeight),\r\n            maxScroll     = $menu.prop('scrollHeight'),\r\n            newScroll     = (direction == 'up')\r\n              ? currentScroll - (itemHeight * itemsPerPage)\r\n              : currentScroll + (itemHeight * itemsPerPage),\r\n            $selectableItem = $item.not(selector.unselectable),\r\n            isWithinRange,\r\n            $nextSelectedItem,\r\n            elementIndex\r\n          ;\r\n          elementIndex      = (direction == 'up')\r\n            ? $selectableItem.index($currentItem) - itemsPerPage\r\n            : $selectableItem.index($currentItem) + itemsPerPage\r\n          ;\r\n          isWithinRange = (direction == 'up')\r\n            ? (elementIndex >= 0)\r\n            : (elementIndex < $selectableItem.length)\r\n          ;\r\n          $nextSelectedItem = (isWithinRange)\r\n            ? $selectableItem.eq(elementIndex)\r\n            : (direction == 'up')\r\n              ? $selectableItem.first()\r\n              : $selectableItem.last()\r\n          ;\r\n          if($nextSelectedItem.length > 0) {\r\n            module.debug('Scrolling page', direction, $nextSelectedItem);\r\n            $currentItem\r\n              .removeClass(className.selected)\r\n            ;\r\n            $nextSelectedItem\r\n              .addClass(className.selected)\r\n            ;\r\n            $menu\r\n              .scrollTop(newScroll)\r\n            ;\r\n          }\r\n        },\r\n\r\n        set: {\r\n          filtered: function() {\r\n            var\r\n              isMultiple       = module.is.multiple(),\r\n              isSearch         = module.is.searchSelection(),\r\n              isSearchMultiple = (isMultiple && isSearch),\r\n              searchValue      = (isSearch)\r\n                ? module.get.query()\r\n                : '',\r\n              hasSearchValue   = (typeof searchValue === 'string' && searchValue.length > 0),\r\n              searchWidth      = module.get.searchWidth(searchValue.length),\r\n              valueIsSet       = searchValue !== ''\r\n            ;\r\n            if(isMultiple && hasSearchValue) {\r\n              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);\r\n              $search.css('width', searchWidth);\r\n            }\r\n            if(hasSearchValue || (isSearchMultiple && valueIsSet)) {\r\n              module.verbose('Hiding placeholder text');\r\n              $text.addClass(className.filtered);\r\n            }\r\n            else if(!isMultiple || (isSearchMultiple && !valueIsSet)) {\r\n              module.verbose('Showing placeholder text');\r\n              $text.removeClass(className.filtered);\r\n            }\r\n          },\r\n          loading: function() {\r\n            $module.addClass(className.loading);\r\n          },\r\n          placeholderText: function(text) {\r\n            text = text || module.get.placeholderText();\r\n            module.debug('Setting placeholder text', text);\r\n            module.set.text(text);\r\n            $text.addClass(className.placeholder);\r\n          },\r\n          tabbable: function() {\r\n            if( module.has.search() ) {\r\n              module.debug('Added tabindex to searchable dropdown');\r\n              $search\r\n                .val('')\r\n                .attr('tabindex', 0)\r\n              ;\r\n              $menu\r\n                .attr('tabindex', -1)\r\n              ;\r\n            }\r\n            else {\r\n              module.debug('Added tabindex to dropdown');\r\n              if( $module.attr('tabindex') === undefined) {\r\n                $module\r\n                  .attr('tabindex', 0)\r\n                ;\r\n                $menu\r\n                  .attr('tabindex', -1)\r\n                ;\r\n              }\r\n            }\r\n          },\r\n          initialLoad: function() {\r\n            module.verbose('Setting initial load');\r\n            initialLoad = true;\r\n          },\r\n          activeItem: function($item) {\r\n            if( settings.allowAdditions && $item.filter(selector.addition).length > 0 ) {\r\n              $item.addClass(className.filtered);\r\n            }\r\n            else {\r\n              $item.addClass(className.active);\r\n            }\r\n          },\r\n          scrollPosition: function($item, forceScroll) {\r\n            var\r\n              edgeTolerance = 5,\r\n              $menu,\r\n              hasActive,\r\n              offset,\r\n              itemHeight,\r\n              itemOffset,\r\n              menuOffset,\r\n              menuScroll,\r\n              menuHeight,\r\n              abovePage,\r\n              belowPage\r\n            ;\r\n\r\n            $item       = $item || module.get.selectedItem();\r\n            $menu       = $item.closest(selector.menu);\r\n            hasActive   = ($item && $item.length > 0);\r\n            forceScroll = (forceScroll !== undefined)\r\n              ? forceScroll\r\n              : false\r\n            ;\r\n            if($item && $menu.length > 0 && hasActive) {\r\n              itemOffset = $item.position().top;\r\n\r\n              $menu.addClass(className.loading);\r\n              menuScroll = $menu.scrollTop();\r\n              menuOffset = $menu.offset().top;\r\n              itemOffset = $item.offset().top;\r\n              offset     = menuScroll - menuOffset + itemOffset;\r\n              if(!forceScroll) {\r\n                menuHeight = $menu.height();\r\n                belowPage  = menuScroll + menuHeight < (offset + edgeTolerance);\r\n                abovePage  = ((offset - edgeTolerance) < menuScroll);\r\n              }\r\n              module.debug('Scrolling to active item', offset);\r\n              if(forceScroll || abovePage || belowPage) {\r\n                $menu.scrollTop(offset);\r\n              }\r\n              $menu.removeClass(className.loading);\r\n            }\r\n          },\r\n          text: function(text) {\r\n            if(settings.action !== 'select') {\r\n              if(settings.action == 'combo') {\r\n                module.debug('Changing combo button text', text, $combo);\r\n                if(settings.preserveHTML) {\r\n                  $combo.html(text);\r\n                }\r\n                else {\r\n                  $combo.text(text);\r\n                }\r\n              }\r\n              else {\r\n                if(text !== module.get.placeholderText()) {\r\n                  $text.removeClass(className.placeholder);\r\n                }\r\n                module.debug('Changing text', text, $text);\r\n                $text\r\n                  .removeClass(className.filtered)\r\n                ;\r\n                if(settings.preserveHTML) {\r\n                  $text.html(text);\r\n                }\r\n                else {\r\n                  $text.text(text);\r\n                }\r\n              }\r\n            }\r\n          },\r\n          selectedLetter: function(letter) {\r\n            var\r\n              $selectedItem         = $item.filter('.' + className.selected),\r\n              alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),\r\n              $nextValue            = false,\r\n              $nextItem\r\n            ;\r\n            // check next of same letter\r\n            if(alreadySelectedLetter) {\r\n              $nextItem = $selectedItem.nextAll($item).eq(0);\r\n              if( module.has.firstLetter($nextItem, letter) ) {\r\n                $nextValue  = $nextItem;\r\n              }\r\n            }\r\n            // check all values\r\n            if(!$nextValue) {\r\n              $item\r\n                .each(function(){\r\n                  if(module.has.firstLetter($(this), letter)) {\r\n                    $nextValue = $(this);\r\n                    return false;\r\n                  }\r\n                })\r\n              ;\r\n            }\r\n            // set next value\r\n            if($nextValue) {\r\n              module.verbose('Scrolling to next value with letter', letter);\r\n              module.set.scrollPosition($nextValue);\r\n              $selectedItem.removeClass(className.selected);\r\n              $nextValue.addClass(className.selected);\r\n            }\r\n          },\r\n          direction: function($menu) {\r\n            if(settings.direction == 'auto') {\r\n              if(module.is.onScreen($menu)) {\r\n                module.remove.upward($menu);\r\n              }\r\n              else {\r\n                module.set.upward($menu);\r\n              }\r\n            }\r\n            else if(settings.direction == 'upward') {\r\n              module.set.upward($menu);\r\n            }\r\n          },\r\n          upward: function($menu) {\r\n            var $element = $menu || $module;\r\n            $element.addClass(className.upward);\r\n          },\r\n          value: function(value, text, $selected) {\r\n            var\r\n              hasInput     = ($input.length > 0),\r\n              isAddition   = !module.has.value(value),\r\n              currentValue = module.get.values(),\r\n              stringValue  = (value !== undefined)\r\n                ? String(value)\r\n                : value,\r\n              newValue\r\n            ;\r\n            if(hasInput) {\r\n              if(stringValue == currentValue) {\r\n                module.verbose('Skipping value update already same value', value, currentValue);\r\n                if(!module.is.initialLoad()) {\r\n                  return;\r\n                }\r\n              }\r\n\r\n              if( module.is.single() && module.has.selectInput() && module.can.extendSelect() ) {\r\n                module.debug('Adding user option', value);\r\n                module.add.optionValue(value);\r\n              }\r\n              module.debug('Updating input value', value, currentValue);\r\n              internalChange = true;\r\n              $input\r\n                .val(value)\r\n              ;\r\n              if(settings.fireOnInit === false && module.is.initialLoad()) {\r\n                module.debug('Input native change event ignored on initial load');\r\n              }\r\n              else {\r\n                module.trigger.change();\r\n              }\r\n              internalChange = false;\r\n            }\r\n            else {\r\n              module.verbose('Storing value in metadata', value, $input);\r\n              if(value !== currentValue) {\r\n                $module.data(metadata.value, stringValue);\r\n              }\r\n            }\r\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\r\n              module.verbose('No callback on initial load', settings.onChange);\r\n            }\r\n            else {\r\n              settings.onChange.call(element, value, text, $selected);\r\n            }\r\n          },\r\n          active: function() {\r\n            $module\r\n              .addClass(className.active)\r\n            ;\r\n          },\r\n          multiple: function() {\r\n            $module.addClass(className.multiple);\r\n          },\r\n          visible: function() {\r\n            $module.addClass(className.visible);\r\n          },\r\n          exactly: function(value, $selectedItem) {\r\n            module.debug('Setting selected to exact values');\r\n            module.clear();\r\n            module.set.selected(value, $selectedItem);\r\n          },\r\n          selected: function(value, $selectedItem) {\r\n            var\r\n              isMultiple = module.is.multiple(),\r\n              $userSelectedItem\r\n            ;\r\n            $selectedItem = (settings.allowAdditions)\r\n              ? $selectedItem || module.get.itemWithAdditions(value)\r\n              : $selectedItem || module.get.item(value)\r\n            ;\r\n            if(!$selectedItem) {\r\n              return;\r\n            }\r\n            module.debug('Setting selected menu item to', $selectedItem);\r\n            if(module.is.single()) {\r\n              module.remove.activeItem();\r\n              module.remove.selectedItem();\r\n            }\r\n            else if(settings.useLabels) {\r\n              module.remove.selectedItem();\r\n            }\r\n            // select each item\r\n            $selectedItem\r\n              .each(function() {\r\n                var\r\n                  $selected      = $(this),\r\n                  selectedText   = module.get.choiceText($selected),\r\n                  selectedValue  = module.get.choiceValue($selected, selectedText),\r\n\r\n                  isFiltered     = $selected.hasClass(className.filtered),\r\n                  isActive       = $selected.hasClass(className.active),\r\n                  isUserValue    = $selected.hasClass(className.addition),\r\n                  shouldAnimate  = (isMultiple && $selectedItem.length == 1)\r\n                ;\r\n                if(isMultiple) {\r\n                  if(!isActive || isUserValue) {\r\n                    if(settings.apiSettings && settings.saveRemoteData) {\r\n                      module.save.remoteData(selectedText, selectedValue);\r\n                    }\r\n                    if(settings.useLabels) {\r\n                      module.add.value(selectedValue, selectedText, $selected);\r\n                      module.add.label(selectedValue, selectedText, shouldAnimate);\r\n                      module.set.activeItem($selected);\r\n                      module.filterActive();\r\n                      module.select.nextAvailable($selectedItem);\r\n                    }\r\n                    else {\r\n                      module.add.value(selectedValue, selectedText, $selected);\r\n                      module.set.text(module.add.variables(message.count));\r\n                      module.set.activeItem($selected);\r\n                    }\r\n                  }\r\n                  else if(!isFiltered) {\r\n                    module.debug('Selected active value, removing label');\r\n                    module.remove.selected(selectedValue);\r\n                  }\r\n                }\r\n                else {\r\n                  if(settings.apiSettings && settings.saveRemoteData) {\r\n                    module.save.remoteData(selectedText, selectedValue);\r\n                  }\r\n                  module.set.text(selectedText);\r\n                  module.set.value(selectedValue, selectedText, $selected);\r\n                  $selected\r\n                    .addClass(className.active)\r\n                    .addClass(className.selected)\r\n                  ;\r\n                }\r\n              })\r\n            ;\r\n          }\r\n        },\r\n\r\n        add: {\r\n          label: function(value, text, shouldAnimate) {\r\n            var\r\n              $next  = module.is.searchSelection()\r\n                ? $search\r\n                : $text,\r\n              $label\r\n            ;\r\n            $label =  $('<a />')\r\n              .addClass(className.label)\r\n              .attr('data-value', value)\r\n              .html(templates.label(value, text))\r\n            ;\r\n            $label = settings.onLabelCreate.call($label, value, text);\r\n\r\n            if(module.has.label(value)) {\r\n              module.debug('Label already exists, skipping', value);\r\n              return;\r\n            }\r\n            if(settings.label.variation) {\r\n              $label.addClass(settings.label.variation);\r\n            }\r\n            if(shouldAnimate === true) {\r\n              module.debug('Animating in label', $label);\r\n              $label\r\n                .addClass(className.hidden)\r\n                .insertBefore($next)\r\n                .transition(settings.label.transition, settings.label.duration)\r\n              ;\r\n            }\r\n            else {\r\n              module.debug('Adding selection label', $label);\r\n              $label\r\n                .insertBefore($next)\r\n              ;\r\n            }\r\n          },\r\n          message: function(message) {\r\n            var\r\n              $message = $menu.children(selector.message),\r\n              html     = settings.templates.message(module.add.variables(message))\r\n            ;\r\n            if($message.length > 0) {\r\n              $message\r\n                .html(html)\r\n              ;\r\n            }\r\n            else {\r\n              $message = $('<div/>')\r\n                .html(html)\r\n                .addClass(className.message)\r\n                .appendTo($menu)\r\n              ;\r\n            }\r\n          },\r\n          optionValue: function(value) {\r\n            var\r\n              $option   = $input.find('option[value=\"' + value + '\"]'),\r\n              hasOption = ($option.length > 0)\r\n            ;\r\n            if(hasOption) {\r\n              return;\r\n            }\r\n            // temporarily disconnect observer\r\n            if(selectObserver) {\r\n              selectObserver.disconnect();\r\n              module.verbose('Temporarily disconnecting mutation observer', value);\r\n            }\r\n            if( module.is.single() ) {\r\n              module.verbose('Removing previous user addition');\r\n              $input.find('option.' + className.addition).remove();\r\n            }\r\n            $('<option/>')\r\n              .prop('value', value)\r\n              .addClass(className.addition)\r\n              .html(value)\r\n              .appendTo($input)\r\n            ;\r\n            module.verbose('Adding user addition as an <option>', value);\r\n            if(selectObserver) {\r\n              selectObserver.observe($input[0], {\r\n                childList : true,\r\n                subtree   : true\r\n              });\r\n            }\r\n          },\r\n          userSuggestion: function(value) {\r\n            var\r\n              $addition         = $menu.children(selector.addition),\r\n              $existingItem     = module.get.item(value),\r\n              alreadyHasValue   = $existingItem && $existingItem.not(selector.addition).length,\r\n              hasUserSuggestion = $addition.length > 0,\r\n              html\r\n            ;\r\n            if(settings.useLabels && module.has.maxSelections()) {\r\n              return;\r\n            }\r\n            if(value === '' || alreadyHasValue) {\r\n              $addition.remove();\r\n              return;\r\n            }\r\n            $item\r\n              .removeClass(className.selected)\r\n            ;\r\n            if(hasUserSuggestion) {\r\n              html = settings.templates.addition( module.add.variables(message.addResult, value) );\r\n              $addition\r\n                .html(html)\r\n                .attr('data-' + metadata.value, value)\r\n                .attr('data-' + metadata.text, value)\r\n                .removeClass(className.filtered)\r\n                .addClass(className.selected)\r\n              ;\r\n              module.verbose('Replacing user suggestion with new value', $addition);\r\n            }\r\n            else {\r\n              $addition = module.create.userChoice(value);\r\n              $addition\r\n                .prependTo($menu)\r\n                .addClass(className.selected)\r\n              ;\r\n              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);\r\n            }\r\n          },\r\n          variables: function(message, term) {\r\n            var\r\n              hasCount    = (message.search('{count}') !== -1),\r\n              hasMaxCount = (message.search('{maxCount}') !== -1),\r\n              hasTerm     = (message.search('{term}') !== -1),\r\n              values,\r\n              count,\r\n              query\r\n            ;\r\n            module.verbose('Adding templated variables to message', message);\r\n            if(hasCount) {\r\n              count  = module.get.selectionCount();\r\n              message = message.replace('{count}', count);\r\n            }\r\n            if(hasMaxCount) {\r\n              count  = module.get.selectionCount();\r\n              message = message.replace('{maxCount}', settings.maxSelections);\r\n            }\r\n            if(hasTerm) {\r\n              query   = term || module.get.query();\r\n              message = message.replace('{term}', query);\r\n            }\r\n            return message;\r\n          },\r\n          value: function(addedValue, addedText, $selectedItem) {\r\n            var\r\n              currentValue = module.get.values(),\r\n              newValue\r\n            ;\r\n            if(addedValue === '') {\r\n              module.debug('Cannot select blank values from multiselect');\r\n              return;\r\n            }\r\n            // extend current array\r\n            if($.isArray(currentValue)) {\r\n              newValue = currentValue.concat([addedValue]);\r\n              newValue = module.get.uniqueArray(newValue);\r\n            }\r\n            else {\r\n              newValue = [addedValue];\r\n            }\r\n            // add values\r\n            if( module.has.selectInput() ) {\r\n              if(module.can.extendSelect()) {\r\n                module.debug('Adding value to select', addedValue, newValue, $input);\r\n                module.add.optionValue(addedValue);\r\n              }\r\n            }\r\n            else {\r\n              newValue = newValue.join(settings.delimiter);\r\n              module.debug('Setting hidden input to delimited value', newValue, $input);\r\n            }\r\n\r\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\r\n              module.verbose('Skipping onadd callback on initial load', settings.onAdd);\r\n            }\r\n            else {\r\n              settings.onAdd.call(element, addedValue, addedText, $selectedItem);\r\n            }\r\n            module.set.value(newValue, addedValue, addedText, $selectedItem);\r\n            module.check.maxSelections();\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          active: function() {\r\n            $module.removeClass(className.active);\r\n          },\r\n          activeLabel: function() {\r\n            $module.find(selector.label).removeClass(className.active);\r\n          },\r\n          loading: function() {\r\n            $module.removeClass(className.loading);\r\n          },\r\n          initialLoad: function() {\r\n            initialLoad = false;\r\n          },\r\n          upward: function($menu) {\r\n            var $element = $menu || $module;\r\n            $element.removeClass(className.upward);\r\n          },\r\n          visible: function() {\r\n            $module.removeClass(className.visible);\r\n          },\r\n          activeItem: function() {\r\n            $item.removeClass(className.active);\r\n          },\r\n          filteredItem: function() {\r\n            if(settings.useLabels && module.has.maxSelections() ) {\r\n              return;\r\n            }\r\n            if(settings.useLabels && module.is.multiple()) {\r\n              $item.not('.' + className.active).removeClass(className.filtered);\r\n            }\r\n            else {\r\n              $item.removeClass(className.filtered);\r\n            }\r\n          },\r\n          optionValue: function(value) {\r\n            var\r\n              $option   = $input.find('option[value=\"' + value + '\"]'),\r\n              hasOption = ($option.length > 0)\r\n            ;\r\n            if(!hasOption || !$option.hasClass(className.addition)) {\r\n              return;\r\n            }\r\n            // temporarily disconnect observer\r\n            if(selectObserver) {\r\n              selectObserver.disconnect();\r\n              module.verbose('Temporarily disconnecting mutation observer', value);\r\n            }\r\n            $option.remove();\r\n            module.verbose('Removing user addition as an <option>', value);\r\n            if(selectObserver) {\r\n              selectObserver.observe($input[0], {\r\n                childList : true,\r\n                subtree   : true\r\n              });\r\n            }\r\n          },\r\n          message: function() {\r\n            $menu.children(selector.message).remove();\r\n          },\r\n          searchTerm: function() {\r\n            module.verbose('Cleared search term');\r\n            $search.val('');\r\n            module.set.filtered();\r\n          },\r\n          selected: function(value, $selectedItem) {\r\n            $selectedItem = (settings.allowAdditions)\r\n              ? $selectedItem || module.get.itemWithAdditions(value)\r\n              : $selectedItem || module.get.item(value)\r\n            ;\r\n\r\n            if(!$selectedItem) {\r\n              return false;\r\n            }\r\n\r\n            $selectedItem\r\n              .each(function() {\r\n                var\r\n                  $selected     = $(this),\r\n                  selectedText  = module.get.choiceText($selected),\r\n                  selectedValue = module.get.choiceValue($selected, selectedText)\r\n                ;\r\n                if(module.is.multiple()) {\r\n                  if(settings.useLabels) {\r\n                    module.remove.value(selectedValue, selectedText, $selected);\r\n                    module.remove.label(selectedValue);\r\n                  }\r\n                  else {\r\n                    module.remove.value(selectedValue, selectedText, $selected);\r\n                    if(module.get.selectionCount() === 0) {\r\n                      module.set.placeholderText();\r\n                    }\r\n                    else {\r\n                      module.set.text(module.add.variables(message.count));\r\n                    }\r\n                  }\r\n                }\r\n                else {\r\n                  module.remove.value(selectedValue, selectedText, $selected);\r\n                }\r\n                $selected\r\n                  .removeClass(className.filtered)\r\n                  .removeClass(className.active)\r\n                ;\r\n                if(settings.useLabels) {\r\n                  $selected.removeClass(className.selected);\r\n                }\r\n              })\r\n            ;\r\n          },\r\n          selectedItem: function() {\r\n            $item.removeClass(className.selected);\r\n          },\r\n          value: function(removedValue, removedText, $removedItem) {\r\n            var\r\n              values = module.get.values(),\r\n              newValue\r\n            ;\r\n            if( module.has.selectInput() ) {\r\n              module.verbose('Input is <select> removing selected option', removedValue);\r\n              newValue = module.remove.arrayValue(removedValue, values);\r\n              module.remove.optionValue(removedValue);\r\n            }\r\n            else {\r\n              module.verbose('Removing from delimited values', removedValue);\r\n              newValue = module.remove.arrayValue(removedValue, values);\r\n              newValue = newValue.join(settings.delimiter);\r\n            }\r\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\r\n              module.verbose('No callback on initial load', settings.onRemove);\r\n            }\r\n            else {\r\n              settings.onRemove.call(element, removedValue, removedText, $removedItem);\r\n            }\r\n            module.set.value(newValue, removedText, $removedItem);\r\n            module.check.maxSelections();\r\n          },\r\n          arrayValue: function(removedValue, values) {\r\n            if( !$.isArray(values) ) {\r\n              values = [values];\r\n            }\r\n            values = $.grep(values, function(value){\r\n              return (removedValue != value);\r\n            });\r\n            module.verbose('Removed value from delimited string', removedValue, values);\r\n            return values;\r\n          },\r\n          label: function(value, shouldAnimate) {\r\n            var\r\n              $labels       = $module.find(selector.label),\r\n              $removedLabel = $labels.filter('[data-value=\"' + value +'\"]')\r\n            ;\r\n            module.verbose('Removing label', $removedLabel);\r\n            $removedLabel.remove();\r\n          },\r\n          activeLabels: function($activeLabels) {\r\n            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);\r\n            module.verbose('Removing active label selections', $activeLabels);\r\n            module.remove.labels($activeLabels);\r\n          },\r\n          labels: function($labels) {\r\n            $labels = $labels || $module.find(selector.label);\r\n            module.verbose('Removing labels', $labels);\r\n            $labels\r\n              .each(function(){\r\n                var\r\n                  $label      = $(this),\r\n                  value       = $label.data(metadata.value),\r\n                  stringValue = (value !== undefined)\r\n                    ? String(value)\r\n                    : value,\r\n                  isUserValue = module.is.userValue(stringValue)\r\n                ;\r\n                if(settings.onLabelRemove.call($label, value) === false) {\r\n                  module.debug('Label remove callback cancelled removal');\r\n                  return;\r\n                }\r\n                if(isUserValue) {\r\n                  module.remove.value(stringValue);\r\n                  module.remove.label(stringValue);\r\n                }\r\n                else {\r\n                  // selected will also remove label\r\n                  module.remove.selected(stringValue);\r\n                }\r\n              })\r\n            ;\r\n          },\r\n          tabbable: function() {\r\n            if( module.has.search() ) {\r\n              module.debug('Searchable dropdown initialized');\r\n              $search\r\n                .removeAttr('tabindex')\r\n              ;\r\n              $menu\r\n                .removeAttr('tabindex')\r\n              ;\r\n            }\r\n            else {\r\n              module.debug('Simple selection dropdown initialized');\r\n              $module\r\n                .removeAttr('tabindex')\r\n              ;\r\n              $menu\r\n                .removeAttr('tabindex')\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        has: {\r\n          search: function() {\r\n            return ($search.length > 0);\r\n          },\r\n          selectInput: function() {\r\n            return ( $input.is('select') );\r\n          },\r\n          firstLetter: function($item, letter) {\r\n            var\r\n              text,\r\n              firstLetter\r\n            ;\r\n            if(!$item || $item.length === 0 || typeof letter !== 'string') {\r\n              return false;\r\n            }\r\n            text        = module.get.choiceText($item, false);\r\n            letter      = letter.toLowerCase();\r\n            firstLetter = String(text).charAt(0).toLowerCase();\r\n            return (letter == firstLetter);\r\n          },\r\n          input: function() {\r\n            return ($input.length > 0);\r\n          },\r\n          items: function() {\r\n            return ($item.length > 0);\r\n          },\r\n          menu: function() {\r\n            return ($menu.length > 0);\r\n          },\r\n          message: function() {\r\n            return ($menu.children(selector.message).length !== 0);\r\n          },\r\n          label: function(value) {\r\n            var\r\n              $labels = $module.find(selector.label)\r\n            ;\r\n            return ($labels.filter('[data-value=\"' + value +'\"]').length > 0);\r\n          },\r\n          maxSelections: function() {\r\n            return (settings.maxSelections && module.get.selectionCount() >= settings.maxSelections);\r\n          },\r\n          allResultsFiltered: function() {\r\n            return ($item.filter(selector.unselectable).length === $item.length);\r\n          },\r\n          query: function() {\r\n            return (module.get.query() !== '');\r\n          },\r\n          value: function(value) {\r\n            var\r\n              values   = module.get.values(),\r\n              hasValue = $.isArray(values)\r\n               ? values && ($.inArray(value, values) !== -1)\r\n               : (values == value)\r\n            ;\r\n            return (hasValue)\r\n              ? true\r\n              : false\r\n            ;\r\n          }\r\n        },\r\n\r\n        is: {\r\n          active: function() {\r\n            return $module.hasClass(className.active);\r\n          },\r\n          alreadySetup: function() {\r\n            return ($module.is('select') && $module.parent(selector.dropdown).length > 0  && $module.prev().length === 0);\r\n          },\r\n          animating: function($subMenu) {\r\n            return ($subMenu)\r\n              ? $subMenu.transition && $subMenu.transition('is animating')\r\n              : $menu.transition    && $menu.transition('is animating')\r\n            ;\r\n          },\r\n          disabled: function() {\r\n            return $module.hasClass(className.disabled);\r\n          },\r\n          focused: function() {\r\n            return (document.activeElement === $module[0]);\r\n          },\r\n          focusedOnSearch: function() {\r\n            return (document.activeElement === $search[0]);\r\n          },\r\n          allFiltered: function() {\r\n            return( (module.is.multiple() || module.has.search()) && !module.has.message() && module.has.allResultsFiltered() );\r\n          },\r\n          hidden: function($subMenu) {\r\n            return !module.is.visible($subMenu);\r\n          },\r\n          initialLoad: function() {\r\n            return initialLoad;\r\n          },\r\n          onScreen: function($subMenu) {\r\n            var\r\n              $currentMenu   = $subMenu || $menu,\r\n              canOpenDownward = true,\r\n              onScreen = {},\r\n              calculations\r\n            ;\r\n            $currentMenu.addClass(className.loading);\r\n            calculations = {\r\n              context: {\r\n                scrollTop : $context.scrollTop(),\r\n                height    : $context.outerHeight()\r\n              },\r\n              menu : {\r\n                offset: $currentMenu.offset(),\r\n                height: $currentMenu.outerHeight()\r\n              }\r\n            };\r\n            onScreen = {\r\n              above : (calculations.context.scrollTop) <= calculations.menu.offset.top - calculations.menu.height,\r\n              below : (calculations.context.scrollTop + calculations.context.height) >= calculations.menu.offset.top + calculations.menu.height\r\n            };\r\n            if(onScreen.below) {\r\n              module.verbose('Dropdown can fit in context downward', onScreen);\r\n              canOpenDownward = true;\r\n            }\r\n            else if(!onScreen.below && !onScreen.above) {\r\n              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);\r\n              canOpenDownward = true;\r\n            }\r\n            else {\r\n              module.verbose('Dropdown cannot fit below, opening upward', onScreen);\r\n              canOpenDownward = false;\r\n            }\r\n            $currentMenu.removeClass(className.loading);\r\n            return canOpenDownward;\r\n          },\r\n          inObject: function(needle, object) {\r\n            var\r\n              found = false\r\n            ;\r\n            $.each(object, function(index, property) {\r\n              if(property == needle) {\r\n                found = true;\r\n                return true;\r\n              }\r\n            });\r\n            return found;\r\n          },\r\n          multiple: function() {\r\n            return $module.hasClass(className.multiple);\r\n          },\r\n          single: function() {\r\n            return !module.is.multiple();\r\n          },\r\n          selectMutation: function(mutations) {\r\n            var\r\n              selectChanged = false\r\n            ;\r\n            $.each(mutations, function(index, mutation) {\r\n              if(mutation.target && $(mutation.target).is('select')) {\r\n                selectChanged = true;\r\n                return true;\r\n              }\r\n            });\r\n            return selectChanged;\r\n          },\r\n          search: function() {\r\n            return $module.hasClass(className.search);\r\n          },\r\n          searchSelection: function() {\r\n            return ( module.has.search() && $search.parent(selector.dropdown).length === 1 );\r\n          },\r\n          selection: function() {\r\n            return $module.hasClass(className.selection);\r\n          },\r\n          userValue: function(value) {\r\n            return ($.inArray(value, module.get.userValues()) !== -1);\r\n          },\r\n          upward: function($menu) {\r\n            var $element = $menu || $module;\r\n            return $element.hasClass(className.upward);\r\n          },\r\n          visible: function($subMenu) {\r\n            return ($subMenu)\r\n              ? $subMenu.hasClass(className.visible)\r\n              : $menu.hasClass(className.visible)\r\n            ;\r\n          }\r\n        },\r\n\r\n        can: {\r\n          activate: function($item) {\r\n            if(settings.useLabels) {\r\n              return true;\r\n            }\r\n            if(!module.has.maxSelections()) {\r\n              return true;\r\n            }\r\n            if(module.has.maxSelections() && $item.hasClass(className.active)) {\r\n              return true;\r\n            }\r\n            return false;\r\n          },\r\n          click: function() {\r\n            return (hasTouch || settings.on == 'click');\r\n          },\r\n          extendSelect: function() {\r\n            return settings.allowAdditions || settings.apiSettings;\r\n          },\r\n          show: function() {\r\n            return !module.is.disabled() && (module.has.items() || module.has.message());\r\n          },\r\n          useAPI: function() {\r\n            return $.fn.api !== undefined;\r\n          }\r\n        },\r\n\r\n        animate: {\r\n          show: function(callback, $subMenu) {\r\n            var\r\n              $currentMenu = $subMenu || $menu,\r\n              start = ($subMenu)\r\n                ? function() {}\r\n                : function() {\r\n                  module.hideSubMenus();\r\n                  module.hideOthers();\r\n                  module.set.active();\r\n                },\r\n              transition\r\n            ;\r\n            callback = $.isFunction(callback)\r\n              ? callback\r\n              : function(){}\r\n            ;\r\n            module.verbose('Doing menu show animation', $currentMenu);\r\n            module.set.direction($subMenu);\r\n            transition = module.get.transition($subMenu);\r\n            if( module.is.selection() ) {\r\n              module.set.scrollPosition(module.get.selectedItem(), true);\r\n            }\r\n            if( module.is.hidden($currentMenu) || module.is.animating($currentMenu) ) {\r\n              if(transition == 'none') {\r\n                start();\r\n                $currentMenu.transition('show');\r\n                callback.call(element);\r\n              }\r\n              else if($.fn.transition !== undefined && $module.transition('is supported')) {\r\n                $currentMenu\r\n                  .transition({\r\n                    animation  : transition + ' in',\r\n                    debug      : settings.debug,\r\n                    verbose    : settings.verbose,\r\n                    duration   : settings.duration,\r\n                    queue      : true,\r\n                    onStart    : start,\r\n                    onComplete : function() {\r\n                      callback.call(element);\r\n                    }\r\n                  })\r\n                ;\r\n              }\r\n              else {\r\n                module.error(error.noTransition, transition);\r\n              }\r\n            }\r\n          },\r\n          hide: function(callback, $subMenu) {\r\n            var\r\n              $currentMenu = $subMenu || $menu,\r\n              duration = ($subMenu)\r\n                ? (settings.duration * 0.9)\r\n                : settings.duration,\r\n              start = ($subMenu)\r\n                ? function() {}\r\n                : function() {\r\n                  if( module.can.click() ) {\r\n                    module.unbind.intent();\r\n                  }\r\n                  module.remove.active();\r\n                },\r\n              transition = module.get.transition($subMenu)\r\n            ;\r\n            callback = $.isFunction(callback)\r\n              ? callback\r\n              : function(){}\r\n            ;\r\n            if( module.is.visible($currentMenu) || module.is.animating($currentMenu) ) {\r\n              module.verbose('Doing menu hide animation', $currentMenu);\r\n\r\n              if(transition == 'none') {\r\n                start();\r\n                $currentMenu.transition('hide');\r\n                callback.call(element);\r\n              }\r\n              else if($.fn.transition !== undefined && $module.transition('is supported')) {\r\n                $currentMenu\r\n                  .transition({\r\n                    animation  : transition + ' out',\r\n                    duration   : settings.duration,\r\n                    debug      : settings.debug,\r\n                    verbose    : settings.verbose,\r\n                    queue      : true,\r\n                    onStart    : start,\r\n                    onComplete : function() {\r\n                      if(settings.direction == 'auto') {\r\n                        module.remove.upward($subMenu);\r\n                      }\r\n                      callback.call(element);\r\n                    }\r\n                  })\r\n                ;\r\n              }\r\n              else {\r\n                module.error(error.transition);\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        hideAndClear: function() {\r\n          module.remove.searchTerm();\r\n          if( module.has.maxSelections() ) {\r\n            return;\r\n          }\r\n          if(module.has.search()) {\r\n            module.hide(function() {\r\n              module.remove.filteredItem();\r\n            });\r\n          }\r\n          else {\r\n            module.hide();\r\n          }\r\n        },\r\n\r\n        delay: {\r\n          show: function() {\r\n            module.verbose('Delaying show event to ensure user intent');\r\n            clearTimeout(module.timer);\r\n            module.timer = setTimeout(module.show, settings.delay.show);\r\n          },\r\n          hide: function() {\r\n            module.verbose('Delaying hide event to ensure user intent');\r\n            clearTimeout(module.timer);\r\n            module.timer = setTimeout(module.hide, settings.delay.hide);\r\n          }\r\n        },\r\n\r\n        escape: {\r\n          regExp: function(text) {\r\n            text =  String(text);\r\n            return text.replace(regExp.escape, '\\\\$&');\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : $allModules\r\n  ;\r\n};\r\n\r\n$.fn.dropdown.settings = {\r\n\r\n  debug                  : false,\r\n  verbose                : false,\r\n  performance            : true,\r\n\r\n  on                     : 'click',    // what event should show menu action on item selection\r\n  action                 : 'activate', // action on item selection (nothing, activate, select, combo, hide, function(){})\r\n\r\n\r\n  apiSettings            : false,\r\n  saveRemoteData         : true,      // Whether remote name/value pairs should be stored in sessionStorage to allow remote data to be restored on page refresh\r\n  throttle               : 200,       // How long to wait after last user input to search remotely\r\n\r\n  context                : window,      // Context to use when determining if on screen\r\n  direction              : 'auto',     // Whether dropdown should always open in one direction\r\n  keepOnScreen           : true,       // Whether dropdown should check whether it is on screen before showing\r\n\r\n  match                  : 'both',     // what to match against with search selection (both, text, or label)\r\n  fullTextSearch         : false,      // search anywhere in value\r\n\r\n  placeholder            : 'auto',     // whether to convert blank <select> values to placeholder text\r\n  preserveHTML           : true,       // preserve html when selecting value\r\n  sortSelect             : false,      // sort selection on init\r\n\r\n  forceSelection         : true,       // force a choice on blur with search selection\r\n  allowAdditions         : false,      // whether multiple select should allow user added values\r\n\r\n  maxSelections          : false,      // When set to a number limits the number of selections to this count\r\n  useLabels              : true,       // whether multiple select should filter currently active selections from choices\r\n  delimiter              : ',',        // when multiselect uses normal <input> the values will be delimited with this character\r\n\r\n  showOnFocus            : true,       // show menu on focus\r\n  allowTab               : true,       // add tabindex to element\r\n  allowCategorySelection : false,      // allow elements with sub-menus to be selected\r\n\r\n  fireOnInit             : false,      // Whether callbacks should fire when initializing dropdown values\r\n\r\n  transition             : 'auto',     // auto transition will slide down or up based on direction\r\n  duration               : 200,        // duration of transition\r\n\r\n  glyphWidth             : 1.0714,     // widest glyph width in em (W is 1.0714 em) used to calculate multiselect input width\r\n\r\n  // label settings on multi-select\r\n  label: {\r\n    transition : 'scale',\r\n    duration   : 200,\r\n    variation  : false\r\n  },\r\n\r\n  // delay before event\r\n  delay : {\r\n    hide   : 300,\r\n    show   : 200,\r\n    search : 20,\r\n    touch  : 50\r\n  },\r\n\r\n  /* Callbacks */\r\n  onChange      : function(value, text, $selected){},\r\n  onAdd         : function(value, text, $selected){},\r\n  onRemove      : function(value, text, $selected){},\r\n\r\n  onLabelSelect : function($selectedLabels){},\r\n  onLabelCreate : function(value, text) { return $(this); },\r\n  onLabelRemove : function(value) { return true; },\r\n  onNoResults   : function(searchTerm) { return true; },\r\n  onShow        : function(){},\r\n  onHide        : function(){},\r\n\r\n  /* Component */\r\n  name           : 'Dropdown',\r\n  namespace      : 'dropdown',\r\n\r\n  message: {\r\n    addResult     : 'Add <b>{term}</b>',\r\n    count         : '{count} selected',\r\n    maxSelections : 'Max {maxCount} selections',\r\n    noResults     : 'No results found.',\r\n    serverError   : 'There was an error contacting the server'\r\n  },\r\n\r\n  error : {\r\n    action          : 'You called a dropdown action that was not defined',\r\n    alreadySetup    : 'Once a select has been initialized behaviors must be called on the created ui dropdown',\r\n    labels          : 'Allowing user additions currently requires the use of labels.',\r\n    missingMultiple : '<select> requires multiple property to be set to correctly preserve multiple values',\r\n    method          : 'The method you called is not defined.',\r\n    noAPI           : 'The API module is required to load resources remotely',\r\n    noStorage       : 'Saving remote data requires session storage',\r\n    noTransition    : 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>'\r\n  },\r\n\r\n  regExp : {\r\n    escape   : /[-[\\]{}()*+?.,\\\\^$|#\\s]/g,\r\n  },\r\n\r\n  metadata : {\r\n    defaultText     : 'defaultText',\r\n    defaultValue    : 'defaultValue',\r\n    placeholderText : 'placeholder',\r\n    text            : 'text',\r\n    value           : 'value'\r\n  },\r\n\r\n  // property names for remote query\r\n  fields: {\r\n    remoteValues : 'results', // grouping for api results\r\n    values       : 'values', // grouping for all dropdown values\r\n    name         : 'name',   // displayed dropdown text\r\n    value        : 'value'   // actual dropdown value\r\n  },\r\n\r\n  keys : {\r\n    backspace  : 8,\r\n    delimiter  : 188, // comma\r\n    deleteKey  : 46,\r\n    enter      : 13,\r\n    escape     : 27,\r\n    pageUp     : 33,\r\n    pageDown   : 34,\r\n    leftArrow  : 37,\r\n    upArrow    : 38,\r\n    rightArrow : 39,\r\n    downArrow  : 40\r\n  },\r\n\r\n  selector : {\r\n    addition     : '.addition',\r\n    dropdown     : '.ui.dropdown',\r\n    icon         : '> .dropdown.icon',\r\n    input        : '> input[type=\"hidden\"], > select',\r\n    item         : '.item',\r\n    label        : '> .label',\r\n    remove       : '> .label > .delete.icon',\r\n    siblingLabel : '.label',\r\n    menu         : '.menu',\r\n    message      : '.message',\r\n    menuIcon     : '.dropdown.icon',\r\n    search       : 'input.search, .menu > .search > input',\r\n    text         : '> .text:not(.icon)',\r\n    unselectable : '.disabled, .filtered'\r\n  },\r\n\r\n  className : {\r\n    active      : 'active',\r\n    addition    : 'addition',\r\n    animating   : 'animating',\r\n    disabled    : 'disabled',\r\n    dropdown    : 'ui dropdown',\r\n    filtered    : 'filtered',\r\n    hidden      : 'hidden transition',\r\n    item        : 'item',\r\n    label       : 'ui label',\r\n    loading     : 'loading',\r\n    menu        : 'menu',\r\n    message     : 'message',\r\n    multiple    : 'multiple',\r\n    placeholder : 'default',\r\n    search      : 'search',\r\n    selected    : 'selected',\r\n    selection   : 'selection',\r\n    upward      : 'upward',\r\n    visible     : 'visible'\r\n  }\r\n\r\n};\r\n\r\n/* Templates */\r\n$.fn.dropdown.settings.templates = {\r\n\r\n  // generates dropdown from select values\r\n  dropdown: function(select) {\r\n    var\r\n      placeholder = select.placeholder || false,\r\n      values      = select.values || {},\r\n      html        = ''\r\n    ;\r\n    html +=  '<i class=\"dropdown icon\"></i>';\r\n    if(select.placeholder) {\r\n      html += '<div class=\"default text\">' + placeholder + '</div>';\r\n    }\r\n    else {\r\n      html += '<div class=\"text\"></div>';\r\n    }\r\n    html += '<div class=\"menu\">';\r\n    $.each(select.values, function(index, option) {\r\n      html += (option.disabled)\r\n        ? '<div class=\"disabled item\" data-value=\"' + option.value + '\">' + option.name + '</div>'\r\n        : '<div class=\"item\" data-value=\"' + option.value + '\">' + option.name + '</div>'\r\n      ;\r\n    });\r\n    html += '</div>';\r\n    return html;\r\n  },\r\n\r\n  // generates just menu from select\r\n  menu: function(response, fields) {\r\n    var\r\n      values = response[fields.values] || {},\r\n      html   = ''\r\n    ;\r\n    $.each(values, function(index, option) {\r\n      html += '<div class=\"item\" data-value=\"' + option[fields.value] + '\">' + option[fields.name] + '</div>';\r\n    });\r\n    return html;\r\n  },\r\n\r\n  // generates label for multiselect\r\n  label: function(value, text) {\r\n    return text + '<i class=\"delete icon\"></i>';\r\n  },\r\n\r\n\r\n  // generates messages like \"No results\"\r\n  message: function(message) {\r\n    return message;\r\n  },\r\n\r\n  // generates user addition to selection menu\r\n  addition: function(choice) {\r\n    return choice;\r\n  }\r\n\r\n};\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Video\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ($, window, document, undefined) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.embed = function(parameters) {\r\n\r\n  var\r\n    $allModules     = $(this),\r\n\r\n    moduleSelector  = $allModules.selector || '',\r\n\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings        = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.embed.settings, parameters)\r\n          : $.extend({}, $.fn.embed.settings),\r\n\r\n        selector        = settings.selector,\r\n        className       = settings.className,\r\n        sources         = settings.sources,\r\n        error           = settings.error,\r\n        metadata        = settings.metadata,\r\n        namespace       = settings.namespace,\r\n        templates       = settings.templates,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        $window         = $(window),\r\n        $module         = $(this),\r\n        $placeholder    = $module.find(selector.placeholder),\r\n        $icon           = $module.find(selector.icon),\r\n        $embed          = $module.find(selector.embed),\r\n\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.debug('Initializing embed');\r\n          module.determine.autoplay();\r\n          module.create();\r\n          module.bind.events();\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous instance of embed');\r\n          module.reset();\r\n          $module\r\n            .removeData(moduleNamespace)\r\n            .off(eventNamespace)\r\n          ;\r\n        },\r\n\r\n        refresh: function() {\r\n          module.verbose('Refreshing selector cache');\r\n          $placeholder = $module.find(selector.placeholder);\r\n          $icon        = $module.find(selector.icon);\r\n          $embed       = $module.find(selector.embed);\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            if( module.has.placeholder() ) {\r\n              module.debug('Adding placeholder events');\r\n              $module\r\n                .on('click' + eventNamespace, selector.placeholder, module.createAndShow)\r\n                .on('click' + eventNamespace, selector.icon, module.createAndShow)\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        create: function() {\r\n          var\r\n            placeholder = module.get.placeholder()\r\n          ;\r\n          if(placeholder) {\r\n            module.createPlaceholder();\r\n          }\r\n          else {\r\n            module.createAndShow();\r\n          }\r\n        },\r\n\r\n        createPlaceholder: function(placeholder) {\r\n          var\r\n            icon  = module.get.icon(),\r\n            url   = module.get.url(),\r\n            embed = module.generate.embed(url)\r\n          ;\r\n          placeholder = placeholder || module.get.placeholder();\r\n          $module.html( templates.placeholder(placeholder, icon) );\r\n          module.debug('Creating placeholder for embed', placeholder, icon);\r\n        },\r\n\r\n        createEmbed: function(url) {\r\n          module.refresh();\r\n          url = url || module.get.url();\r\n          $embed = $('<div/>')\r\n            .addClass(className.embed)\r\n            .html( module.generate.embed(url) )\r\n            .appendTo($module)\r\n          ;\r\n          settings.onCreate.call(element, url);\r\n          module.debug('Creating embed object', $embed);\r\n        },\r\n\r\n        createAndShow: function() {\r\n          module.createEmbed();\r\n          module.show();\r\n        },\r\n\r\n        // sets new embed\r\n        change: function(source, id, url) {\r\n          module.debug('Changing video to ', source, id, url);\r\n          $module\r\n            .data(metadata.source, source)\r\n            .data(metadata.id, id)\r\n            .data(metadata.url, url)\r\n          ;\r\n          module.create();\r\n        },\r\n\r\n        // clears embed\r\n        reset: function() {\r\n          module.debug('Clearing embed and showing placeholder');\r\n          module.remove.active();\r\n          module.remove.embed();\r\n          module.showPlaceholder();\r\n          settings.onReset.call(element);\r\n        },\r\n\r\n        // shows current embed\r\n        show: function() {\r\n          module.debug('Showing embed');\r\n          module.set.active();\r\n          settings.onDisplay.call(element);\r\n        },\r\n\r\n        hide: function() {\r\n          module.debug('Hiding embed');\r\n          module.showPlaceholder();\r\n        },\r\n\r\n        showPlaceholder: function() {\r\n          module.debug('Showing placeholder image');\r\n          module.remove.active();\r\n          settings.onPlaceholderDisplay.call(element);\r\n        },\r\n\r\n        get: {\r\n          id: function() {\r\n            return settings.id || $module.data(metadata.id);\r\n          },\r\n          placeholder: function() {\r\n            return settings.placeholder || $module.data(metadata.placeholder);\r\n          },\r\n          icon: function() {\r\n            return (settings.icon)\r\n              ? settings.icon\r\n              : ($module.data(metadata.icon) !== undefined)\r\n                ? $module.data(metadata.icon)\r\n                : module.determine.icon()\r\n            ;\r\n          },\r\n          source: function(url) {\r\n            return (settings.source)\r\n              ? settings.source\r\n              : ($module.data(metadata.source) !== undefined)\r\n                ? $module.data(metadata.source)\r\n                : module.determine.source()\r\n            ;\r\n          },\r\n          type: function() {\r\n            var source = module.get.source();\r\n            return (sources[source] !== undefined)\r\n              ? sources[source].type\r\n              : false\r\n            ;\r\n          },\r\n          url: function() {\r\n            return (settings.url)\r\n              ? settings.url\r\n              : ($module.data(metadata.url) !== undefined)\r\n                ? $module.data(metadata.url)\r\n                : module.determine.url()\r\n            ;\r\n          }\r\n        },\r\n\r\n        determine: {\r\n          autoplay: function() {\r\n            if(module.should.autoplay()) {\r\n              settings.autoplay = true;\r\n            }\r\n          },\r\n          source: function(url) {\r\n            var\r\n              matchedSource = false\r\n            ;\r\n            url = url || module.get.url();\r\n            if(url) {\r\n              $.each(sources, function(name, source) {\r\n                if(url.search(source.domain) !== -1) {\r\n                  matchedSource = name;\r\n                  return false;\r\n                }\r\n              });\r\n            }\r\n            return matchedSource;\r\n          },\r\n          icon: function() {\r\n            var\r\n              source = module.get.source()\r\n            ;\r\n            return (sources[source] !== undefined)\r\n              ? sources[source].icon\r\n              : false\r\n            ;\r\n          },\r\n          url: function() {\r\n            var\r\n              id     = settings.id     || $module.data(metadata.id),\r\n              source = settings.source || $module.data(metadata.source),\r\n              url\r\n            ;\r\n            url = (sources[source] !== undefined)\r\n              ? sources[source].url.replace('{id}', id)\r\n              : false\r\n            ;\r\n            if(url) {\r\n              $module.data(metadata.url, url);\r\n            }\r\n            return url;\r\n          }\r\n        },\r\n\r\n\r\n        set: {\r\n          active: function() {\r\n            $module.addClass(className.active);\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          active: function() {\r\n            $module.removeClass(className.active);\r\n          },\r\n          embed: function() {\r\n            $embed.empty();\r\n          }\r\n        },\r\n\r\n        encode: {\r\n          parameters: function(parameters) {\r\n            var\r\n              urlString = [],\r\n              index\r\n            ;\r\n            for (index in parameters) {\r\n              urlString.push( encodeURIComponent(index) + '=' + encodeURIComponent( parameters[index] ) );\r\n            }\r\n            return urlString.join('&amp;');\r\n          }\r\n        },\r\n\r\n        generate: {\r\n          embed: function(url) {\r\n            module.debug('Generating embed html');\r\n            var\r\n              source = module.get.source(),\r\n              html,\r\n              parameters\r\n            ;\r\n            url = module.get.url(url);\r\n            if(url) {\r\n              parameters = module.generate.parameters(source);\r\n              html       = templates.iframe(url, parameters);\r\n            }\r\n            else {\r\n              module.error(error.noURL, $module);\r\n            }\r\n            return html;\r\n          },\r\n          parameters: function(source, extraParameters) {\r\n            var\r\n              parameters = (sources[source] && sources[source].parameters !== undefined)\r\n                ? sources[source].parameters(settings)\r\n                : {}\r\n            ;\r\n            extraParameters = extraParameters || settings.parameters;\r\n            if(extraParameters) {\r\n              parameters = $.extend({}, parameters, extraParameters);\r\n            }\r\n            parameters = settings.onEmbed(parameters);\r\n            return module.encode.parameters(parameters);\r\n          }\r\n        },\r\n\r\n        has: {\r\n          placeholder: function() {\r\n            return settings.placeholder || $module.data(metadata.placeholder);\r\n          }\r\n        },\r\n\r\n        should: {\r\n          autoplay: function() {\r\n            return (settings.autoplay === 'auto')\r\n              ? (settings.placeholder || $module.data(metadata.placeholder) !== undefined)\r\n              : settings.autoplay\r\n            ;\r\n          }\r\n        },\r\n\r\n        is: {\r\n          video: function() {\r\n            return module.get.type() == 'video';\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if($allModules.length > 1) {\r\n              title += ' ' + '(' + $allModules.length + ')';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.embed.settings = {\r\n\r\n  name        : 'Embed',\r\n  namespace   : 'embed',\r\n\r\n  debug       : false,\r\n  verbose     : false,\r\n  performance : true,\r\n\r\n  icon     : false,\r\n  source   : false,\r\n  url      : false,\r\n  id       : false,\r\n\r\n  // standard video settings\r\n  autoplay  : 'auto',\r\n  color     : '#444444',\r\n  hd        : true,\r\n  brandedUI : false,\r\n\r\n  // additional parameters to include with the embed\r\n  parameters: false,\r\n\r\n  onDisplay            : function() {},\r\n  onPlaceholderDisplay : function() {},\r\n  onReset              : function() {},\r\n  onCreate             : function(url) {},\r\n  onEmbed              : function(parameters) {\r\n    return parameters;\r\n  },\r\n\r\n  metadata    : {\r\n    id          : 'id',\r\n    icon        : 'icon',\r\n    placeholder : 'placeholder',\r\n    source      : 'source',\r\n    url         : 'url'\r\n  },\r\n\r\n  error : {\r\n    noURL  : 'No URL specified',\r\n    method : 'The method you called is not defined'\r\n  },\r\n\r\n  className : {\r\n    active : 'active',\r\n    embed  : 'embed'\r\n  },\r\n\r\n  selector : {\r\n    embed       : '.embed',\r\n    placeholder : '.placeholder',\r\n    icon        : '.icon'\r\n  },\r\n\r\n  sources: {\r\n    youtube: {\r\n      name   : 'youtube',\r\n      type   : 'video',\r\n      icon   : 'video play',\r\n      domain : 'youtube.com',\r\n      url    : '//www.youtube.com/embed/{id}',\r\n      parameters: function(settings) {\r\n        return {\r\n          autohide       : !settings.brandedUI,\r\n          autoplay       : settings.autoplay,\r\n          color          : settings.colors || undefined,\r\n          hq             : settings.hd,\r\n          jsapi          : settings.api,\r\n          modestbranding : !settings.brandedUI\r\n        };\r\n      }\r\n    },\r\n    vimeo: {\r\n      name   : 'vimeo',\r\n      type   : 'video',\r\n      icon   : 'video play',\r\n      domain : 'vimeo.com',\r\n      url    : '//player.vimeo.com/video/{id}',\r\n      parameters: function(settings) {\r\n        return {\r\n          api      : settings.api,\r\n          autoplay : settings.autoplay,\r\n          byline   : settings.brandedUI,\r\n          color    : settings.colors || undefined,\r\n          portrait : settings.brandedUI,\r\n          title    : settings.brandedUI\r\n        };\r\n      }\r\n    }\r\n  },\r\n\r\n  templates: {\r\n    iframe : function(url, parameters) {\r\n      return ''\r\n        + '<iframe src=\"' + url + '?' + parameters + '\"'\r\n        + ' width=\"100%\" height=\"100%\"'\r\n        + ' frameborder=\"0\" scrolling=\"no\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>'\r\n      ;\r\n    },\r\n    placeholder : function(image, icon) {\r\n      var\r\n        html = ''\r\n      ;\r\n      if(icon) {\r\n        html += '<i class=\"' + icon + ' icon\"></i>';\r\n      }\r\n      if(image) {\r\n        html += '<img class=\"placeholder\" src=\"' + image + '\">';\r\n      }\r\n      return html;\r\n    }\r\n  },\r\n\r\n  // NOT YET IMPLEMENTED\r\n  api     : true,\r\n  onPause : function() {},\r\n  onPlay  : function() {},\r\n  onStop  : function() {}\r\n\r\n};\r\n\r\n\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Modal\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.modal = function(parameters) {\r\n  var\r\n    $allModules    = $(this),\r\n    $window        = $(window),\r\n    $document      = $(document),\r\n    $body          = $('body'),\r\n\r\n    moduleSelector = $allModules.selector || '',\r\n\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n\r\n    requestAnimationFrame = window.requestAnimationFrame\r\n      || window.mozRequestAnimationFrame\r\n      || window.webkitRequestAnimationFrame\r\n      || window.msRequestAnimationFrame\r\n      || function(callback) { setTimeout(callback, 0); },\r\n\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings    = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.modal.settings, parameters)\r\n          : $.extend({}, $.fn.modal.settings),\r\n\r\n        selector        = settings.selector,\r\n        className       = settings.className,\r\n        namespace       = settings.namespace,\r\n        error           = settings.error,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        $module         = $(this),\r\n        $context        = $(settings.context),\r\n        $close          = $module.find(selector.close),\r\n\r\n        $allModals,\r\n        $otherModals,\r\n        $focusedElement,\r\n        $dimmable,\r\n        $dimmer,\r\n\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        elementNamespace,\r\n        id,\r\n        observer,\r\n        module\r\n      ;\r\n      module  = {\r\n\r\n        initialize: function() {\r\n          module.verbose('Initializing dimmer', $context);\r\n\r\n          module.create.id();\r\n          module.create.dimmer();\r\n          module.refreshModals();\r\n\r\n          module.bind.events();\r\n          if(settings.observeChanges) {\r\n            module.observeChanges();\r\n          }\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of modal');\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, instance)\r\n          ;\r\n        },\r\n\r\n        create: {\r\n          dimmer: function() {\r\n            var\r\n              defaultSettings = {\r\n                debug      : settings.debug,\r\n                dimmerName : 'modals',\r\n                duration   : {\r\n                  show     : settings.duration,\r\n                  hide     : settings.duration\r\n                }\r\n              },\r\n              dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings)\r\n            ;\r\n            if(settings.inverted) {\r\n              dimmerSettings.variation = (dimmerSettings.variation !== undefined)\r\n                ? dimmerSettings.variation + ' inverted'\r\n                : 'inverted'\r\n              ;\r\n            }\r\n            if($.fn.dimmer === undefined) {\r\n              module.error(error.dimmer);\r\n              return;\r\n            }\r\n            module.debug('Creating dimmer with settings', dimmerSettings);\r\n            $dimmable = $context.dimmer(dimmerSettings);\r\n            if(settings.detachable) {\r\n              module.verbose('Modal is detachable, moving content into dimmer');\r\n              $dimmable.dimmer('add content', $module);\r\n            }\r\n            else {\r\n              module.set.undetached();\r\n            }\r\n            if(settings.blurring) {\r\n              $dimmable.addClass(className.blurring);\r\n            }\r\n            $dimmer = $dimmable.dimmer('get dimmer');\r\n          },\r\n          id: function() {\r\n            id = (Math.random().toString(16) + '000000000').substr(2,8);\r\n            elementNamespace = '.' + id;\r\n            module.verbose('Creating unique id for element', id);\r\n          }\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous modal');\r\n          $module\r\n            .removeData(moduleNamespace)\r\n            .off(eventNamespace)\r\n          ;\r\n          $window.off(elementNamespace);\r\n          $close.off(eventNamespace);\r\n          $context.dimmer('destroy');\r\n        },\r\n\r\n        observeChanges: function() {\r\n          if('MutationObserver' in window) {\r\n            observer = new MutationObserver(function(mutations) {\r\n              module.debug('DOM tree modified, refreshing');\r\n              module.refresh();\r\n            });\r\n            observer.observe(element, {\r\n              childList : true,\r\n              subtree   : true\r\n            });\r\n            module.debug('Setting up mutation observer', observer);\r\n          }\r\n        },\r\n\r\n        refresh: function() {\r\n          module.remove.scrolling();\r\n          module.cacheSizes();\r\n          module.set.screenHeight();\r\n          module.set.type();\r\n          module.set.position();\r\n        },\r\n\r\n        refreshModals: function() {\r\n          $otherModals = $module.siblings(selector.modal);\r\n          $allModals   = $otherModals.add($module);\r\n        },\r\n\r\n        attachEvents: function(selector, event) {\r\n          var\r\n            $toggle = $(selector)\r\n          ;\r\n          event = $.isFunction(module[event])\r\n            ? module[event]\r\n            : module.toggle\r\n          ;\r\n          if($toggle.length > 0) {\r\n            module.debug('Attaching modal events to element', selector, event);\r\n            $toggle\r\n              .off(eventNamespace)\r\n              .on('click' + eventNamespace, event)\r\n            ;\r\n          }\r\n          else {\r\n            module.error(error.notFound, selector);\r\n          }\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            module.verbose('Attaching events');\r\n            $module\r\n              .on('click' + eventNamespace, selector.close, module.event.close)\r\n              .on('click' + eventNamespace, selector.approve, module.event.approve)\r\n              .on('click' + eventNamespace, selector.deny, module.event.deny)\r\n            ;\r\n            $window\r\n              .on('resize' + elementNamespace, module.event.resize)\r\n            ;\r\n          }\r\n        },\r\n\r\n        get: {\r\n          id: function() {\r\n            return (Math.random().toString(16) + '000000000').substr(2,8);\r\n          }\r\n        },\r\n\r\n        event: {\r\n          approve: function() {\r\n            if(settings.onApprove.call(element, $(this)) === false) {\r\n              module.verbose('Approve callback returned false cancelling hide');\r\n              return;\r\n            }\r\n            module.hide();\r\n          },\r\n          deny: function() {\r\n            if(settings.onDeny.call(element, $(this)) === false) {\r\n              module.verbose('Deny callback returned false cancelling hide');\r\n              return;\r\n            }\r\n            module.hide();\r\n          },\r\n          close: function() {\r\n            module.hide();\r\n          },\r\n          click: function(event) {\r\n            var\r\n              $target   = $(event.target),\r\n              isInModal = ($target.closest(selector.modal).length > 0),\r\n              isInDOM   = $.contains(document.documentElement, event.target)\r\n            ;\r\n            if(!isInModal && isInDOM) {\r\n              module.debug('Dimmer clicked, hiding all modals');\r\n              if( module.is.active() ) {\r\n                module.remove.clickaway();\r\n                if(settings.allowMultiple) {\r\n                  module.hide();\r\n                }\r\n                else {\r\n                  module.hideAll();\r\n                }\r\n              }\r\n            }\r\n          },\r\n          debounce: function(method, delay) {\r\n            clearTimeout(module.timer);\r\n            module.timer = setTimeout(method, delay);\r\n          },\r\n          keyboard: function(event) {\r\n            var\r\n              keyCode   = event.which,\r\n              escapeKey = 27\r\n            ;\r\n            if(keyCode == escapeKey) {\r\n              if(settings.closable) {\r\n                module.debug('Escape key pressed hiding modal');\r\n                module.hide();\r\n              }\r\n              else {\r\n                module.debug('Escape key pressed, but closable is set to false');\r\n              }\r\n              event.preventDefault();\r\n            }\r\n          },\r\n          resize: function() {\r\n            if( $dimmable.dimmer('is active') ) {\r\n              requestAnimationFrame(module.refresh);\r\n            }\r\n          }\r\n        },\r\n\r\n        toggle: function() {\r\n          if( module.is.active() || module.is.animating() ) {\r\n            module.hide();\r\n          }\r\n          else {\r\n            module.show();\r\n          }\r\n        },\r\n\r\n        show: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          module.refreshModals();\r\n          module.showModal(callback);\r\n        },\r\n\r\n        hide: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          module.refreshModals();\r\n          module.hideModal(callback);\r\n        },\r\n\r\n        showModal: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if( module.is.animating() || !module.is.active() ) {\r\n\r\n            module.showDimmer();\r\n            module.cacheSizes();\r\n            module.set.position();\r\n            module.set.screenHeight();\r\n            module.set.type();\r\n            module.set.clickaway();\r\n\r\n            if( !settings.allowMultiple && module.others.active() ) {\r\n              module.hideOthers(module.showModal);\r\n            }\r\n            else {\r\n              settings.onShow.call(element);\r\n              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\r\n                module.debug('Showing modal with css animations');\r\n                $module\r\n                  .transition({\r\n                    debug       : settings.debug,\r\n                    animation   : settings.transition + ' in',\r\n                    queue       : settings.queue,\r\n                    duration    : settings.duration,\r\n                    useFailSafe : true,\r\n                    onComplete : function() {\r\n                      settings.onVisible.apply(element);\r\n                      module.add.keyboardShortcuts();\r\n                      module.save.focus();\r\n                      module.set.active();\r\n                      if(settings.autofocus) {\r\n                        module.set.autofocus();\r\n                      }\r\n                      callback();\r\n                    }\r\n                  })\r\n                ;\r\n              }\r\n              else {\r\n                module.error(error.noTransition);\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            module.debug('Modal is already visible');\r\n          }\r\n        },\r\n\r\n        hideModal: function(callback, keepDimmed) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          module.debug('Hiding modal');\r\n          if(settings.onHide.call(element, $(this)) === false) {\r\n            module.verbose('Hide callback returned false cancelling hide');\r\n            return;\r\n          }\r\n\r\n          if( module.is.animating() || module.is.active() ) {\r\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\r\n              module.remove.active();\r\n              $module\r\n                .transition({\r\n                  debug       : settings.debug,\r\n                  animation   : settings.transition + ' out',\r\n                  queue       : settings.queue,\r\n                  duration    : settings.duration,\r\n                  useFailSafe : true,\r\n                  onStart     : function() {\r\n                    if(!module.others.active() && !keepDimmed) {\r\n                      module.hideDimmer();\r\n                    }\r\n                    module.remove.keyboardShortcuts();\r\n                  },\r\n                  onComplete : function() {\r\n                    settings.onHidden.call(element);\r\n                    module.restore.focus();\r\n                    callback();\r\n                  }\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              module.error(error.noTransition);\r\n            }\r\n          }\r\n        },\r\n\r\n        showDimmer: function() {\r\n          if($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active') ) {\r\n            module.debug('Showing dimmer');\r\n            $dimmable.dimmer('show');\r\n          }\r\n          else {\r\n            module.debug('Dimmer already visible');\r\n          }\r\n        },\r\n\r\n        hideDimmer: function() {\r\n          if( $dimmable.dimmer('is animating') || ($dimmable.dimmer('is active')) ) {\r\n            $dimmable.dimmer('hide', function() {\r\n              module.remove.clickaway();\r\n              module.remove.screenHeight();\r\n            });\r\n          }\r\n          else {\r\n            module.debug('Dimmer is not visible cannot hide');\r\n            return;\r\n          }\r\n        },\r\n\r\n        hideAll: function(callback) {\r\n          var\r\n            $visibleModals = $allModals.filter('.' + className.active + ', .' + className.animating)\r\n          ;\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if( $visibleModals.length > 0 ) {\r\n            module.debug('Hiding all visible modals');\r\n            module.hideDimmer();\r\n            $visibleModals\r\n              .modal('hide modal', callback)\r\n            ;\r\n          }\r\n        },\r\n\r\n        hideOthers: function(callback) {\r\n          var\r\n            $visibleModals = $otherModals.filter('.' + className.active + ', .' + className.animating)\r\n          ;\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if( $visibleModals.length > 0 ) {\r\n            module.debug('Hiding other modals', $otherModals);\r\n            $visibleModals\r\n              .modal('hide modal', callback, true)\r\n            ;\r\n          }\r\n        },\r\n\r\n        others: {\r\n          active: function() {\r\n            return ($otherModals.filter('.' + className.active).length > 0);\r\n          },\r\n          animating: function() {\r\n            return ($otherModals.filter('.' + className.animating).length > 0);\r\n          }\r\n        },\r\n\r\n\r\n        add: {\r\n          keyboardShortcuts: function() {\r\n            module.verbose('Adding keyboard shortcuts');\r\n            $document\r\n              .on('keyup' + eventNamespace, module.event.keyboard)\r\n            ;\r\n          }\r\n        },\r\n\r\n        save: {\r\n          focus: function() {\r\n            $focusedElement = $(document.activeElement).blur();\r\n          }\r\n        },\r\n\r\n        restore: {\r\n          focus: function() {\r\n            if($focusedElement && $focusedElement.length > 0) {\r\n              $focusedElement.focus();\r\n            }\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          active: function() {\r\n            $module.removeClass(className.active);\r\n          },\r\n          clickaway: function() {\r\n            if(settings.closable) {\r\n              $dimmer\r\n                .off('click' + elementNamespace)\r\n              ;\r\n            }\r\n          },\r\n          bodyStyle: function() {\r\n            if($body.attr('style') === '') {\r\n              module.verbose('Removing style attribute');\r\n              $body.removeAttr('style');\r\n            }\r\n          },\r\n          screenHeight: function() {\r\n            module.debug('Removing page height');\r\n            $body\r\n              .css('height', '')\r\n            ;\r\n          },\r\n          keyboardShortcuts: function() {\r\n            module.verbose('Removing keyboard shortcuts');\r\n            $document\r\n              .off('keyup' + eventNamespace)\r\n            ;\r\n          },\r\n          scrolling: function() {\r\n            $dimmable.removeClass(className.scrolling);\r\n            $module.removeClass(className.scrolling);\r\n          }\r\n        },\r\n\r\n        cacheSizes: function() {\r\n          var\r\n            modalHeight = $module.outerHeight()\r\n          ;\r\n          if(module.cache === undefined || modalHeight !== 0) {\r\n            module.cache = {\r\n              pageHeight    : $(document).outerHeight(),\r\n              height        : modalHeight + settings.offset,\r\n              contextHeight : (settings.context == 'body')\r\n                ? $(window).height()\r\n                : $dimmable.height()\r\n            };\r\n          }\r\n          module.debug('Caching modal and container sizes', module.cache);\r\n        },\r\n\r\n        can: {\r\n          fit: function() {\r\n            return ( ( module.cache.height + (settings.padding * 2) ) < module.cache.contextHeight);\r\n          }\r\n        },\r\n\r\n        is: {\r\n          active: function() {\r\n            return $module.hasClass(className.active);\r\n          },\r\n          animating: function() {\r\n            return $module.transition('is supported')\r\n              ? $module.transition('is animating')\r\n              : $module.is(':visible')\r\n            ;\r\n          },\r\n          scrolling: function() {\r\n            return $dimmable.hasClass(className.scrolling);\r\n          },\r\n          modernBrowser: function() {\r\n            // appName for IE11 reports 'Netscape' can no longer use\r\n            return !(window.ActiveXObject || \"ActiveXObject\" in window);\r\n          }\r\n        },\r\n\r\n        set: {\r\n          autofocus: function() {\r\n            var\r\n              $inputs    = $module.find(':input').filter(':visible'),\r\n              $autofocus = $inputs.filter('[autofocus]'),\r\n              $input     = ($autofocus.length > 0)\r\n                ? $autofocus.first()\r\n                : $inputs.first()\r\n            ;\r\n            if($input.length > 0) {\r\n              $input.focus();\r\n            }\r\n          },\r\n          clickaway: function() {\r\n            if(settings.closable) {\r\n              $dimmer\r\n                .on('click' + elementNamespace, module.event.click)\r\n              ;\r\n            }\r\n          },\r\n          screenHeight: function() {\r\n            if( module.can.fit() ) {\r\n              $body.css('height', '');\r\n            }\r\n            else {\r\n              module.debug('Modal is taller than page content, resizing page height');\r\n              $body\r\n                .css('height', module.cache.height + (settings.padding * 2) )\r\n              ;\r\n            }\r\n          },\r\n          active: function() {\r\n            $module.addClass(className.active);\r\n          },\r\n          scrolling: function() {\r\n            $dimmable.addClass(className.scrolling);\r\n            $module.addClass(className.scrolling);\r\n          },\r\n          type: function() {\r\n            if(module.can.fit()) {\r\n              module.verbose('Modal fits on screen');\r\n              if(!module.others.active() && !module.others.animating()) {\r\n                module.remove.scrolling();\r\n              }\r\n            }\r\n            else {\r\n              module.verbose('Modal cannot fit on screen setting to scrolling');\r\n              module.set.scrolling();\r\n            }\r\n          },\r\n          position: function() {\r\n            module.verbose('Centering modal on page', module.cache);\r\n            if(module.can.fit()) {\r\n              $module\r\n                .css({\r\n                  top: '',\r\n                  marginTop: -(module.cache.height / 2)\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              $module\r\n                .css({\r\n                  marginTop : '',\r\n                  top       : $document.scrollTop()\r\n                })\r\n              ;\r\n            }\r\n          },\r\n          undetached: function() {\r\n            $dimmable.addClass(className.undetached);\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.modal.settings = {\r\n\r\n  name           : 'Modal',\r\n  namespace      : 'modal',\r\n\r\n  debug          : false,\r\n  verbose        : false,\r\n  performance    : true,\r\n\r\n  observeChanges : false,\r\n\r\n  allowMultiple  : false,\r\n  detachable     : true,\r\n  closable       : true,\r\n  autofocus      : true,\r\n\r\n  inverted       : false,\r\n  blurring       : false,\r\n\r\n  dimmerSettings : {\r\n    closable : false,\r\n    useCSS   : true\r\n  },\r\n\r\n\r\n  context    : 'body',\r\n\r\n  queue      : false,\r\n  duration   : 500,\r\n  offset     : 0,\r\n  transition : 'scale',\r\n\r\n  // padding with edge of page\r\n  padding    : 50,\r\n\r\n  // called before show animation\r\n  onShow     : function(){},\r\n\r\n  // called after show animation\r\n  onVisible  : function(){},\r\n\r\n  // called before hide animation\r\n  onHide     : function(){ return true; },\r\n\r\n  // called after hide animation\r\n  onHidden   : function(){},\r\n\r\n  // called after approve selector match\r\n  onApprove  : function(){ return true; },\r\n\r\n  // called after deny selector match\r\n  onDeny     : function(){ return true; },\r\n\r\n  selector    : {\r\n    close    : '> .close',\r\n    approve  : '.actions .positive, .actions .approve, .actions .ok',\r\n    deny     : '.actions .negative, .actions .deny, .actions .cancel',\r\n    modal    : '.ui.modal'\r\n  },\r\n  error : {\r\n    dimmer    : 'UI Dimmer, a required component is not included in this page',\r\n    method    : 'The method you called is not defined.',\r\n    notFound  : 'The element you specified could not be found'\r\n  },\r\n  className : {\r\n    active     : 'active',\r\n    animating  : 'animating',\r\n    blurring   : 'blurring',\r\n    scrolling  : 'scrolling',\r\n    undetached : 'undetached'\r\n  }\r\n};\r\n\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Nag\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ($, window, document, undefined) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.nag = function(parameters) {\r\n  var\r\n    $allModules    = $(this),\r\n    moduleSelector = $allModules.selector || '',\r\n\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n    returnedValue\r\n  ;\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings          = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.nag.settings, parameters)\r\n          : $.extend({}, $.fn.nag.settings),\r\n\r\n        className       = settings.className,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n        namespace       = settings.namespace,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = namespace + '-module',\r\n\r\n        $module         = $(this),\r\n\r\n        $close          = $module.find(selector.close),\r\n        $context        = (settings.context)\r\n          ? $(settings.context)\r\n          : $('body'),\r\n\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        moduleOffset,\r\n        moduleHeight,\r\n\r\n        contextWidth,\r\n        contextHeight,\r\n        contextOffset,\r\n\r\n        yOffset,\r\n        yPosition,\r\n\r\n        timer,\r\n        module,\r\n\r\n        requestAnimationFrame = window.requestAnimationFrame\r\n          || window.mozRequestAnimationFrame\r\n          || window.webkitRequestAnimationFrame\r\n          || window.msRequestAnimationFrame\r\n          || function(callback) { setTimeout(callback, 0); }\r\n      ;\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.verbose('Initializing element');\r\n\r\n          $module\r\n            .on('click' + eventNamespace, selector.close, module.dismiss)\r\n            .data(moduleNamespace, module)\r\n          ;\r\n\r\n          if(settings.detachable && $module.parent()[0] !== $context[0]) {\r\n            $module\r\n              .detach()\r\n              .prependTo($context)\r\n            ;\r\n          }\r\n\r\n          if(settings.displayTime > 0) {\r\n            setTimeout(module.hide, settings.displayTime);\r\n          }\r\n          module.show();\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying instance');\r\n          $module\r\n            .removeData(moduleNamespace)\r\n            .off(eventNamespace)\r\n          ;\r\n        },\r\n\r\n        show: function() {\r\n          if( module.should.show() && !$module.is(':visible') ) {\r\n            module.debug('Showing nag', settings.animation.show);\r\n            if(settings.animation.show == 'fade') {\r\n              $module\r\n                .fadeIn(settings.duration, settings.easing)\r\n              ;\r\n            }\r\n            else {\r\n              $module\r\n                .slideDown(settings.duration, settings.easing)\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        hide: function() {\r\n          module.debug('Showing nag', settings.animation.hide);\r\n          if(settings.animation.show == 'fade') {\r\n            $module\r\n              .fadeIn(settings.duration, settings.easing)\r\n            ;\r\n          }\r\n          else {\r\n            $module\r\n              .slideUp(settings.duration, settings.easing)\r\n            ;\r\n          }\r\n        },\r\n\r\n        onHide: function() {\r\n          module.debug('Removing nag', settings.animation.hide);\r\n          $module.remove();\r\n          if (settings.onHide) {\r\n            settings.onHide();\r\n          }\r\n        },\r\n\r\n        dismiss: function(event) {\r\n          if(settings.storageMethod) {\r\n            module.storage.set(settings.key, settings.value);\r\n          }\r\n          module.hide();\r\n          event.stopImmediatePropagation();\r\n          event.preventDefault();\r\n        },\r\n\r\n        should: {\r\n          show: function() {\r\n            if(settings.persist) {\r\n              module.debug('Persistent nag is set, can show nag');\r\n              return true;\r\n            }\r\n            if( module.storage.get(settings.key) != settings.value.toString() ) {\r\n              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));\r\n              return true;\r\n            }\r\n            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));\r\n            return false;\r\n          }\r\n        },\r\n\r\n        get: {\r\n          storageOptions: function() {\r\n            var\r\n              options = {}\r\n            ;\r\n            if(settings.expires) {\r\n              options.expires = settings.expires;\r\n            }\r\n            if(settings.domain) {\r\n              options.domain = settings.domain;\r\n            }\r\n            if(settings.path) {\r\n              options.path = settings.path;\r\n            }\r\n            return options;\r\n          }\r\n        },\r\n\r\n        clear: function() {\r\n          module.storage.remove(settings.key);\r\n        },\r\n\r\n        storage: {\r\n          set: function(key, value) {\r\n            var\r\n              options = module.get.storageOptions()\r\n            ;\r\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\r\n              window.localStorage.setItem(key, value);\r\n              module.debug('Value stored using local storage', key, value);\r\n            }\r\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\r\n              window.sessionStorage.setItem(key, value);\r\n              module.debug('Value stored using session storage', key, value);\r\n            }\r\n            else if($.cookie !== undefined) {\r\n              $.cookie(key, value, options);\r\n              module.debug('Value stored using cookie', key, value, options);\r\n            }\r\n            else {\r\n              module.error(error.noCookieStorage);\r\n              return;\r\n            }\r\n          },\r\n          get: function(key, value) {\r\n            var\r\n              storedValue\r\n            ;\r\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\r\n              storedValue = window.localStorage.getItem(key);\r\n            }\r\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\r\n              storedValue = window.sessionStorage.getItem(key);\r\n            }\r\n            // get by cookie\r\n            else if($.cookie !== undefined) {\r\n              storedValue = $.cookie(key);\r\n            }\r\n            else {\r\n              module.error(error.noCookieStorage);\r\n            }\r\n            if(storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {\r\n              storedValue = undefined;\r\n            }\r\n            return storedValue;\r\n          },\r\n          remove: function(key) {\r\n            var\r\n              options = module.get.storageOptions()\r\n            ;\r\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\r\n              window.localStorage.removeItem(key);\r\n            }\r\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\r\n              window.sessionStorage.removeItem(key);\r\n            }\r\n            // store by cookie\r\n            else if($.cookie !== undefined) {\r\n              $.removeCookie(key, options);\r\n            }\r\n            else {\r\n              module.error(error.noStorage);\r\n            }\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.nag.settings = {\r\n\r\n  name        : 'Nag',\r\n\r\n  debug       : false,\r\n  verbose     : false,\r\n  performance : true,\r\n\r\n  namespace   : 'Nag',\r\n\r\n  // allows cookie to be overriden\r\n  persist     : false,\r\n\r\n  // set to zero to require manually dismissal, otherwise hides on its own\r\n  displayTime : 0,\r\n\r\n  animation   : {\r\n    show : 'slide',\r\n    hide : 'slide'\r\n  },\r\n\r\n  context       : false,\r\n  detachable    : false,\r\n\r\n  expires       : 30,\r\n  domain        : false,\r\n  path          : '/',\r\n\r\n  // type of storage to use\r\n  storageMethod : 'cookie',\r\n\r\n  // value to store in dismissed localstorage/cookie\r\n  key           : 'nag',\r\n  value         : 'dismiss',\r\n\r\n  error: {\r\n    noCookieStorage : '$.cookie is not included. A storage solution is required.',\r\n    noStorage       : 'Neither $.cookie or store is defined. A storage solution is required for storing state',\r\n    method          : 'The method you called is not defined.'\r\n  },\r\n\r\n  className     : {\r\n    bottom : 'bottom',\r\n    fixed  : 'fixed'\r\n  },\r\n\r\n  selector      : {\r\n    close : '.close.icon'\r\n  },\r\n\r\n  speed         : 500,\r\n  easing        : 'easeOutQuad',\r\n\r\n  onHide: function() {}\r\n\r\n};\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Popup\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ($, window, document, undefined) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.popup = function(parameters) {\r\n  var\r\n    $allModules    = $(this),\r\n    $document      = $(document),\r\n    $window        = $(window),\r\n    $body          = $('body'),\r\n\r\n    moduleSelector = $allModules.selector || '',\r\n\r\n    hasTouch       = (true),\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n\r\n    returnedValue\r\n  ;\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings        = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.popup.settings, parameters)\r\n          : $.extend({}, $.fn.popup.settings),\r\n\r\n        selector           = settings.selector,\r\n        className          = settings.className,\r\n        error              = settings.error,\r\n        metadata           = settings.metadata,\r\n        namespace          = settings.namespace,\r\n\r\n        eventNamespace     = '.' + settings.namespace,\r\n        moduleNamespace    = 'module-' + namespace,\r\n\r\n        $module            = $(this),\r\n        $context           = $(settings.context),\r\n        $target            = (settings.target)\r\n          ? $(settings.target)\r\n          : $module,\r\n\r\n        $popup,\r\n        $offsetParent,\r\n\r\n        searchDepth        = 0,\r\n        triedPositions     = false,\r\n        openedWithTouch    = false,\r\n\r\n        element            = this,\r\n        instance           = $module.data(moduleNamespace),\r\n\r\n        elementNamespace,\r\n        id,\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        // binds events\r\n        initialize: function() {\r\n          module.debug('Initializing', $module);\r\n          module.createID();\r\n          module.bind.events();\r\n          if( !module.exists() && settings.preserve) {\r\n            module.create();\r\n          }\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, instance)\r\n          ;\r\n        },\r\n\r\n        refresh: function() {\r\n          if(settings.popup) {\r\n            $popup = $(settings.popup).eq(0);\r\n          }\r\n          else {\r\n            if(settings.inline) {\r\n              $popup = $target.nextAll(selector.popup).eq(0);\r\n              settings.popup = $popup;\r\n            }\r\n          }\r\n          if(settings.popup) {\r\n            $popup.addClass(className.loading);\r\n            $offsetParent = module.get.offsetParent();\r\n            $popup.removeClass(className.loading);\r\n            if(settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {\r\n              module.debug('Moving popup to the same offset parent as activating element');\r\n              $popup\r\n                .detach()\r\n                .appendTo($offsetParent)\r\n              ;\r\n            }\r\n          }\r\n          else {\r\n            $offsetParent = (settings.inline)\r\n              ? module.get.offsetParent($target)\r\n              : module.has.popup()\r\n                ? module.get.offsetParent($popup)\r\n                : $body\r\n            ;\r\n          }\r\n          if( $offsetParent.is('html') && $offsetParent[0] !== $body[0] ) {\r\n            module.debug('Setting page as offset parent');\r\n            $offsetParent = $body;\r\n          }\r\n          if( module.get.variation() ) {\r\n            module.set.variation();\r\n          }\r\n        },\r\n\r\n        reposition: function() {\r\n          module.refresh();\r\n          module.set.position();\r\n        },\r\n\r\n        destroy: function() {\r\n          module.debug('Destroying previous module');\r\n          // remove element only if was created dynamically\r\n          if($popup && !settings.preserve) {\r\n            module.removePopup();\r\n          }\r\n          // clear all timeouts\r\n          clearTimeout(module.hideTimer);\r\n          clearTimeout(module.showTimer);\r\n          // remove events\r\n          $window.off(elementNamespace);\r\n          $module\r\n            .off(eventNamespace)\r\n            .removeData(moduleNamespace)\r\n          ;\r\n        },\r\n\r\n        event: {\r\n          start:  function(event) {\r\n            var\r\n              delay = ($.isPlainObject(settings.delay))\r\n                ? settings.delay.show\r\n                : settings.delay\r\n            ;\r\n            clearTimeout(module.hideTimer);\r\n            if(!openedWithTouch) {\r\n              module.showTimer = setTimeout(module.show, delay);\r\n            }\r\n          },\r\n          end:  function() {\r\n            var\r\n              delay = ($.isPlainObject(settings.delay))\r\n                ? settings.delay.hide\r\n                : settings.delay\r\n            ;\r\n            clearTimeout(module.showTimer);\r\n            module.hideTimer = setTimeout(module.hide, delay);\r\n          },\r\n          touchstart: function(event) {\r\n            openedWithTouch = true;\r\n            module.show();\r\n          },\r\n          resize: function() {\r\n            if( module.is.visible() ) {\r\n              module.set.position();\r\n            }\r\n          },\r\n          hideGracefully: function(event) {\r\n            // don't close on clicks inside popup\r\n            if(event && $(event.target).closest(selector.popup).length === 0) {\r\n              module.debug('Click occurred outside popup hiding popup');\r\n              module.hide();\r\n            }\r\n            else {\r\n              module.debug('Click was inside popup, keeping popup open');\r\n            }\r\n          }\r\n        },\r\n\r\n        // generates popup html from metadata\r\n        create: function() {\r\n          var\r\n            html      = module.get.html(),\r\n            title     = module.get.title(),\r\n            content   = module.get.content()\r\n          ;\r\n\r\n          if(html || content || title) {\r\n            module.debug('Creating pop-up html');\r\n            if(!html) {\r\n              html = settings.templates.popup({\r\n                title   : title,\r\n                content : content\r\n              });\r\n            }\r\n            $popup = $('<div/>')\r\n              .addClass(className.popup)\r\n              .data(metadata.activator, $module)\r\n              .html(html)\r\n            ;\r\n            if(settings.inline) {\r\n              module.verbose('Inserting popup element inline', $popup);\r\n              $popup\r\n                .insertAfter($module)\r\n              ;\r\n            }\r\n            else {\r\n              module.verbose('Appending popup element to body', $popup);\r\n              $popup\r\n                .appendTo( $context )\r\n              ;\r\n            }\r\n            module.refresh();\r\n            module.set.variation();\r\n\r\n            if(settings.hoverable) {\r\n              module.bind.popup();\r\n            }\r\n            settings.onCreate.call($popup, element);\r\n          }\r\n          else if($target.next(selector.popup).length !== 0) {\r\n            module.verbose('Pre-existing popup found');\r\n            settings.inline = true;\r\n            settings.popups  = $target.next(selector.popup).data(metadata.activator, $module);\r\n            module.refresh();\r\n            if(settings.hoverable) {\r\n              module.bind.popup();\r\n            }\r\n          }\r\n          else if(settings.popup) {\r\n            $(settings.popup).data(metadata.activator, $module);\r\n            module.verbose('Used popup specified in settings');\r\n            module.refresh();\r\n            if(settings.hoverable) {\r\n              module.bind.popup();\r\n            }\r\n          }\r\n          else {\r\n            module.debug('No content specified skipping display', element);\r\n          }\r\n        },\r\n\r\n        createID: function() {\r\n          id = (Math.random().toString(16) + '000000000').substr(2,8);\r\n          elementNamespace = '.' + id;\r\n          module.verbose('Creating unique id for element', id);\r\n        },\r\n\r\n        // determines popup state\r\n        toggle: function() {\r\n          module.debug('Toggling pop-up');\r\n          if( module.is.hidden() ) {\r\n            module.debug('Popup is hidden, showing pop-up');\r\n            module.unbind.close();\r\n            module.show();\r\n          }\r\n          else {\r\n            module.debug('Popup is visible, hiding pop-up');\r\n            module.hide();\r\n          }\r\n        },\r\n\r\n        show: function(callback) {\r\n          callback = callback || function(){};\r\n          module.debug('Showing pop-up', settings.transition);\r\n          if(module.is.hidden() && !( module.is.active() && module.is.dropdown()) ) {\r\n            if( !module.exists() ) {\r\n              module.create();\r\n            }\r\n            if(settings.onShow.call($popup, element) === false) {\r\n              module.debug('onShow callback returned false, cancelling popup animation');\r\n              return;\r\n            }\r\n            else if(!settings.preserve && !settings.popup) {\r\n              module.refresh();\r\n            }\r\n            if( $popup && module.set.position() ) {\r\n              module.save.conditions();\r\n              if(settings.exclusive) {\r\n                module.hideAll();\r\n              }\r\n              module.animate.show(callback);\r\n            }\r\n          }\r\n        },\r\n\r\n\r\n        hide: function(callback) {\r\n          callback = callback || function(){};\r\n          if( module.is.visible() || module.is.animating() ) {\r\n            if(settings.onHide.call($popup, element) === false) {\r\n              module.debug('onHide callback returned false, cancelling popup animation');\r\n              return;\r\n            }\r\n            module.remove.visible();\r\n            module.unbind.close();\r\n            module.restore.conditions();\r\n            module.animate.hide(callback);\r\n          }\r\n        },\r\n\r\n        hideAll: function() {\r\n          $(selector.popup)\r\n            .filter('.' + className.visible)\r\n            .each(function() {\r\n              $(this)\r\n                .data(metadata.activator)\r\n                .popup('hide')\r\n              ;\r\n            })\r\n          ;\r\n        },\r\n        exists: function() {\r\n          if(!$popup) {\r\n            return false;\r\n          }\r\n          if(settings.inline || settings.popup) {\r\n            return ( module.has.popup() );\r\n          }\r\n          else {\r\n            return ( $popup.closest($context).length >= 1 )\r\n              ? true\r\n              : false\r\n            ;\r\n          }\r\n        },\r\n\r\n        removePopup: function() {\r\n          if( module.has.popup() && !settings.popup) {\r\n            module.debug('Removing popup', $popup);\r\n            $popup.remove();\r\n            $popup = undefined;\r\n            settings.onRemove.call($popup, element);\r\n          }\r\n        },\r\n\r\n        save: {\r\n          conditions: function() {\r\n            module.cache = {\r\n              title: $module.attr('title')\r\n            };\r\n            if (module.cache.title) {\r\n              $module.removeAttr('title');\r\n            }\r\n            module.verbose('Saving original attributes', module.cache.title);\r\n          }\r\n        },\r\n        restore: {\r\n          conditions: function() {\r\n            if(module.cache && module.cache.title) {\r\n              $module.attr('title', module.cache.title);\r\n              module.verbose('Restoring original attributes', module.cache.title);\r\n            }\r\n            return true;\r\n          }\r\n        },\r\n        animate: {\r\n          show: function(callback) {\r\n            callback = $.isFunction(callback) ? callback : function(){};\r\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\r\n              module.set.visible();\r\n              $popup\r\n                .transition({\r\n                  animation  : settings.transition + ' in',\r\n                  queue      : false,\r\n                  debug      : settings.debug,\r\n                  verbose    : settings.verbose,\r\n                  duration   : settings.duration,\r\n                  onComplete : function() {\r\n                    module.bind.close();\r\n                    callback.call($popup, element);\r\n                    settings.onVisible.call($popup, element);\r\n                  }\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              module.error(error.noTransition);\r\n            }\r\n          },\r\n          hide: function(callback) {\r\n            callback = $.isFunction(callback) ? callback : function(){};\r\n            module.debug('Hiding pop-up');\r\n            if(settings.onHide.call($popup, element) === false) {\r\n              module.debug('onHide callback returned false, cancelling popup animation');\r\n              return;\r\n            }\r\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\r\n              $popup\r\n                .transition({\r\n                  animation  : settings.transition + ' out',\r\n                  queue      : false,\r\n                  duration   : settings.duration,\r\n                  debug      : settings.debug,\r\n                  verbose    : settings.verbose,\r\n                  onComplete : function() {\r\n                    module.reset();\r\n                    callback.call($popup, element);\r\n                    settings.onHidden.call($popup, element);\r\n                  }\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              module.error(error.noTransition);\r\n            }\r\n          }\r\n        },\r\n\r\n        change: {\r\n          content: function(html) {\r\n            $popup.html(html);\r\n          }\r\n        },\r\n\r\n        get: {\r\n          html: function() {\r\n            $module.removeData(metadata.html);\r\n            return $module.data(metadata.html) || settings.html;\r\n          },\r\n          title: function() {\r\n            $module.removeData(metadata.title);\r\n            return $module.data(metadata.title) || settings.title;\r\n          },\r\n          content: function() {\r\n            $module.removeData(metadata.content);\r\n            return $module.data(metadata.content) || $module.attr('title') || settings.content;\r\n          },\r\n          variation: function() {\r\n            $module.removeData(metadata.variation);\r\n            return $module.data(metadata.variation) || settings.variation;\r\n          },\r\n          popup: function() {\r\n            return $popup;\r\n          },\r\n          popupOffset: function() {\r\n            return $popup.offset();\r\n          },\r\n          calculations: function() {\r\n            var\r\n              targetElement  = $target[0],\r\n              targetPosition = (settings.inline || (settings.popup && settings.movePopup))\r\n                ? $target.position()\r\n                : $target.offset(),\r\n              calculations = {},\r\n              screen\r\n            ;\r\n            calculations = {\r\n              // element which is launching popup\r\n              target : {\r\n                element : $target[0],\r\n                width   : $target.outerWidth(),\r\n                height  : $target.outerHeight(),\r\n                top     : targetPosition.top,\r\n                left    : targetPosition.left,\r\n                margin  : {}\r\n              },\r\n              // popup itself\r\n              popup : {\r\n                width  : $popup.outerWidth(),\r\n                height : $popup.outerHeight()\r\n              },\r\n              // offset container (or 3d context)\r\n              parent : {\r\n                width  : $offsetParent.outerWidth(),\r\n                height : $offsetParent.outerHeight()\r\n              },\r\n              // screen boundaries\r\n              screen : {\r\n                scroll: {\r\n                  top  : $window.scrollTop(),\r\n                  left : $window.scrollLeft()\r\n                },\r\n                width  : $window.width(),\r\n                height : $window.height()\r\n              }\r\n            };\r\n\r\n            // add in container calcs if fluid\r\n            if( settings.setFluidWidth && module.is.fluid() ) {\r\n              calculations.container = {\r\n                width: $popup.parent().outerWidth()\r\n              };\r\n              calculations.popup.width = calculations.container.width;\r\n            }\r\n\r\n            // add in margins if inline\r\n            calculations.target.margin.top = (settings.inline)\r\n              ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10)\r\n              : 0\r\n            ;\r\n            calculations.target.margin.left = (settings.inline)\r\n              ? module.is.rtl()\r\n                ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-right'), 10)\r\n                : parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-left') , 10)\r\n              : 0\r\n            ;\r\n            // calculate screen boundaries\r\n            screen = calculations.screen;\r\n            calculations.boundary = {\r\n              top    : screen.scroll.top,\r\n              bottom : screen.scroll.top + screen.height,\r\n              left   : screen.scroll.left,\r\n              right  : screen.scroll.left + screen.width\r\n            };\r\n            return calculations;\r\n          },\r\n          id: function() {\r\n            return id;\r\n          },\r\n          startEvent: function() {\r\n            if(settings.on == 'hover') {\r\n              return 'mouseenter';\r\n            }\r\n            else if(settings.on == 'focus') {\r\n              return 'focus';\r\n            }\r\n            return false;\r\n          },\r\n          scrollEvent: function() {\r\n            return 'scroll';\r\n          },\r\n          endEvent: function() {\r\n            if(settings.on == 'hover') {\r\n              return 'mouseleave';\r\n            }\r\n            else if(settings.on == 'focus') {\r\n              return 'blur';\r\n            }\r\n            return false;\r\n          },\r\n          distanceFromBoundary: function(offset, calculations) {\r\n            var\r\n              distanceFromBoundary = {},\r\n              popup,\r\n              boundary\r\n            ;\r\n            offset       = offset       || module.get.offset();\r\n            calculations = calculations || module.get.calculations();\r\n\r\n            // shorthand\r\n            popup        = calculations.popup;\r\n            boundary     = calculations.boundary;\r\n\r\n            if(offset) {\r\n              distanceFromBoundary = {\r\n                top    : (offset.top - boundary.top),\r\n                left   : (offset.left - boundary.left),\r\n                right  : (boundary.right - (offset.left + popup.width) ),\r\n                bottom : (boundary.bottom - (offset.top + popup.height) )\r\n              };\r\n              module.verbose('Distance from boundaries determined', offset, distanceFromBoundary);\r\n            }\r\n            return distanceFromBoundary;\r\n          },\r\n          offsetParent: function($target) {\r\n            var\r\n              element = ($target !== undefined)\r\n                ? $target[0]\r\n                : $module[0],\r\n              parentNode = element.parentNode,\r\n              $node    = $(parentNode)\r\n            ;\r\n            if(parentNode) {\r\n              var\r\n                is2D     = ($node.css('transform') === 'none'),\r\n                isStatic = ($node.css('position') === 'static'),\r\n                isHTML   = $node.is('html')\r\n              ;\r\n              while(parentNode && !isHTML && isStatic && is2D) {\r\n                parentNode = parentNode.parentNode;\r\n                $node    = $(parentNode);\r\n                is2D     = ($node.css('transform') === 'none');\r\n                isStatic = ($node.css('position') === 'static');\r\n                isHTML   = $node.is('html');\r\n              }\r\n            }\r\n            return ($node && $node.length > 0)\r\n              ? $node\r\n              : $()\r\n            ;\r\n          },\r\n          positions: function() {\r\n            return {\r\n              'top left'      : false,\r\n              'top center'    : false,\r\n              'top right'     : false,\r\n              'bottom left'   : false,\r\n              'bottom center' : false,\r\n              'bottom right'  : false,\r\n              'left center'   : false,\r\n              'right center'  : false\r\n            };\r\n          },\r\n          nextPosition: function(position) {\r\n            var\r\n              positions          = position.split(' '),\r\n              verticalPosition   = positions[0],\r\n              horizontalPosition = positions[1],\r\n              opposite = {\r\n                top    : 'bottom',\r\n                bottom : 'top',\r\n                left   : 'right',\r\n                right  : 'left'\r\n              },\r\n              adjacent = {\r\n                left   : 'center',\r\n                center : 'right',\r\n                right  : 'left'\r\n              },\r\n              backup = {\r\n                'top left'      : 'top center',\r\n                'top center'    : 'top right',\r\n                'top right'     : 'right center',\r\n                'right center'  : 'bottom right',\r\n                'bottom right'  : 'bottom center',\r\n                'bottom center' : 'bottom left',\r\n                'bottom left'   : 'left center',\r\n                'left center'   : 'top left'\r\n              },\r\n              adjacentsAvailable = (verticalPosition == 'top' || verticalPosition == 'bottom'),\r\n              oppositeTried = false,\r\n              adjacentTried = false,\r\n              nextPosition  = false\r\n            ;\r\n            if(!triedPositions) {\r\n              module.verbose('All available positions available');\r\n              triedPositions = module.get.positions();\r\n            }\r\n\r\n            module.debug('Recording last position tried', position);\r\n            triedPositions[position] = true;\r\n\r\n            if(settings.prefer === 'opposite') {\r\n              nextPosition  = [opposite[verticalPosition], horizontalPosition];\r\n              nextPosition  = nextPosition.join(' ');\r\n              oppositeTried = (triedPositions[nextPosition] === true);\r\n              module.debug('Trying opposite strategy', nextPosition);\r\n            }\r\n            if((settings.prefer === 'adjacent') && adjacentsAvailable ) {\r\n              nextPosition  = [verticalPosition, adjacent[horizontalPosition]];\r\n              nextPosition  = nextPosition.join(' ');\r\n              adjacentTried = (triedPositions[nextPosition] === true);\r\n              module.debug('Trying adjacent strategy', nextPosition);\r\n            }\r\n            if(adjacentTried || oppositeTried) {\r\n              module.debug('Using backup position', nextPosition);\r\n              nextPosition = backup[position];\r\n            }\r\n            return nextPosition;\r\n          }\r\n        },\r\n\r\n        set: {\r\n          position: function(position, calculations) {\r\n\r\n            // exit conditions\r\n            if($target.length === 0 || $popup.length === 0) {\r\n              module.error(error.notFound);\r\n              return;\r\n            }\r\n            var\r\n              offset,\r\n              distanceAway,\r\n              target,\r\n              popup,\r\n              parent,\r\n              positioning,\r\n              popupOffset,\r\n              distanceFromBoundary\r\n            ;\r\n\r\n            calculations = calculations || module.get.calculations();\r\n            position     = position     || $module.data(metadata.position) || settings.position;\r\n\r\n            offset       = $module.data(metadata.offset) || settings.offset;\r\n            distanceAway = settings.distanceAway;\r\n\r\n            // shorthand\r\n            target = calculations.target;\r\n            popup  = calculations.popup;\r\n            parent = calculations.parent;\r\n\r\n            if(target.width === 0 && target.height === 0 && !(target.element instanceof SVGGraphicsElement)) {\r\n              module.debug('Popup target is hidden, no action taken');\r\n              return false;\r\n            }\r\n\r\n            if(settings.inline) {\r\n              module.debug('Adding margin to calculation', target.margin);\r\n              if(position == 'left center' || position == 'right center') {\r\n                offset       +=  target.margin.top;\r\n                distanceAway += -target.margin.left;\r\n              }\r\n              else if (position == 'top left' || position == 'top center' || position == 'top right') {\r\n                offset       += target.margin.left;\r\n                distanceAway -= target.margin.top;\r\n              }\r\n              else {\r\n                offset       += target.margin.left;\r\n                distanceAway += target.margin.top;\r\n              }\r\n            }\r\n\r\n            module.debug('Determining popup position from calculations', position, calculations);\r\n\r\n            if (module.is.rtl()) {\r\n              position = position.replace(/left|right/g, function (match) {\r\n                return (match == 'left')\r\n                  ? 'right'\r\n                  : 'left'\r\n                ;\r\n              });\r\n              module.debug('RTL: Popup position updated', position);\r\n            }\r\n\r\n            // if last attempt use specified last resort position\r\n            if(searchDepth == settings.maxSearchDepth && typeof settings.lastResort === 'string') {\r\n              position = settings.lastResort;\r\n            }\r\n\r\n            switch (position) {\r\n              case 'top left':\r\n                positioning = {\r\n                  top    : 'auto',\r\n                  bottom : parent.height - target.top + distanceAway,\r\n                  left   : target.left + offset,\r\n                  right  : 'auto'\r\n                };\r\n              break;\r\n              case 'top center':\r\n                positioning = {\r\n                  bottom : parent.height - target.top + distanceAway,\r\n                  left   : target.left + (target.width / 2) - (popup.width / 2) + offset,\r\n                  top    : 'auto',\r\n                  right  : 'auto'\r\n                };\r\n              break;\r\n              case 'top right':\r\n                positioning = {\r\n                  bottom :  parent.height - target.top + distanceAway,\r\n                  right  :  parent.width - target.left - target.width - offset,\r\n                  top    : 'auto',\r\n                  left   : 'auto'\r\n                };\r\n              break;\r\n              case 'left center':\r\n                positioning = {\r\n                  top    : target.top + (target.height / 2) - (popup.height / 2) + offset,\r\n                  right  : parent.width - target.left + distanceAway,\r\n                  left   : 'auto',\r\n                  bottom : 'auto'\r\n                };\r\n              break;\r\n              case 'right center':\r\n                positioning = {\r\n                  top    : target.top + (target.height / 2) - (popup.height / 2) + offset,\r\n                  left   : target.left + target.width + distanceAway,\r\n                  bottom : 'auto',\r\n                  right  : 'auto'\r\n                };\r\n              break;\r\n              case 'bottom left':\r\n                positioning = {\r\n                  top    : target.top + target.height + distanceAway,\r\n                  left   : target.left + offset,\r\n                  bottom : 'auto',\r\n                  right  : 'auto'\r\n                };\r\n              break;\r\n              case 'bottom center':\r\n                positioning = {\r\n                  top    : target.top + target.height + distanceAway,\r\n                  left   : target.left + (target.width / 2) - (popup.width / 2) + offset,\r\n                  bottom : 'auto',\r\n                  right  : 'auto'\r\n                };\r\n              break;\r\n              case 'bottom right':\r\n                positioning = {\r\n                  top    : target.top + target.height + distanceAway,\r\n                  right  : parent.width - target.left  - target.width - offset,\r\n                  left   : 'auto',\r\n                  bottom : 'auto'\r\n                };\r\n              break;\r\n            }\r\n            if(positioning === undefined) {\r\n              module.error(error.invalidPosition, position);\r\n            }\r\n\r\n            module.debug('Calculated popup positioning values', positioning);\r\n\r\n            // tentatively place on stage\r\n            $popup\r\n              .css(positioning)\r\n              .removeClass(className.position)\r\n              .addClass(position)\r\n              .addClass(className.loading)\r\n            ;\r\n\r\n            popupOffset = module.get.popupOffset();\r\n\r\n            // see if any boundaries are surpassed with this tentative position\r\n            distanceFromBoundary = module.get.distanceFromBoundary(popupOffset, calculations);\r\n\r\n            if( module.is.offstage(distanceFromBoundary, position) ) {\r\n              module.debug('Position is outside viewport', position);\r\n              if(searchDepth < settings.maxSearchDepth) {\r\n                searchDepth++;\r\n                position = module.get.nextPosition(position);\r\n                module.debug('Trying new position', position);\r\n                return ($popup)\r\n                  ? module.set.position(position, calculations)\r\n                  : false\r\n                ;\r\n              }\r\n              else {\r\n                if(settings.lastResort) {\r\n                  module.debug('No position found, showing with last position');\r\n                }\r\n                else {\r\n                  module.debug('Popup could not find a position to display', $popup);\r\n                  module.error(error.cannotPlace, element);\r\n                  module.remove.attempts();\r\n                  module.remove.loading();\r\n                  module.reset();\r\n                  settings.onUnplaceable.call($popup, element);\r\n                  return false;\r\n                }\r\n              }\r\n            }\r\n            module.debug('Position is on stage', position);\r\n            module.remove.attempts();\r\n            module.remove.loading();\r\n            if( settings.setFluidWidth && module.is.fluid() ) {\r\n              module.set.fluidWidth(calculations);\r\n            }\r\n            return true;\r\n          },\r\n\r\n          fluidWidth: function(calculations) {\r\n            calculations = calculations || module.get.calculations();\r\n            module.debug('Automatically setting element width to parent width', calculations.parent.width);\r\n            $popup.css('width', calculations.container.width);\r\n          },\r\n\r\n          variation: function(variation) {\r\n            variation = variation || module.get.variation();\r\n            if(variation && module.has.popup() ) {\r\n              module.verbose('Adding variation to popup', variation);\r\n              $popup.addClass(variation);\r\n            }\r\n          },\r\n\r\n          visible: function() {\r\n            $module.addClass(className.visible);\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          loading: function() {\r\n            $popup.removeClass(className.loading);\r\n          },\r\n          variation: function(variation) {\r\n            variation = variation || module.get.variation();\r\n            if(variation) {\r\n              module.verbose('Removing variation', variation);\r\n              $popup.removeClass(variation);\r\n            }\r\n          },\r\n          visible: function() {\r\n            $module.removeClass(className.visible);\r\n          },\r\n          attempts: function() {\r\n            module.verbose('Resetting all searched positions');\r\n            searchDepth    = 0;\r\n            triedPositions = false;\r\n          }\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            module.debug('Binding popup events to module');\r\n            if(settings.on == 'click') {\r\n              $module\r\n                .on('click' + eventNamespace, module.toggle)\r\n              ;\r\n            }\r\n            if(settings.on == 'hover' && hasTouch) {\r\n              $module\r\n                .on('touchstart' + eventNamespace, module.event.touchstart)\r\n              ;\r\n            }\r\n            if( module.get.startEvent() ) {\r\n              $module\r\n                .on(module.get.startEvent() + eventNamespace, module.event.start)\r\n                .on(module.get.endEvent() + eventNamespace, module.event.end)\r\n              ;\r\n            }\r\n            if(settings.target) {\r\n              module.debug('Target set to element', $target);\r\n            }\r\n            $window.on('resize' + elementNamespace, module.event.resize);\r\n          },\r\n          popup: function() {\r\n            module.verbose('Allowing hover events on popup to prevent closing');\r\n            if( $popup && module.has.popup() ) {\r\n              $popup\r\n                .on('mouseenter' + eventNamespace, module.event.start)\r\n                .on('mouseleave' + eventNamespace, module.event.end)\r\n              ;\r\n            }\r\n          },\r\n          close: function() {\r\n            if(settings.hideOnScroll === true || (settings.hideOnScroll == 'auto' && settings.on != 'click'))   {\r\n              $document\r\n                .one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully)\r\n              ;\r\n              $context\r\n                .one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully)\r\n              ;\r\n            }\r\n            if(settings.on == 'hover' && openedWithTouch) {\r\n              module.verbose('Binding popup close event to document');\r\n              $document\r\n                .on('touchstart' + elementNamespace, function(event) {\r\n                  module.verbose('Touched away from popup');\r\n                  module.event.hideGracefully.call(element, event);\r\n                })\r\n              ;\r\n            }\r\n            if(settings.on == 'click' && settings.closable) {\r\n              module.verbose('Binding popup close event to document');\r\n              $document\r\n                .on('click' + elementNamespace, function(event) {\r\n                  module.verbose('Clicked away from popup');\r\n                  module.event.hideGracefully.call(element, event);\r\n                })\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        unbind: {\r\n          close: function() {\r\n            if(settings.hideOnScroll === true || (settings.hideOnScroll == 'auto' && settings.on != 'click')) {\r\n              $document\r\n                .off('scroll' + elementNamespace, module.hide)\r\n              ;\r\n              $context\r\n                .off('scroll' + elementNamespace, module.hide)\r\n              ;\r\n            }\r\n            if(settings.on == 'hover' && openedWithTouch) {\r\n              $document\r\n                .off('touchstart' + elementNamespace)\r\n              ;\r\n              openedWithTouch = false;\r\n            }\r\n            if(settings.on == 'click' && settings.closable) {\r\n              module.verbose('Removing close event from document');\r\n              $document\r\n                .off('click' + elementNamespace)\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        has: {\r\n          popup: function() {\r\n            return ($popup && $popup.length > 0);\r\n          }\r\n        },\r\n\r\n        is: {\r\n          offstage: function(distanceFromBoundary, position) {\r\n            var\r\n              offstage = []\r\n            ;\r\n            // return boundaries that have been surpassed\r\n            $.each(distanceFromBoundary, function(direction, distance) {\r\n              if(distance < -settings.jitter) {\r\n                module.debug('Position exceeds allowable distance from edge', direction, distance, position);\r\n                offstage.push(direction);\r\n              }\r\n            });\r\n            if(offstage.length > 0) {\r\n              return true;\r\n            }\r\n            else {\r\n              return false;\r\n            }\r\n          },\r\n          active: function() {\r\n            return $module.hasClass(className.active);\r\n          },\r\n          animating: function() {\r\n            return ($popup !== undefined && $popup.hasClass(className.animating) );\r\n          },\r\n          fluid: function() {\r\n            return ($popup !== undefined && $popup.hasClass(className.fluid));\r\n          },\r\n          visible: function() {\r\n            return ($popup !== undefined && $popup.hasClass(className.visible));\r\n          },\r\n          dropdown: function() {\r\n            return $module.hasClass(className.dropdown);\r\n          },\r\n          hidden: function() {\r\n            return !module.is.visible();\r\n          },\r\n          rtl: function () {\r\n            return $module.css('direction') == 'rtl';\r\n          }\r\n        },\r\n\r\n        reset: function() {\r\n          module.remove.visible();\r\n          if(settings.preserve) {\r\n            if($.fn.transition !== undefined) {\r\n              $popup\r\n                .transition('remove transition')\r\n              ;\r\n            }\r\n          }\r\n          else {\r\n            module.removePopup();\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.popup.settings = {\r\n\r\n  name         : 'Popup',\r\n\r\n  // module settings\r\n  debug        : false,\r\n  verbose      : false,\r\n  performance  : true,\r\n  namespace    : 'popup',\r\n\r\n  // callback only when element added to dom\r\n  onCreate     : function(){},\r\n\r\n  // callback before element removed from dom\r\n  onRemove     : function(){},\r\n\r\n  // callback before show animation\r\n  onShow       : function(){},\r\n\r\n  // callback after show animation\r\n  onVisible    : function(){},\r\n\r\n  // callback before hide animation\r\n  onHide       : function(){},\r\n\r\n  // callback when popup cannot be positioned in visible screen\r\n  onUnplaceable: function(){},\r\n\r\n  // callback after hide animation\r\n  onHidden     : function(){},\r\n\r\n  // when to show popup\r\n  on           : 'hover',\r\n\r\n  // whether to add touchstart events when using hover\r\n  addTouchEvents : true,\r\n\r\n  // default position relative to element\r\n  position     : 'top left',\r\n\r\n  // name of variation to use\r\n  variation    : '',\r\n\r\n  // whether popup should be moved to context\r\n  movePopup      : true,\r\n\r\n  // element which popup should be relative to\r\n  target         : false,\r\n\r\n  // jq selector or element that should be used as popup\r\n  popup          : false,\r\n\r\n  // popup should remain inline next to activator\r\n  inline         : false,\r\n\r\n  // popup should be removed from page on hide\r\n  preserve       : false,\r\n\r\n  // popup should not close when being hovered on\r\n  hoverable      : false,\r\n\r\n  // explicitly set content\r\n  content      : false,\r\n\r\n  // explicitly set html\r\n  html         : false,\r\n\r\n  // explicitly set title\r\n  title        : false,\r\n\r\n  // whether automatically close on clickaway when on click\r\n  closable     : true,\r\n\r\n  // automatically hide on scroll\r\n  hideOnScroll : 'auto',\r\n\r\n  // hide other popups on show\r\n  exclusive    : false,\r\n\r\n  // context to attach popups\r\n  context      : 'body',\r\n\r\n  // position to prefer when calculating new position\r\n  prefer       : 'opposite',\r\n\r\n  // specify position to appear even if it doesn't fit\r\n  lastResort   : false,\r\n\r\n  // delay used to prevent accidental refiring of animations due to user error\r\n  delay        : {\r\n    show : 50,\r\n    hide : 70\r\n  },\r\n\r\n  // whether fluid variation should assign width explicitly\r\n  setFluidWidth  : true,\r\n\r\n  // transition settings\r\n  duration       : 200,\r\n  transition     : 'scale',\r\n\r\n  // distance away from activating element in px\r\n  distanceAway   : 0,\r\n\r\n  // number of pixels an element is allowed to be \"offstage\" for a position to be chosen (allows for rounding)\r\n  jitter         : 2,\r\n\r\n  // offset on aligning axis from calculated position\r\n  offset         : 0,\r\n\r\n  // maximum times to look for a position before failing (9 positions total)\r\n  maxSearchDepth : 15,\r\n\r\n  error: {\r\n    invalidPosition : 'The position you specified is not a valid position',\r\n    cannotPlace     : 'Popup does not fit within the boundaries of the viewport',\r\n    method          : 'The method you called is not defined.',\r\n    noTransition    : 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>',\r\n    notFound        : 'The target or popup you specified does not exist on the page'\r\n  },\r\n\r\n  metadata: {\r\n    activator : 'activator',\r\n    content   : 'content',\r\n    html      : 'html',\r\n    offset    : 'offset',\r\n    position  : 'position',\r\n    title     : 'title',\r\n    variation : 'variation'\r\n  },\r\n\r\n  className   : {\r\n    active    : 'active',\r\n    animating : 'animating',\r\n    dropdown  : 'dropdown',\r\n    fluid     : 'fluid',\r\n    loading   : 'loading',\r\n    popup     : 'ui popup',\r\n    position  : 'top left center bottom right',\r\n    visible   : 'visible'\r\n  },\r\n\r\n  selector    : {\r\n    popup    : '.ui.popup'\r\n  },\r\n\r\n  templates: {\r\n    escape: function(string) {\r\n      var\r\n        badChars     = /[&<>\"'`]/g,\r\n        shouldEscape = /[&<>\"'`]/,\r\n        escape       = {\r\n          \"&\": \"&amp;\",\r\n          \"<\": \"&lt;\",\r\n          \">\": \"&gt;\",\r\n          '\"': \"&quot;\",\r\n          \"'\": \"&#x27;\",\r\n          \"`\": \"&#x60;\"\r\n        },\r\n        escapedChar  = function(chr) {\r\n          return escape[chr];\r\n        }\r\n      ;\r\n      if(shouldEscape.test(string)) {\r\n        return string.replace(badChars, escapedChar);\r\n      }\r\n      return string;\r\n    },\r\n    popup: function(text) {\r\n      var\r\n        html   = '',\r\n        escape = $.fn.popup.settings.templates.escape\r\n      ;\r\n      if(typeof text !== undefined) {\r\n        if(typeof text.title !== undefined && text.title) {\r\n          text.title = escape(text.title);\r\n          html += '<div class=\"header\">' + text.title + '</div>';\r\n        }\r\n        if(typeof text.content !== undefined && text.content) {\r\n          text.content = escape(text.content);\r\n          html += '<div class=\"content\">' + text.content + '</div>';\r\n        }\r\n      }\r\n      return html;\r\n    }\r\n  }\r\n\r\n};\r\n\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Progress\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.progress = function(parameters) {\r\n  var\r\n    $allModules    = $(this),\r\n\r\n    moduleSelector = $allModules.selector || '',\r\n\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings          = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.progress.settings, parameters)\r\n          : $.extend({}, $.fn.progress.settings),\r\n\r\n        className       = settings.className,\r\n        metadata        = settings.metadata,\r\n        namespace       = settings.namespace,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        $module         = $(this),\r\n        $bar            = $(this).find(selector.bar),\r\n        $progress       = $(this).find(selector.progress),\r\n        $label          = $(this).find(selector.label),\r\n\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        animating = false,\r\n        transitionEnd,\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.debug('Initializing progress bar', settings);\r\n\r\n          module.set.duration();\r\n          module.set.transitionEvent();\r\n\r\n          module.read.metadata();\r\n          module.read.settings();\r\n\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of progress', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n        destroy: function() {\r\n          module.verbose('Destroying previous progress for', $module);\r\n          clearInterval(instance.interval);\r\n          module.remove.state();\r\n          $module.removeData(moduleNamespace);\r\n          instance = undefined;\r\n        },\r\n\r\n        reset: function() {\r\n          module.set.percent(0);\r\n          module.set.value(0);\r\n        },\r\n\r\n        complete: function() {\r\n          if(module.percent === undefined || module.percent < 100) {\r\n            module.set.percent(100);\r\n          }\r\n        },\r\n\r\n        read: {\r\n          metadata: function() {\r\n            var\r\n              data = {\r\n                percent : $module.data(metadata.percent),\r\n                total   : $module.data(metadata.total),\r\n                value   : $module.data(metadata.value)\r\n              }\r\n            ;\r\n            if(data.percent) {\r\n              module.debug('Current percent value set from metadata', data.percent);\r\n              module.set.percent(data.percent);\r\n            }\r\n            if(data.total) {\r\n              module.debug('Total value set from metadata', data.total);\r\n              module.set.total(data.total);\r\n            }\r\n            if(data.value) {\r\n              module.debug('Current value set from metadata', data.value);\r\n              module.set.value(data.value);\r\n              module.set.progress(data.value);\r\n            }\r\n          },\r\n          settings: function() {\r\n            if(settings.total !== false) {\r\n              module.debug('Current total set in settings', settings.total);\r\n              module.set.total(settings.total);\r\n            }\r\n            if(settings.value !== false) {\r\n              module.debug('Current value set in settings', settings.value);\r\n              module.set.value(settings.value);\r\n              module.set.progress(module.value);\r\n            }\r\n            if(settings.percent !== false) {\r\n              module.debug('Current percent set in settings', settings.percent);\r\n              module.set.percent(settings.percent);\r\n            }\r\n          }\r\n        },\r\n\r\n        increment: function(incrementValue) {\r\n          var\r\n            maxValue,\r\n            startValue,\r\n            newValue\r\n          ;\r\n          if( module.has.total() ) {\r\n            startValue     = module.get.value();\r\n            incrementValue = incrementValue || 1;\r\n\r\n            newValue       = startValue + incrementValue;\r\n            maxValue       = module.get.total();\r\n\r\n            module.debug('Incrementing value', startValue, newValue, maxValue);\r\n            if(newValue > maxValue ) {\r\n              module.debug('Value cannot increment above total', maxValue);\r\n              newValue = maxValue;\r\n            }\r\n          }\r\n          else {\r\n            startValue     = module.get.percent();\r\n            incrementValue = incrementValue || module.get.randomValue();\r\n\r\n            newValue       = startValue + incrementValue;\r\n            maxValue       = 100;\r\n\r\n            module.debug('Incrementing percentage by', startValue, newValue);\r\n            if(newValue > maxValue ) {\r\n              module.debug('Value cannot increment above 100 percent');\r\n              newValue = maxValue;\r\n            }\r\n          }\r\n          module.set.progress(newValue);\r\n        },\r\n        decrement: function(decrementValue) {\r\n          var\r\n            total     = module.get.total(),\r\n            startValue,\r\n            newValue\r\n          ;\r\n          if(total) {\r\n            startValue     =  module.get.value();\r\n            decrementValue =  decrementValue || 1;\r\n            newValue       =  startValue - decrementValue;\r\n            module.debug('Decrementing value by', decrementValue, startValue);\r\n          }\r\n          else {\r\n            startValue     =  module.get.percent();\r\n            decrementValue =  decrementValue || module.get.randomValue();\r\n            newValue       =  startValue - decrementValue;\r\n            module.debug('Decrementing percentage by', decrementValue, startValue);\r\n          }\r\n\r\n          if(newValue < 0) {\r\n            module.debug('Value cannot decrement below 0');\r\n            newValue = 0;\r\n          }\r\n          module.set.progress(newValue);\r\n        },\r\n\r\n        has: {\r\n          total: function() {\r\n            return (module.get.total() !== false);\r\n          }\r\n        },\r\n\r\n        get: {\r\n          text: function(templateText) {\r\n            var\r\n              value   = module.value                || 0,\r\n              total   = module.total                || 0,\r\n              percent = (animating)\r\n                ? module.get.displayPercent()\r\n                : module.percent || 0,\r\n              left = (module.total > 0)\r\n                ? (total - value)\r\n                : (100 - percent)\r\n            ;\r\n            templateText = templateText || '';\r\n            templateText = templateText\r\n              .replace('{value}', value)\r\n              .replace('{total}', total)\r\n              .replace('{left}', left)\r\n              .replace('{percent}', percent)\r\n            ;\r\n            module.debug('Adding variables to progress bar text', templateText);\r\n            return templateText;\r\n          },\r\n\r\n\r\n          randomValue: function() {\r\n            module.debug('Generating random increment percentage');\r\n            return Math.floor((Math.random() * settings.random.max) + settings.random.min);\r\n          },\r\n\r\n          numericValue: function(value) {\r\n            return (typeof value === 'string')\r\n              ? (value.replace(/[^\\d.]/g, '') !== '')\r\n                ? +(value.replace(/[^\\d.]/g, ''))\r\n                : false\r\n              : value\r\n            ;\r\n          },\r\n\r\n          transitionEnd: function() {\r\n            var\r\n              element     = document.createElement('element'),\r\n              transitions = {\r\n                'transition'       :'transitionend',\r\n                'OTransition'      :'oTransitionEnd',\r\n                'MozTransition'    :'transitionend',\r\n                'WebkitTransition' :'webkitTransitionEnd'\r\n              },\r\n              transition\r\n            ;\r\n            for(transition in transitions){\r\n              if( element.style[transition] !== undefined ){\r\n                return transitions[transition];\r\n              }\r\n            }\r\n          },\r\n\r\n          // gets current displayed percentage (if animating values this is the intermediary value)\r\n          displayPercent: function() {\r\n            var\r\n              barWidth       = $bar.width(),\r\n              totalWidth     = $module.width(),\r\n              minDisplay     = parseInt($bar.css('min-width'), 10),\r\n              displayPercent = (barWidth > minDisplay)\r\n                ? (barWidth / totalWidth * 100)\r\n                : module.percent\r\n            ;\r\n            return (settings.precision > 0)\r\n              ? Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision)\r\n              : Math.round(displayPercent)\r\n            ;\r\n          },\r\n\r\n          percent: function() {\r\n            return module.percent || 0;\r\n          },\r\n          value: function() {\r\n            return module.value || 0;\r\n          },\r\n          total: function() {\r\n            return module.total || false;\r\n          }\r\n        },\r\n\r\n        is: {\r\n          success: function() {\r\n            return $module.hasClass(className.success);\r\n          },\r\n          warning: function() {\r\n            return $module.hasClass(className.warning);\r\n          },\r\n          error: function() {\r\n            return $module.hasClass(className.error);\r\n          },\r\n          active: function() {\r\n            return $module.hasClass(className.active);\r\n          },\r\n          visible: function() {\r\n            return $module.is(':visible');\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          state: function() {\r\n            module.verbose('Removing stored state');\r\n            delete module.total;\r\n            delete module.percent;\r\n            delete module.value;\r\n          },\r\n          active: function() {\r\n            module.verbose('Removing active state');\r\n            $module.removeClass(className.active);\r\n          },\r\n          success: function() {\r\n            module.verbose('Removing success state');\r\n            $module.removeClass(className.success);\r\n          },\r\n          warning: function() {\r\n            module.verbose('Removing warning state');\r\n            $module.removeClass(className.warning);\r\n          },\r\n          error: function() {\r\n            module.verbose('Removing error state');\r\n            $module.removeClass(className.error);\r\n          }\r\n        },\r\n\r\n        set: {\r\n          barWidth: function(value) {\r\n            if(value > 100) {\r\n              module.error(error.tooHigh, value);\r\n            }\r\n            else if (value < 0) {\r\n              module.error(error.tooLow, value);\r\n            }\r\n            else {\r\n              $bar\r\n                .css('width', value + '%')\r\n              ;\r\n              $module\r\n                .attr('data-percent', parseInt(value, 10))\r\n              ;\r\n            }\r\n          },\r\n          duration: function(duration) {\r\n            duration = duration || settings.duration;\r\n            duration = (typeof duration == 'number')\r\n              ? duration + 'ms'\r\n              : duration\r\n            ;\r\n            module.verbose('Setting progress bar transition duration', duration);\r\n            $bar\r\n              .css({\r\n                'transition-duration':  duration\r\n              })\r\n            ;\r\n          },\r\n          percent: function(percent) {\r\n            percent = (typeof percent == 'string')\r\n              ? +(percent.replace('%', ''))\r\n              : percent\r\n            ;\r\n            // round display percentage\r\n            percent = (settings.precision > 0)\r\n              ? Math.round(percent * (10 * settings.precision)) / (10 * settings.precision)\r\n              : Math.round(percent)\r\n            ;\r\n            module.percent = percent;\r\n            if( !module.has.total() ) {\r\n              module.value = (settings.precision > 0)\r\n                ? Math.round( (percent / 100) * module.total * (10 * settings.precision)) / (10 * settings.precision)\r\n                : Math.round( (percent / 100) * module.total * 10) / 10\r\n              ;\r\n              if(settings.limitValues) {\r\n                module.value = (module.value > 100)\r\n                  ? 100\r\n                  : (module.value < 0)\r\n                    ? 0\r\n                    : module.value\r\n                ;\r\n              }\r\n            }\r\n            module.set.barWidth(percent);\r\n            module.set.labelInterval();\r\n            module.set.labels();\r\n            settings.onChange.call(element, percent, module.value, module.total);\r\n          },\r\n          labelInterval: function() {\r\n            var\r\n              animationCallback = function() {\r\n                module.verbose('Bar finished animating, removing continuous label updates');\r\n                clearInterval(module.interval);\r\n                animating = false;\r\n                module.set.labels();\r\n              }\r\n            ;\r\n            clearInterval(module.interval);\r\n            $bar.one(transitionEnd + eventNamespace, animationCallback);\r\n            module.timer = setTimeout(animationCallback, settings.duration + 100);\r\n            animating = true;\r\n            module.interval = setInterval(module.set.labels, settings.framerate);\r\n          },\r\n          labels: function() {\r\n            module.verbose('Setting both bar progress and outer label text');\r\n            module.set.barLabel();\r\n            module.set.state();\r\n          },\r\n          label: function(text) {\r\n            text = text || '';\r\n            if(text) {\r\n              text = module.get.text(text);\r\n              module.debug('Setting label to text', text);\r\n              $label.text(text);\r\n            }\r\n          },\r\n          state: function(percent) {\r\n            percent = (percent !== undefined)\r\n              ? percent\r\n              : module.percent\r\n            ;\r\n            if(percent === 100) {\r\n              if(settings.autoSuccess && !(module.is.warning() || module.is.error())) {\r\n                module.set.success();\r\n                module.debug('Automatically triggering success at 100%');\r\n              }\r\n              else {\r\n                module.verbose('Reached 100% removing active state');\r\n                module.remove.active();\r\n              }\r\n            }\r\n            else if(percent > 0) {\r\n              module.verbose('Adjusting active progress bar label', percent);\r\n              module.set.active();\r\n            }\r\n            else {\r\n              module.remove.active();\r\n              module.set.label(settings.text.active);\r\n            }\r\n          },\r\n          barLabel: function(text) {\r\n            if(text !== undefined) {\r\n              $progress.text( module.get.text(text) );\r\n            }\r\n            else if(settings.label == 'ratio' && module.total) {\r\n              module.debug('Adding ratio to bar label');\r\n              $progress.text( module.get.text(settings.text.ratio) );\r\n            }\r\n            else if(settings.label == 'percent') {\r\n              module.debug('Adding percentage to bar label');\r\n              $progress.text( module.get.text(settings.text.percent) );\r\n            }\r\n          },\r\n          active: function(text) {\r\n            text = text || settings.text.active;\r\n            module.debug('Setting active state');\r\n            if(settings.showActivity && !module.is.active() ) {\r\n              $module.addClass(className.active);\r\n            }\r\n            module.remove.warning();\r\n            module.remove.error();\r\n            module.remove.success();\r\n            if(text) {\r\n              module.set.label(text);\r\n            }\r\n            settings.onActive.call(element, module.value, module.total);\r\n          },\r\n          success : function(text) {\r\n            text = text || settings.text.success;\r\n            module.debug('Setting success state');\r\n            $module.addClass(className.success);\r\n            module.remove.active();\r\n            module.remove.warning();\r\n            module.remove.error();\r\n            module.complete();\r\n            if(text) {\r\n              module.set.label(text);\r\n            }\r\n            settings.onSuccess.call(element, module.total);\r\n          },\r\n          warning : function(text) {\r\n            text = text || settings.text.warning;\r\n            module.debug('Setting warning state');\r\n            $module.addClass(className.warning);\r\n            module.remove.active();\r\n            module.remove.success();\r\n            module.remove.error();\r\n            module.complete();\r\n            if(text) {\r\n              module.set.label(text);\r\n            }\r\n            settings.onWarning.call(element, module.value, module.total);\r\n          },\r\n          error : function(text) {\r\n            text = text || settings.text.error;\r\n            module.debug('Setting error state');\r\n            $module.addClass(className.error);\r\n            module.remove.active();\r\n            module.remove.success();\r\n            module.remove.warning();\r\n            module.complete();\r\n            if(text) {\r\n              module.set.label(text);\r\n            }\r\n            settings.onError.call(element, module.value, module.total);\r\n          },\r\n          transitionEvent: function() {\r\n            transitionEnd = module.get.transitionEnd();\r\n          },\r\n          total: function(totalValue) {\r\n            module.total = totalValue;\r\n          },\r\n          value: function(value) {\r\n            module.value = value;\r\n          },\r\n          progress: function(value) {\r\n            var\r\n              numericValue = module.get.numericValue(value),\r\n              percentComplete\r\n            ;\r\n            if(numericValue === false) {\r\n              module.error(error.nonNumeric, value);\r\n            }\r\n            if( module.has.total() ) {\r\n              module.set.value(numericValue);\r\n              percentComplete = (numericValue / module.total) * 100;\r\n              module.debug('Calculating percent complete from total', percentComplete);\r\n              module.set.percent( percentComplete );\r\n            }\r\n            else {\r\n              percentComplete = numericValue;\r\n              module.debug('Setting value to exact percentage value', percentComplete);\r\n              module.set.percent( percentComplete );\r\n            }\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.progress.settings = {\r\n\r\n  name         : 'Progress',\r\n  namespace    : 'progress',\r\n\r\n  debug        : false,\r\n  verbose      : false,\r\n  performance  : true,\r\n\r\n  random       : {\r\n    min : 2,\r\n    max : 5\r\n  },\r\n\r\n  duration     : 300,\r\n\r\n  autoSuccess  : true,\r\n  showActivity : true,\r\n  limitValues  : true,\r\n\r\n  label        : 'percent',\r\n  precision    : 0,\r\n  framerate    : (1000 / 30), /// 30 fps\r\n\r\n  percent      : false,\r\n  total        : false,\r\n  value        : false,\r\n\r\n  onChange     : function(percent, value, total){},\r\n  onSuccess    : function(total){},\r\n  onActive     : function(value, total){},\r\n  onError      : function(value, total){},\r\n  onWarning    : function(value, total){},\r\n\r\n  error    : {\r\n    method     : 'The method you called is not defined.',\r\n    nonNumeric : 'Progress value is non numeric',\r\n    tooHigh    : 'Value specified is above 100%',\r\n    tooLow     : 'Value specified is below 0%'\r\n  },\r\n\r\n  regExp: {\r\n    variable: /\\{\\$*[A-z0-9]+\\}/g\r\n  },\r\n\r\n  metadata: {\r\n    percent : 'percent',\r\n    total   : 'total',\r\n    value   : 'value'\r\n  },\r\n\r\n  selector : {\r\n    bar      : '> .bar',\r\n    label    : '> .label',\r\n    progress : '.bar > .progress'\r\n  },\r\n\r\n  text : {\r\n    active  : false,\r\n    error   : false,\r\n    success : false,\r\n    warning : false,\r\n    percent : '{percent}%',\r\n    ratio   : '{value} of {total}'\r\n  },\r\n\r\n  className : {\r\n    active  : 'active',\r\n    error   : 'error',\r\n    success : 'success',\r\n    warning : 'warning'\r\n  }\r\n\r\n};\r\n\r\n\r\n})( jQuery, window, document );\r\n/*!\r\n * # Semantic UI 2.1.7 - Rating\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ($, window, document, undefined) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.rating = function(parameters) {\r\n  var\r\n    $allModules     = $(this),\r\n    moduleSelector  = $allModules.selector || '',\r\n\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n    returnedValue\r\n  ;\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings        = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.rating.settings, parameters)\r\n          : $.extend({}, $.fn.rating.settings),\r\n\r\n        namespace       = settings.namespace,\r\n        className       = settings.className,\r\n        metadata        = settings.metadata,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        element         = this,\r\n        instance        = $(this).data(moduleNamespace),\r\n\r\n        $module         = $(this),\r\n        $icon           = $module.find(selector.icon),\r\n\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.verbose('Initializing rating module', settings);\r\n\r\n          if($icon.length === 0) {\r\n            module.setup.layout();\r\n          }\r\n\r\n          if(settings.interactive) {\r\n            module.enable();\r\n          }\r\n          else {\r\n            module.disable();\r\n          }\r\n          module.set.rating( module.get.initialRating() );\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Instantiating module', settings);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous instance', instance);\r\n          module.remove.events();\r\n          $module\r\n            .removeData(moduleNamespace)\r\n          ;\r\n        },\r\n\r\n        refresh: function() {\r\n          $icon   = $module.find(selector.icon);\r\n        },\r\n\r\n        setup: {\r\n          layout: function() {\r\n            var\r\n              maxRating = module.get.maxRating(),\r\n              html      = $.fn.rating.settings.templates.icon(maxRating)\r\n            ;\r\n            module.debug('Generating icon html dynamically');\r\n            $module\r\n              .html(html)\r\n            ;\r\n            module.refresh();\r\n          }\r\n        },\r\n\r\n        event: {\r\n          mouseenter: function() {\r\n            var\r\n              $activeIcon = $(this)\r\n            ;\r\n            $activeIcon\r\n              .nextAll()\r\n                .removeClass(className.selected)\r\n            ;\r\n            $module\r\n              .addClass(className.selected)\r\n            ;\r\n            $activeIcon\r\n              .addClass(className.selected)\r\n                .prevAll()\r\n                .addClass(className.selected)\r\n            ;\r\n          },\r\n          mouseleave: function() {\r\n            $module\r\n              .removeClass(className.selected)\r\n            ;\r\n            $icon\r\n              .removeClass(className.selected)\r\n            ;\r\n          },\r\n          click: function() {\r\n            var\r\n              $activeIcon   = $(this),\r\n              currentRating = module.get.rating(),\r\n              rating        = $icon.index($activeIcon) + 1,\r\n              canClear      = (settings.clearable == 'auto')\r\n               ? ($icon.length === 1)\r\n               : settings.clearable\r\n            ;\r\n            if(canClear && currentRating == rating) {\r\n              module.clearRating();\r\n            }\r\n            else {\r\n              module.set.rating( rating );\r\n            }\r\n          }\r\n        },\r\n\r\n        clearRating: function() {\r\n          module.debug('Clearing current rating');\r\n          module.set.rating(0);\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            module.verbose('Binding events');\r\n            $module\r\n              .on('mouseenter' + eventNamespace, selector.icon, module.event.mouseenter)\r\n              .on('mouseleave' + eventNamespace, selector.icon, module.event.mouseleave)\r\n              .on('click'      + eventNamespace, selector.icon, module.event.click)\r\n            ;\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          events: function() {\r\n            module.verbose('Removing events');\r\n            $module\r\n              .off(eventNamespace)\r\n            ;\r\n          }\r\n        },\r\n\r\n        enable: function() {\r\n          module.debug('Setting rating to interactive mode');\r\n          module.bind.events();\r\n          $module\r\n            .removeClass(className.disabled)\r\n          ;\r\n        },\r\n\r\n        disable: function() {\r\n          module.debug('Setting rating to read-only mode');\r\n          module.remove.events();\r\n          $module\r\n            .addClass(className.disabled)\r\n          ;\r\n        },\r\n\r\n        get: {\r\n          initialRating: function() {\r\n            if($module.data(metadata.rating) !== undefined) {\r\n              $module.removeData(metadata.rating);\r\n              return $module.data(metadata.rating);\r\n            }\r\n            return settings.initialRating;\r\n          },\r\n          maxRating: function() {\r\n            if($module.data(metadata.maxRating) !== undefined) {\r\n              $module.removeData(metadata.maxRating);\r\n              return $module.data(metadata.maxRating);\r\n            }\r\n            return settings.maxRating;\r\n          },\r\n          rating: function() {\r\n            var\r\n              currentRating = $icon.filter('.' + className.active).length\r\n            ;\r\n            module.verbose('Current rating retrieved', currentRating);\r\n            return currentRating;\r\n          }\r\n        },\r\n\r\n        set: {\r\n          rating: function(rating) {\r\n            var\r\n              ratingIndex = (rating - 1 >= 0)\r\n                ? (rating - 1)\r\n                : 0,\r\n              $activeIcon = $icon.eq(ratingIndex)\r\n            ;\r\n            $module\r\n              .removeClass(className.selected)\r\n            ;\r\n            $icon\r\n              .removeClass(className.selected)\r\n              .removeClass(className.active)\r\n            ;\r\n            if(rating > 0) {\r\n              module.verbose('Setting current rating to', rating);\r\n              $activeIcon\r\n                .prevAll()\r\n                .andSelf()\r\n                  .addClass(className.active)\r\n              ;\r\n            }\r\n            settings.onRate.call(element, rating);\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if($allModules.length > 1) {\r\n              title += ' ' + '(' + $allModules.length + ')';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.rating.settings = {\r\n\r\n  name          : 'Rating',\r\n  namespace     : 'rating',\r\n\r\n  debug         : false,\r\n  verbose       : false,\r\n  performance   : true,\r\n\r\n  initialRating : 0,\r\n  interactive   : true,\r\n  maxRating     : 4,\r\n  clearable     : 'auto',\r\n\r\n  onRate        : function(rating){},\r\n\r\n  error         : {\r\n    method    : 'The method you called is not defined',\r\n    noMaximum : 'No maximum rating specified. Cannot generate HTML automatically'\r\n  },\r\n\r\n\r\n  metadata: {\r\n    rating    : 'rating',\r\n    maxRating : 'maxRating'\r\n  },\r\n\r\n  className : {\r\n    active   : 'active',\r\n    disabled : 'disabled',\r\n    selected : 'selected',\r\n    loading  : 'loading'\r\n  },\r\n\r\n  selector  : {\r\n    icon : '.icon'\r\n  },\r\n\r\n  templates: {\r\n    icon: function(maxRating) {\r\n      var\r\n        icon = 1,\r\n        html = ''\r\n      ;\r\n      while(icon <= maxRating) {\r\n        html += '<i class=\"icon\"></i>';\r\n        icon++;\r\n      }\r\n      return html;\r\n    }\r\n  }\r\n\r\n};\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Search\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ($, window, document, undefined) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.search = function(parameters) {\r\n  var\r\n    $allModules     = $(this),\r\n    moduleSelector  = $allModules.selector || '',\r\n\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n    returnedValue\r\n  ;\r\n  $(this)\r\n    .each(function() {\r\n      var\r\n        settings          = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.search.settings, parameters)\r\n          : $.extend({}, $.fn.search.settings),\r\n\r\n        className       = settings.className,\r\n        metadata        = settings.metadata,\r\n        regExp          = settings.regExp,\r\n        fields          = settings.fields,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n        namespace       = settings.namespace,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = namespace + '-module',\r\n\r\n        $module         = $(this),\r\n        $prompt         = $module.find(selector.prompt),\r\n        $searchButton   = $module.find(selector.searchButton),\r\n        $results        = $module.find(selector.results),\r\n        $result         = $module.find(selector.result),\r\n        $category       = $module.find(selector.category),\r\n\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.verbose('Initializing module');\r\n          module.determine.searchFields();\r\n          module.bind.events();\r\n          module.set.type();\r\n          module.create.results();\r\n          module.instantiate();\r\n        },\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n        destroy: function() {\r\n          module.verbose('Destroying instance');\r\n          $module\r\n            .off(eventNamespace)\r\n            .removeData(moduleNamespace)\r\n          ;\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            module.verbose('Binding events to search');\r\n            if(settings.automatic) {\r\n              $module\r\n                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)\r\n              ;\r\n              $prompt\r\n                .attr('autocomplete', 'off')\r\n              ;\r\n            }\r\n            $module\r\n              // prompt\r\n              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)\r\n              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)\r\n              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)\r\n              // search button\r\n              .on('click'     + eventNamespace, selector.searchButton, module.query)\r\n              // results\r\n              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)\r\n              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)\r\n              .on('click'     + eventNamespace, selector.result,  module.event.result.click)\r\n            ;\r\n          }\r\n        },\r\n\r\n        determine: {\r\n          searchFields: function() {\r\n            // this makes sure $.extend does not add specified search fields to default fields\r\n            // this is the only setting which should not extend defaults\r\n            if(parameters && parameters.searchFields !== undefined) {\r\n              settings.searchFields = parameters.searchFields;\r\n            }\r\n          }\r\n        },\r\n\r\n        event: {\r\n          input: function() {\r\n            clearTimeout(module.timer);\r\n            module.timer = setTimeout(module.query, settings.searchDelay);\r\n          },\r\n          focus: function() {\r\n            module.set.focus();\r\n            if( module.has.minimumCharacters() ) {\r\n              module.query();\r\n              if( module.can.show() ) {\r\n                module.showResults();\r\n              }\r\n            }\r\n          },\r\n          blur: function(event) {\r\n            var\r\n              pageLostFocus = (document.activeElement === this),\r\n              callback      = function() {\r\n                module.cancel.query();\r\n                module.remove.focus();\r\n                module.timer = setTimeout(module.hideResults, settings.hideDelay);\r\n              }\r\n            ;\r\n            if(pageLostFocus) {\r\n              return;\r\n            }\r\n            if(module.resultsClicked) {\r\n              module.debug('Determining if user action caused search to close');\r\n              $module\r\n                .one('click', selector.results, function(event) {\r\n                  if( !module.is.animating() && !module.is.hidden() ) {\r\n                    callback();\r\n                  }\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              module.debug('Input blurred without user action, closing results');\r\n              callback();\r\n            }\r\n          },\r\n          result: {\r\n            mousedown: function() {\r\n              module.resultsClicked = true;\r\n            },\r\n            mouseup: function() {\r\n              module.resultsClicked = false;\r\n            },\r\n            click: function(event) {\r\n              module.debug('Search result selected');\r\n              var\r\n                $result = $(this),\r\n                $title  = $result.find(selector.title).eq(0),\r\n                $link   = $result.find('a[href]').eq(0),\r\n                href    = $link.attr('href')   || false,\r\n                target  = $link.attr('target') || false,\r\n                title   = $title.html(),\r\n                // title is used for result lookup\r\n                value   = ($title.length > 0)\r\n                  ? $title.text()\r\n                  : false,\r\n                results = module.get.results(),\r\n                result  = $result.data(metadata.result) || module.get.result(value, results),\r\n                returnedValue\r\n              ;\r\n              if( $.isFunction(settings.onSelect) ) {\r\n                if(settings.onSelect.call(element, result, results) === false) {\r\n                  module.debug('Custom onSelect callback cancelled default select action');\r\n                  return;\r\n                }\r\n              }\r\n              module.hideResults();\r\n              if(value) {\r\n                module.set.value(value);\r\n              }\r\n              if(href) {\r\n                module.verbose('Opening search link found in result', $link);\r\n                if(target == '_blank' || event.ctrlKey) {\r\n                  window.open(href);\r\n                }\r\n                else {\r\n                  window.location.href = (href);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        },\r\n        handleKeyboard: function(event) {\r\n          var\r\n            // force selector refresh\r\n            $result      = $module.find(selector.result),\r\n            $category    = $module.find(selector.category),\r\n            currentIndex = $result.index( $result.filter('.' + className.active) ),\r\n            resultSize   = $result.length,\r\n\r\n            keyCode      = event.which,\r\n            keys         = {\r\n              backspace : 8,\r\n              enter     : 13,\r\n              escape    : 27,\r\n              upArrow   : 38,\r\n              downArrow : 40\r\n            },\r\n            newIndex\r\n          ;\r\n          // search shortcuts\r\n          if(keyCode == keys.escape) {\r\n            module.verbose('Escape key pressed, blurring search field');\r\n            module.trigger.blur();\r\n          }\r\n          if( module.is.visible() ) {\r\n            if(keyCode == keys.enter) {\r\n              module.verbose('Enter key pressed, selecting active result');\r\n              if( $result.filter('.' + className.active).length > 0 ) {\r\n                module.event.result.click.call($result.filter('.' + className.active), event);\r\n                event.preventDefault();\r\n                return false;\r\n              }\r\n            }\r\n            else if(keyCode == keys.upArrow) {\r\n              module.verbose('Up key pressed, changing active result');\r\n              newIndex = (currentIndex - 1 < 0)\r\n                ? currentIndex\r\n                : currentIndex - 1\r\n              ;\r\n              $category\r\n                .removeClass(className.active)\r\n              ;\r\n              $result\r\n                .removeClass(className.active)\r\n                .eq(newIndex)\r\n                  .addClass(className.active)\r\n                  .closest($category)\r\n                    .addClass(className.active)\r\n              ;\r\n              event.preventDefault();\r\n            }\r\n            else if(keyCode == keys.downArrow) {\r\n              module.verbose('Down key pressed, changing active result');\r\n              newIndex = (currentIndex + 1 >= resultSize)\r\n                ? currentIndex\r\n                : currentIndex + 1\r\n              ;\r\n              $category\r\n                .removeClass(className.active)\r\n              ;\r\n              $result\r\n                .removeClass(className.active)\r\n                .eq(newIndex)\r\n                  .addClass(className.active)\r\n                  .closest($category)\r\n                    .addClass(className.active)\r\n              ;\r\n              event.preventDefault();\r\n            }\r\n          }\r\n          else {\r\n            // query shortcuts\r\n            if(keyCode == keys.enter) {\r\n              module.verbose('Enter key pressed, executing query');\r\n              module.query();\r\n              module.set.buttonPressed();\r\n              $prompt.one('keyup', module.remove.buttonFocus);\r\n            }\r\n          }\r\n        },\r\n\r\n        setup: {\r\n          api: function() {\r\n            var\r\n              apiSettings = {\r\n                debug     : settings.debug,\r\n                on        : false,\r\n                cache     : 'local',\r\n                action    : 'search',\r\n                onError   : module.error\r\n              },\r\n              searchHTML\r\n            ;\r\n            module.verbose('First request, initializing API');\r\n            $module.api(apiSettings);\r\n          }\r\n        },\r\n\r\n        can: {\r\n          useAPI: function() {\r\n            return $.fn.api !== undefined;\r\n          },\r\n          show: function() {\r\n            return module.is.focused() && !module.is.visible() && !module.is.empty();\r\n          },\r\n          transition: function() {\r\n            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');\r\n          }\r\n        },\r\n\r\n        is: {\r\n          animating: function() {\r\n            return $results.hasClass(className.animating);\r\n          },\r\n          hidden: function() {\r\n            return $results.hasClass(className.hidden);\r\n          },\r\n          empty: function() {\r\n            return ($results.html() === '');\r\n          },\r\n          visible: function() {\r\n            return ($results.filter(':visible').length > 0);\r\n          },\r\n          focused: function() {\r\n            return ($prompt.filter(':focus').length > 0);\r\n          }\r\n        },\r\n\r\n        trigger: {\r\n          blur: function() {\r\n            var\r\n              events        = document.createEvent('HTMLEvents'),\r\n              promptElement = $prompt[0]\r\n            ;\r\n            if(promptElement) {\r\n              module.verbose('Triggering native blur event');\r\n              events.initEvent('blur', false, false);\r\n              promptElement.dispatchEvent(events);\r\n            }\r\n          }\r\n        },\r\n\r\n        get: {\r\n          inputEvent: function() {\r\n            var\r\n              prompt = $prompt[0],\r\n              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)\r\n                ? 'input'\r\n                : (prompt !== undefined && prompt.onpropertychange !== undefined)\r\n                  ? 'propertychange'\r\n                  : 'keyup'\r\n            ;\r\n            return inputEvent;\r\n          },\r\n          value: function() {\r\n            return $prompt.val();\r\n          },\r\n          results: function() {\r\n            var\r\n              results = $module.data(metadata.results)\r\n            ;\r\n            return results;\r\n          },\r\n          result: function(value, results) {\r\n            var\r\n              lookupFields = ['title', 'id'],\r\n              result       = false\r\n            ;\r\n            value = (value !== undefined)\r\n              ? value\r\n              : module.get.value()\r\n            ;\r\n            results = (results !== undefined)\r\n              ? results\r\n              : module.get.results()\r\n            ;\r\n            if(settings.type === 'category') {\r\n              module.debug('Finding result that matches', value);\r\n              $.each(results, function(index, category) {\r\n                if($.isArray(category.results)) {\r\n                  result = module.search.object(value, category.results, lookupFields)[0];\r\n                  // don't continue searching if a result is found\r\n                  if(result) {\r\n                    return false;\r\n                  }\r\n                }\r\n              });\r\n            }\r\n            else {\r\n              module.debug('Finding result in results object', value);\r\n              result = module.search.object(value, results, lookupFields)[0];\r\n            }\r\n            return result || false;\r\n          },\r\n        },\r\n\r\n        set: {\r\n          focus: function() {\r\n            $module.addClass(className.focus);\r\n          },\r\n          loading: function() {\r\n            $module.addClass(className.loading);\r\n          },\r\n          value: function(value) {\r\n            module.verbose('Setting search input value', value);\r\n            $prompt\r\n              .val(value)\r\n            ;\r\n          },\r\n          type: function(type) {\r\n            type = type || settings.type;\r\n            if(settings.type == 'category') {\r\n              $module.addClass(settings.type);\r\n            }\r\n          },\r\n          buttonPressed: function() {\r\n            $searchButton.addClass(className.pressed);\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          loading: function() {\r\n            $module.removeClass(className.loading);\r\n          },\r\n          focus: function() {\r\n            $module.removeClass(className.focus);\r\n          },\r\n          buttonPressed: function() {\r\n            $searchButton.removeClass(className.pressed);\r\n          }\r\n        },\r\n\r\n        query: function() {\r\n          var\r\n            searchTerm = module.get.value(),\r\n            cache = module.read.cache(searchTerm)\r\n          ;\r\n          if( module.has.minimumCharacters() )  {\r\n            if(cache) {\r\n              module.debug('Reading result from cache', searchTerm);\r\n              module.save.results(cache.results);\r\n              module.addResults(cache.html);\r\n              module.inject.id(cache.results);\r\n            }\r\n            else {\r\n              module.debug('Querying for', searchTerm);\r\n              if($.isPlainObject(settings.source) || $.isArray(settings.source)) {\r\n                module.search.local(searchTerm);\r\n              }\r\n              else if( module.can.useAPI() ) {\r\n                module.search.remote(searchTerm);\r\n              }\r\n              else {\r\n                module.error(error.source);\r\n              }\r\n            }\r\n            settings.onSearchQuery.call(element, searchTerm);\r\n          }\r\n          else {\r\n            module.hideResults();\r\n          }\r\n        },\r\n\r\n        search: {\r\n          local: function(searchTerm) {\r\n            var\r\n              results = module.search.object(searchTerm, settings.content),\r\n              searchHTML\r\n            ;\r\n            module.set.loading();\r\n            module.save.results(results);\r\n            module.debug('Returned local search results', results);\r\n\r\n            searchHTML = module.generateResults({\r\n              results: results\r\n            });\r\n            module.remove.loading();\r\n            module.addResults(searchHTML);\r\n            module.inject.id(results);\r\n            module.write.cache(searchTerm, {\r\n              html    : searchHTML,\r\n              results : results\r\n            });\r\n          },\r\n          remote: function(searchTerm) {\r\n            var\r\n              apiSettings = {\r\n                onSuccess : function(response) {\r\n                  module.parse.response.call(element, response, searchTerm);\r\n                },\r\n                onFailure: function() {\r\n                  module.displayMessage(error.serverError);\r\n                },\r\n                urlData: {\r\n                  query: searchTerm\r\n                }\r\n              }\r\n            ;\r\n            if( !$module.api('get request') ) {\r\n              module.setup.api();\r\n            }\r\n            $.extend(true, apiSettings, settings.apiSettings);\r\n            module.debug('Executing search', apiSettings);\r\n            module.cancel.query();\r\n            $module\r\n              .api('setting', apiSettings)\r\n              .api('query')\r\n            ;\r\n          },\r\n          object: function(searchTerm, source, searchFields) {\r\n            var\r\n              results      = [],\r\n              fuzzyResults = [],\r\n              searchExp    = searchTerm.toString().replace(regExp.escape, '\\\\$&'),\r\n              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),\r\n\r\n              // avoid duplicates when pushing results\r\n              addResult = function(array, result) {\r\n                var\r\n                  notResult      = ($.inArray(result, results) == -1),\r\n                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1)\r\n                ;\r\n                if(notResult && notFuzzyResult) {\r\n                  array.push(result);\r\n                }\r\n              }\r\n            ;\r\n            source = source || settings.source;\r\n            searchFields = (searchFields !== undefined)\r\n              ? searchFields\r\n              : settings.searchFields\r\n            ;\r\n\r\n            // search fields should be array to loop correctly\r\n            if(!$.isArray(searchFields)) {\r\n              searchFields = [searchFields];\r\n            }\r\n\r\n            // exit conditions if no source\r\n            if(source === undefined || source === false) {\r\n              module.error(error.source);\r\n              return [];\r\n            }\r\n\r\n            // iterate through search fields looking for matches\r\n            $.each(searchFields, function(index, field) {\r\n              $.each(source, function(label, content) {\r\n                var\r\n                  fieldExists = (typeof content[field] == 'string')\r\n                ;\r\n                if(fieldExists) {\r\n                  if( content[field].search(matchRegExp) !== -1) {\r\n                    // content starts with value (first in results)\r\n                    addResult(results, content);\r\n                  }\r\n                  else if(settings.searchFullText && module.fuzzySearch(searchTerm, content[field]) ) {\r\n                    // content fuzzy matches (last in results)\r\n                    addResult(fuzzyResults, content);\r\n                  }\r\n                }\r\n              });\r\n            });\r\n            return $.merge(results, fuzzyResults);\r\n          }\r\n        },\r\n\r\n        fuzzySearch: function(query, term) {\r\n          var\r\n            termLength  = term.length,\r\n            queryLength = query.length\r\n          ;\r\n          if(typeof query !== 'string') {\r\n            return false;\r\n          }\r\n          query = query.toLowerCase();\r\n          term  = term.toLowerCase();\r\n          if(queryLength > termLength) {\r\n            return false;\r\n          }\r\n          if(queryLength === termLength) {\r\n            return (query === term);\r\n          }\r\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\r\n            var\r\n              queryCharacter = query.charCodeAt(characterIndex)\r\n            ;\r\n            while(nextCharacterIndex < termLength) {\r\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\r\n                continue search;\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n          return true;\r\n        },\r\n\r\n        parse: {\r\n          response: function(response, searchTerm) {\r\n            var\r\n              searchHTML = module.generateResults(response)\r\n            ;\r\n            module.verbose('Parsing server response', response);\r\n            if(response !== undefined) {\r\n              if(searchTerm !== undefined && response[fields.results] !== undefined) {\r\n                module.addResults(searchHTML);\r\n                module.inject.id(response[fields.results]);\r\n                module.write.cache(searchTerm, {\r\n                  html    : searchHTML,\r\n                  results : response[fields.results]\r\n                });\r\n                module.save.results(response[fields.results]);\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        cancel: {\r\n          query: function() {\r\n            if( module.can.useAPI() ) {\r\n              $module.api('abort');\r\n            }\r\n          }\r\n        },\r\n\r\n        has: {\r\n          minimumCharacters: function() {\r\n            var\r\n              searchTerm    = module.get.value(),\r\n              numCharacters = searchTerm.length\r\n            ;\r\n            return (numCharacters >= settings.minCharacters);\r\n          }\r\n        },\r\n\r\n        clear: {\r\n          cache: function(value) {\r\n            var\r\n              cache = $module.data(metadata.cache)\r\n            ;\r\n            if(!value) {\r\n              module.debug('Clearing cache', value);\r\n              $module.removeData(metadata.cache);\r\n            }\r\n            else if(value && cache && cache[value]) {\r\n              module.debug('Removing value from cache', value);\r\n              delete cache[value];\r\n              $module.data(metadata.cache, cache);\r\n            }\r\n          }\r\n        },\r\n\r\n        read: {\r\n          cache: function(name) {\r\n            var\r\n              cache = $module.data(metadata.cache)\r\n            ;\r\n            if(settings.cache) {\r\n              module.verbose('Checking cache for generated html for query', name);\r\n              return (typeof cache == 'object') && (cache[name] !== undefined)\r\n                ? cache[name]\r\n                : false\r\n              ;\r\n            }\r\n            return false;\r\n          }\r\n        },\r\n\r\n        create: {\r\n          id: function(resultIndex, categoryIndex) {\r\n            var\r\n              resultID      = (resultIndex + 1), // not zero indexed\r\n              categoryID    = (categoryIndex + 1),\r\n              firstCharCode,\r\n              letterID,\r\n              id\r\n            ;\r\n            if(categoryIndex !== undefined) {\r\n              // start char code for \"A\"\r\n              letterID = String.fromCharCode(97 + categoryIndex);\r\n              id          = letterID + resultID;\r\n              module.verbose('Creating category result id', id);\r\n            }\r\n            else {\r\n              id = resultID;\r\n              module.verbose('Creating result id', id);\r\n            }\r\n            return id;\r\n          },\r\n          results: function() {\r\n            if($results.length === 0) {\r\n              $results = $('<div />')\r\n                .addClass(className.results)\r\n                .appendTo($module)\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        inject: {\r\n          result: function(result, resultIndex, categoryIndex) {\r\n            module.verbose('Injecting result into results');\r\n            var\r\n              $selectedResult = (categoryIndex !== undefined)\r\n                ? $results\r\n                    .children().eq(categoryIndex)\r\n                      .children(selector.result).eq(resultIndex)\r\n                : $results\r\n                    .children(selector.result).eq(resultIndex)\r\n            ;\r\n            module.verbose('Injecting results metadata', $selectedResult);\r\n            $selectedResult\r\n              .data(metadata.result, result)\r\n            ;\r\n          },\r\n          id: function(results) {\r\n            module.debug('Injecting unique ids into results');\r\n            var\r\n              // since results may be object, we must use counters\r\n              categoryIndex = 0,\r\n              resultIndex   = 0\r\n            ;\r\n            if(settings.type === 'category') {\r\n              // iterate through each category result\r\n              $.each(results, function(index, category) {\r\n                resultIndex = 0;\r\n                $.each(category.results, function(index, value) {\r\n                  var\r\n                    result = category.results[index]\r\n                  ;\r\n                  if(result.id === undefined) {\r\n                    result.id = module.create.id(resultIndex, categoryIndex);\r\n                  }\r\n                  module.inject.result(result, resultIndex, categoryIndex);\r\n                  resultIndex++;\r\n                });\r\n                categoryIndex++;\r\n              });\r\n            }\r\n            else {\r\n              // top level\r\n              $.each(results, function(index, value) {\r\n                var\r\n                  result = results[index]\r\n                ;\r\n                if(result.id === undefined) {\r\n                  result.id = module.create.id(resultIndex);\r\n                }\r\n                module.inject.result(result, resultIndex);\r\n                resultIndex++;\r\n              });\r\n            }\r\n            return results;\r\n          }\r\n        },\r\n\r\n        save: {\r\n          results: function(results) {\r\n            module.verbose('Saving current search results to metadata', results);\r\n            $module.data(metadata.results, results);\r\n          }\r\n        },\r\n\r\n        write: {\r\n          cache: function(name, value) {\r\n            var\r\n              cache = ($module.data(metadata.cache) !== undefined)\r\n                ? $module.data(metadata.cache)\r\n                : {}\r\n            ;\r\n            if(settings.cache) {\r\n              module.verbose('Writing generated html to cache', name, value);\r\n              cache[name] = value;\r\n              $module\r\n                .data(metadata.cache, cache)\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        addResults: function(html) {\r\n          if( $.isFunction(settings.onResultsAdd) ) {\r\n            if( settings.onResultsAdd.call($results, html) === false ) {\r\n              module.debug('onResultsAdd callback cancelled default action');\r\n              return false;\r\n            }\r\n          }\r\n          $results\r\n            .html(html)\r\n          ;\r\n          if( module.can.show() ) {\r\n            module.showResults();\r\n          }\r\n        },\r\n\r\n        showResults: function() {\r\n          if(!module.is.visible()) {\r\n            if( module.can.transition() ) {\r\n              module.debug('Showing results with css animations');\r\n              $results\r\n                .transition({\r\n                  animation  : settings.transition + ' in',\r\n                  debug      : settings.debug,\r\n                  verbose    : settings.verbose,\r\n                  duration   : settings.duration,\r\n                  queue      : true\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              module.debug('Showing results with javascript');\r\n              $results\r\n                .stop()\r\n                .fadeIn(settings.duration, settings.easing)\r\n              ;\r\n            }\r\n            settings.onResultsOpen.call($results);\r\n          }\r\n        },\r\n        hideResults: function() {\r\n          if( module.is.visible() ) {\r\n            if( module.can.transition() ) {\r\n              module.debug('Hiding results with css animations');\r\n              $results\r\n                .transition({\r\n                  animation  : settings.transition + ' out',\r\n                  debug      : settings.debug,\r\n                  verbose    : settings.verbose,\r\n                  duration   : settings.duration,\r\n                  queue      : true\r\n                })\r\n              ;\r\n            }\r\n            else {\r\n              module.debug('Hiding results with javascript');\r\n              $results\r\n                .stop()\r\n                .fadeOut(settings.duration, settings.easing)\r\n              ;\r\n            }\r\n            settings.onResultsClose.call($results);\r\n          }\r\n        },\r\n\r\n        generateResults: function(response) {\r\n          module.debug('Generating html from response', response);\r\n          var\r\n            template       = settings.templates[settings.type],\r\n            isProperObject = ($.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results])),\r\n            isProperArray  = ($.isArray(response[fields.results]) && response[fields.results].length > 0),\r\n            html           = ''\r\n          ;\r\n          if(isProperObject || isProperArray ) {\r\n            if(settings.maxResults > 0) {\r\n              if(isProperObject) {\r\n                if(settings.type == 'standard') {\r\n                  module.error(error.maxResults);\r\n                }\r\n              }\r\n              else {\r\n                response[fields.results] = response[fields.results].slice(0, settings.maxResults);\r\n              }\r\n            }\r\n            if($.isFunction(template)) {\r\n              html = template(response, fields);\r\n            }\r\n            else {\r\n              module.error(error.noTemplate, false);\r\n            }\r\n          }\r\n          else {\r\n            html = module.displayMessage(error.noResults, 'empty');\r\n          }\r\n          settings.onResults.call(element, response);\r\n          return html;\r\n        },\r\n\r\n        displayMessage: function(text, type) {\r\n          type = type || 'standard';\r\n          module.debug('Displaying message', text, type);\r\n          module.addResults( settings.templates.message(text, type) );\r\n          return settings.templates.message(text, type);\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if($allModules.length > 1) {\r\n              title += ' ' + '(' + $allModules.length + ')';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.search.settings = {\r\n\r\n  name           : 'Search',\r\n  namespace      : 'search',\r\n\r\n  debug          : false,\r\n  verbose        : false,\r\n  performance    : true,\r\n\r\n  type           : 'standard',\r\n  // template to use (specified in settings.templates)\r\n\r\n  minCharacters  : 1,\r\n  // minimum characters required to search\r\n\r\n  apiSettings    : false,\r\n  // API config\r\n\r\n  source         : false,\r\n  // object to search\r\n\r\n  searchFields   : [\r\n    'title',\r\n    'description'\r\n  ],\r\n  // fields to search\r\n\r\n  displayField   : '',\r\n  // field to display in standard results template\r\n\r\n  searchFullText : true,\r\n  // whether to include fuzzy results in local search\r\n\r\n  automatic      : true,\r\n  // whether to add events to prompt automatically\r\n\r\n  hideDelay      : 0,\r\n  // delay before hiding menu after blur\r\n\r\n  searchDelay    : 200,\r\n  // delay before searching\r\n\r\n  maxResults     : 7,\r\n  // maximum results returned from local\r\n\r\n  cache          : true,\r\n  // whether to store lookups in local cache\r\n\r\n  // transition settings\r\n  transition     : 'scale',\r\n  duration       : 200,\r\n  easing         : 'easeOutExpo',\r\n\r\n  // callbacks\r\n  onSelect       : false,\r\n  onResultsAdd   : false,\r\n\r\n  onSearchQuery  : function(query){},\r\n  onResults      : function(response){},\r\n\r\n  onResultsOpen  : function(){},\r\n  onResultsClose : function(){},\r\n\r\n  className: {\r\n    animating : 'animating',\r\n    active    : 'active',\r\n    empty     : 'empty',\r\n    focus     : 'focus',\r\n    hidden    : 'hidden',\r\n    loading   : 'loading',\r\n    results   : 'results',\r\n    pressed   : 'down'\r\n  },\r\n\r\n  error : {\r\n    source      : 'Cannot search. No source used, and Semantic API module was not included',\r\n    noResults   : 'Your search returned no results',\r\n    logging     : 'Error in debug logging, exiting.',\r\n    noEndpoint  : 'No search endpoint was specified',\r\n    noTemplate  : 'A valid template name was not specified.',\r\n    serverError : 'There was an issue querying the server.',\r\n    maxResults  : 'Results must be an array to use maxResults setting',\r\n    method      : 'The method you called is not defined.'\r\n  },\r\n\r\n  metadata: {\r\n    cache   : 'cache',\r\n    results : 'results',\r\n    result  : 'result'\r\n  },\r\n\r\n  regExp: {\r\n    escape     : /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\r\n    beginsWith : '(?:\\s|^)'\r\n  },\r\n\r\n  // maps api response attributes to internal representation\r\n  fields: {\r\n    categories      : 'results',     // array of categories (category view)\r\n    categoryName    : 'name',        // name of category (category view)\r\n    categoryResults : 'results',     // array of results (category view)\r\n    description     : 'description', // result description\r\n    image           : 'image',       // result image\r\n    price           : 'price',       // result price\r\n    results         : 'results',     // array of results (standard)\r\n    title           : 'title',       // result title\r\n    url             : 'url',         // result url\r\n    action          : 'action',      // \"view more\" object name\r\n    actionText      : 'text',        // \"view more\" text\r\n    actionURL       : 'url'          // \"view more\" url\r\n  },\r\n\r\n  selector : {\r\n    prompt       : '.prompt',\r\n    searchButton : '.search.button',\r\n    results      : '.results',\r\n    category     : '.category',\r\n    result       : '.result',\r\n    title        : '.title, .name'\r\n  },\r\n\r\n  templates: {\r\n    escape: function(string) {\r\n      var\r\n        badChars     = /[&<>\"'`]/g,\r\n        shouldEscape = /[&<>\"'`]/,\r\n        escape       = {\r\n          \"&\": \"&amp;\",\r\n          \"<\": \"&lt;\",\r\n          \">\": \"&gt;\",\r\n          '\"': \"&quot;\",\r\n          \"'\": \"&#x27;\",\r\n          \"`\": \"&#x60;\"\r\n        },\r\n        escapedChar  = function(chr) {\r\n          return escape[chr];\r\n        }\r\n      ;\r\n      if(shouldEscape.test(string)) {\r\n        return string.replace(badChars, escapedChar);\r\n      }\r\n      return string;\r\n    },\r\n    message: function(message, type) {\r\n      var\r\n        html = ''\r\n      ;\r\n      if(message !== undefined && type !== undefined) {\r\n        html +=  ''\r\n          + '<div class=\"message ' + type + '\">'\r\n        ;\r\n        // message type\r\n        if(type == 'empty') {\r\n          html += ''\r\n            + '<div class=\"header\">No Results</div class=\"header\">'\r\n            + '<div class=\"description\">' + message + '</div class=\"description\">'\r\n          ;\r\n        }\r\n        else {\r\n          html += ' <div class=\"description\">' + message + '</div>';\r\n        }\r\n        html += '</div>';\r\n      }\r\n      return html;\r\n    },\r\n    category: function(response, fields) {\r\n      var\r\n        html = '',\r\n        escape = $.fn.search.settings.templates.escape\r\n      ;\r\n      if(response[fields.categoryResults] !== undefined) {\r\n\r\n        // each category\r\n        $.each(response[fields.categoryResults], function(index, category) {\r\n          if(category[fields.results] !== undefined && category.results.length > 0) {\r\n\r\n            html  += '<div class=\"category\">';\r\n\r\n            if(category[fields.categoryName] !== undefined) {\r\n              html += '<div class=\"name\">' + category[fields.categoryName] + '</div>';\r\n            }\r\n\r\n            // each item inside category\r\n            $.each(category.results, function(index, result) {\r\n              if(result[fields.url]) {\r\n                html  += '<a class=\"result\" href=\"' + result[fields.url] + '\">';\r\n              }\r\n              else {\r\n                html  += '<a class=\"result\">';\r\n              }\r\n              if(result[fields.image] !== undefined) {\r\n                html += ''\r\n                  + '<div class=\"image\">'\r\n                  + ' <img src=\"' + result[fields.image] + '\">'\r\n                  + '</div>'\r\n                ;\r\n              }\r\n              html += '<div class=\"content\">';\r\n              if(result[fields.price] !== undefined) {\r\n                html += '<div class=\"price\">' + result[fields.price] + '</div>';\r\n              }\r\n              if(result[fields.title] !== undefined) {\r\n                html += '<div class=\"title\">' + result[fields.title] + '</div>';\r\n              }\r\n              if(result[fields.description] !== undefined) {\r\n                html += '<div class=\"description\">' + result[fields.description] + '</div>';\r\n              }\r\n              html  += ''\r\n                + '</div>'\r\n              ;\r\n              html += '</a>';\r\n            });\r\n            html  += ''\r\n              + '</div>'\r\n            ;\r\n          }\r\n        });\r\n        if(response[fields.action]) {\r\n          html += ''\r\n          + '<a href=\"' + response[fields.action][fields.actionURL] + '\" class=\"action\">'\r\n          +   response[fields.action][fields.actionText]\r\n          + '</a>';\r\n        }\r\n        return html;\r\n      }\r\n      return false;\r\n    },\r\n    standard: function(response, fields) {\r\n      var\r\n        html = ''\r\n      ;\r\n      if(response[fields.results] !== undefined) {\r\n\r\n        // each result\r\n        $.each(response[fields.results], function(index, result) {\r\n          if(result[fields.url]) {\r\n            html  += '<a class=\"result\" href=\"' + result[fields.url] + '\">';\r\n          }\r\n          else {\r\n            html  += '<a class=\"result\">';\r\n          }\r\n          if(result[fields.image] !== undefined) {\r\n            html += ''\r\n              + '<div class=\"image\">'\r\n              + ' <img src=\"' + result[fields.image] + '\">'\r\n              + '</div>'\r\n            ;\r\n          }\r\n          html += '<div class=\"content\">';\r\n          if(result[fields.price] !== undefined) {\r\n            html += '<div class=\"price\">' + result[fields.price] + '</div>';\r\n          }\r\n          if(result[fields.title] !== undefined) {\r\n            html += '<div class=\"title\">' + result[fields.title] + '</div>';\r\n          }\r\n          if(result[fields.description] !== undefined) {\r\n            html += '<div class=\"description\">' + result[fields.description] + '</div>';\r\n          }\r\n          html  += ''\r\n            + '</div>'\r\n          ;\r\n          html += '</a>';\r\n        });\r\n\r\n        if(response[fields.action]) {\r\n          html += ''\r\n          + '<a href=\"' + response[fields.action][fields.actionURL] + '\" class=\"action\">'\r\n          +   response[fields.action][fields.actionText]\r\n          + '</a>';\r\n        }\r\n        return html;\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Shape\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.shape = function(parameters) {\r\n  var\r\n    $allModules     = $(this),\r\n    $body           = $('body'),\r\n\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n\r\n    requestAnimationFrame = window.requestAnimationFrame\r\n      || window.mozRequestAnimationFrame\r\n      || window.webkitRequestAnimationFrame\r\n      || window.msRequestAnimationFrame\r\n      || function(callback) { setTimeout(callback, 0); },\r\n\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        moduleSelector = $allModules.selector || '',\r\n        settings       = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.shape.settings, parameters)\r\n          : $.extend({}, $.fn.shape.settings),\r\n\r\n        // internal aliases\r\n        namespace     = settings.namespace,\r\n        selector      = settings.selector,\r\n        error         = settings.error,\r\n        className     = settings.className,\r\n\r\n        // define namespaces for modules\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        // selector cache\r\n        $module       = $(this),\r\n        $sides        = $module.find(selector.sides),\r\n        $side         = $module.find(selector.side),\r\n\r\n        // private variables\r\n        nextIndex = false,\r\n        $activeSide,\r\n        $nextSide,\r\n\r\n        // standard module\r\n        element       = this,\r\n        instance      = $module.data(moduleNamespace),\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.verbose('Initializing module for', element);\r\n          module.set.defaultSide();\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, instance)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous module for', element);\r\n          $module\r\n            .removeData(moduleNamespace)\r\n            .off(eventNamespace)\r\n          ;\r\n        },\r\n\r\n        refresh: function() {\r\n          module.verbose('Refreshing selector cache for', element);\r\n          $module = $(element);\r\n          $sides  = $(this).find(selector.shape);\r\n          $side   = $(this).find(selector.side);\r\n        },\r\n\r\n        repaint: function() {\r\n          module.verbose('Forcing repaint event');\r\n          var\r\n            shape          = $sides[0] || document.createElement('div'),\r\n            fakeAssignment = shape.offsetWidth\r\n          ;\r\n        },\r\n\r\n        animate: function(propertyObject, callback) {\r\n          module.verbose('Animating box with properties', propertyObject);\r\n          callback = callback || function(event) {\r\n            module.verbose('Executing animation callback');\r\n            if(event !== undefined) {\r\n              event.stopPropagation();\r\n            }\r\n            module.reset();\r\n            module.set.active();\r\n          };\r\n          settings.beforeChange.call($nextSide[0]);\r\n          if(module.get.transitionEvent()) {\r\n            module.verbose('Starting CSS animation');\r\n            $module\r\n              .addClass(className.animating)\r\n            ;\r\n            $sides\r\n              .css(propertyObject)\r\n              .one(module.get.transitionEvent(), callback)\r\n            ;\r\n            module.set.duration(settings.duration);\r\n            requestAnimationFrame(function() {\r\n              $module\r\n                .addClass(className.animating)\r\n              ;\r\n              $activeSide\r\n                .addClass(className.hidden)\r\n              ;\r\n            });\r\n          }\r\n          else {\r\n            callback();\r\n          }\r\n        },\r\n\r\n        queue: function(method) {\r\n          module.debug('Queueing animation of', method);\r\n          $sides\r\n            .one(module.get.transitionEvent(), function() {\r\n              module.debug('Executing queued animation');\r\n              setTimeout(function(){\r\n                $module.shape(method);\r\n              }, 0);\r\n            })\r\n          ;\r\n        },\r\n\r\n        reset: function() {\r\n          module.verbose('Animating states reset');\r\n          $module\r\n            .removeClass(className.animating)\r\n            .attr('style', '')\r\n            .removeAttr('style')\r\n          ;\r\n          // removeAttr style does not consistently work in safari\r\n          $sides\r\n            .attr('style', '')\r\n            .removeAttr('style')\r\n          ;\r\n          $side\r\n            .attr('style', '')\r\n            .removeAttr('style')\r\n            .removeClass(className.hidden)\r\n          ;\r\n          $nextSide\r\n            .removeClass(className.animating)\r\n            .attr('style', '')\r\n            .removeAttr('style')\r\n          ;\r\n        },\r\n\r\n        is: {\r\n          complete: function() {\r\n            return ($side.filter('.' + className.active)[0] == $nextSide[0]);\r\n          },\r\n          animating: function() {\r\n            return $module.hasClass(className.animating);\r\n          }\r\n        },\r\n\r\n        set: {\r\n\r\n          defaultSide: function() {\r\n            $activeSide = $module.find('.' + settings.className.active);\r\n            $nextSide   = ( $activeSide.next(selector.side).length > 0 )\r\n              ? $activeSide.next(selector.side)\r\n              : $module.find(selector.side).first()\r\n            ;\r\n            nextIndex = false;\r\n            module.verbose('Active side set to', $activeSide);\r\n            module.verbose('Next side set to', $nextSide);\r\n          },\r\n\r\n          duration: function(duration) {\r\n            duration = duration || settings.duration;\r\n            duration = (typeof duration == 'number')\r\n              ? duration + 'ms'\r\n              : duration\r\n            ;\r\n            module.verbose('Setting animation duration', duration);\r\n            if(settings.duration || settings.duration === 0) {\r\n              $sides.add($side)\r\n                .css({\r\n                  '-webkit-transition-duration': duration,\r\n                  '-moz-transition-duration': duration,\r\n                  '-ms-transition-duration': duration,\r\n                  '-o-transition-duration': duration,\r\n                  'transition-duration': duration\r\n                })\r\n              ;\r\n            }\r\n          },\r\n\r\n          currentStageSize: function() {\r\n            var\r\n              $activeSide = $module.find('.' + settings.className.active),\r\n              width       = $activeSide.outerWidth(true),\r\n              height      = $activeSide.outerHeight(true)\r\n            ;\r\n            $module\r\n              .css({\r\n                width: width,\r\n                height: height\r\n              })\r\n            ;\r\n          },\r\n\r\n          stageSize: function() {\r\n            var\r\n              $clone      = $module.clone().addClass(className.loading),\r\n              $activeSide = $clone.find('.' + settings.className.active),\r\n              $nextSide   = (nextIndex)\r\n                ? $clone.find(selector.side).eq(nextIndex)\r\n                : ( $activeSide.next(selector.side).length > 0 )\r\n                  ? $activeSide.next(selector.side)\r\n                  : $clone.find(selector.side).first(),\r\n              newSize = {}\r\n            ;\r\n            module.set.currentStageSize();\r\n            $activeSide.removeClass(className.active);\r\n            $nextSide.addClass(className.active);\r\n            $clone.insertAfter($module);\r\n            newSize = {\r\n              width  : $nextSide.outerWidth(true),\r\n              height : $nextSide.outerHeight(true)\r\n            };\r\n            $clone.remove();\r\n            $module\r\n              .css(newSize)\r\n            ;\r\n            module.verbose('Resizing stage to fit new content', newSize);\r\n          },\r\n\r\n          nextSide: function(selector) {\r\n            nextIndex = selector;\r\n            $nextSide = $side.filter(selector);\r\n            nextIndex = $side.index($nextSide);\r\n            if($nextSide.length === 0) {\r\n              module.set.defaultSide();\r\n              module.error(error.side);\r\n            }\r\n            module.verbose('Next side manually set to', $nextSide);\r\n          },\r\n\r\n          active: function() {\r\n            module.verbose('Setting new side to active', $nextSide);\r\n            $side\r\n              .removeClass(className.active)\r\n            ;\r\n            $nextSide\r\n              .addClass(className.active)\r\n            ;\r\n            settings.onChange.call($nextSide[0]);\r\n            module.set.defaultSide();\r\n          }\r\n        },\r\n\r\n        flip: {\r\n\r\n          up: function() {\r\n            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\r\n              module.debug('Side already visible', $nextSide);\r\n              return;\r\n            }\r\n            if( !module.is.animating()) {\r\n              module.debug('Flipping up', $nextSide);\r\n              module.set.stageSize();\r\n              module.stage.above();\r\n              module.animate( module.get.transform.up() );\r\n            }\r\n            else {\r\n              module.queue('flip up');\r\n            }\r\n          },\r\n\r\n          down: function() {\r\n            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\r\n              module.debug('Side already visible', $nextSide);\r\n              return;\r\n            }\r\n            if( !module.is.animating()) {\r\n              module.debug('Flipping down', $nextSide);\r\n              module.set.stageSize();\r\n              module.stage.below();\r\n              module.animate( module.get.transform.down() );\r\n            }\r\n            else {\r\n              module.queue('flip down');\r\n            }\r\n          },\r\n\r\n          left: function() {\r\n            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\r\n              module.debug('Side already visible', $nextSide);\r\n              return;\r\n            }\r\n            if( !module.is.animating()) {\r\n              module.debug('Flipping left', $nextSide);\r\n              module.set.stageSize();\r\n              module.stage.left();\r\n              module.animate(module.get.transform.left() );\r\n            }\r\n            else {\r\n              module.queue('flip left');\r\n            }\r\n          },\r\n\r\n          right: function() {\r\n            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\r\n              module.debug('Side already visible', $nextSide);\r\n              return;\r\n            }\r\n            if( !module.is.animating()) {\r\n              module.debug('Flipping right', $nextSide);\r\n              module.set.stageSize();\r\n              module.stage.right();\r\n              module.animate(module.get.transform.right() );\r\n            }\r\n            else {\r\n              module.queue('flip right');\r\n            }\r\n          },\r\n\r\n          over: function() {\r\n            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\r\n              module.debug('Side already visible', $nextSide);\r\n              return;\r\n            }\r\n            if( !module.is.animating()) {\r\n              module.debug('Flipping over', $nextSide);\r\n              module.set.stageSize();\r\n              module.stage.behind();\r\n              module.animate(module.get.transform.over() );\r\n            }\r\n            else {\r\n              module.queue('flip over');\r\n            }\r\n          },\r\n\r\n          back: function() {\r\n            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\r\n              module.debug('Side already visible', $nextSide);\r\n              return;\r\n            }\r\n            if( !module.is.animating()) {\r\n              module.debug('Flipping back', $nextSide);\r\n              module.set.stageSize();\r\n              module.stage.behind();\r\n              module.animate(module.get.transform.back() );\r\n            }\r\n            else {\r\n              module.queue('flip back');\r\n            }\r\n          }\r\n\r\n        },\r\n\r\n        get: {\r\n\r\n          transform: {\r\n            up: function() {\r\n              var\r\n                translate = {\r\n                  y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),\r\n                  z: -($activeSide.outerHeight(true) / 2)\r\n                }\r\n              ;\r\n              return {\r\n                transform: 'translateY(' + translate.y + 'px) translateZ('+ translate.z + 'px) rotateX(-90deg)'\r\n              };\r\n            },\r\n\r\n            down: function() {\r\n              var\r\n                translate = {\r\n                  y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),\r\n                  z: -($activeSide.outerHeight(true) / 2)\r\n                }\r\n              ;\r\n              return {\r\n                transform: 'translateY(' + translate.y + 'px) translateZ('+ translate.z + 'px) rotateX(90deg)'\r\n              };\r\n            },\r\n\r\n            left: function() {\r\n              var\r\n                translate = {\r\n                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),\r\n                  z : -($activeSide.outerWidth(true) / 2)\r\n                }\r\n              ;\r\n              return {\r\n                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'\r\n              };\r\n            },\r\n\r\n            right: function() {\r\n              var\r\n                translate = {\r\n                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),\r\n                  z : -($activeSide.outerWidth(true) / 2)\r\n                }\r\n              ;\r\n              return {\r\n                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'\r\n              };\r\n            },\r\n\r\n            over: function() {\r\n              var\r\n                translate = {\r\n                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)\r\n                }\r\n              ;\r\n              return {\r\n                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'\r\n              };\r\n            },\r\n\r\n            back: function() {\r\n              var\r\n                translate = {\r\n                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)\r\n                }\r\n              ;\r\n              return {\r\n                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'\r\n              };\r\n            }\r\n          },\r\n\r\n          transitionEvent: function() {\r\n            var\r\n              element     = document.createElement('element'),\r\n              transitions = {\r\n                'transition'       :'transitionend',\r\n                'OTransition'      :'oTransitionEnd',\r\n                'MozTransition'    :'transitionend',\r\n                'WebkitTransition' :'webkitTransitionEnd'\r\n              },\r\n              transition\r\n            ;\r\n            for(transition in transitions){\r\n              if( element.style[transition] !== undefined ){\r\n                return transitions[transition];\r\n              }\r\n            }\r\n          },\r\n\r\n          nextSide: function() {\r\n            return ( $activeSide.next(selector.side).length > 0 )\r\n              ? $activeSide.next(selector.side)\r\n              : $module.find(selector.side).first()\r\n            ;\r\n          }\r\n\r\n        },\r\n\r\n        stage: {\r\n\r\n          above: function() {\r\n            var\r\n              box = {\r\n                origin : (($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),\r\n                depth  : {\r\n                  active : ($nextSide.outerHeight(true) / 2),\r\n                  next   : ($activeSide.outerHeight(true) / 2)\r\n                }\r\n              }\r\n            ;\r\n            module.verbose('Setting the initial animation position as above', $nextSide, box);\r\n            $sides\r\n              .css({\r\n                'transform' : 'translateZ(-' + box.depth.active + 'px)'\r\n              })\r\n            ;\r\n            $activeSide\r\n              .css({\r\n                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\r\n              })\r\n            ;\r\n            $nextSide\r\n              .addClass(className.animating)\r\n              .css({\r\n                'top'       : box.origin + 'px',\r\n                'transform' : 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'\r\n              })\r\n            ;\r\n          },\r\n\r\n          below: function() {\r\n            var\r\n              box = {\r\n                origin : (($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),\r\n                depth  : {\r\n                  active : ($nextSide.outerHeight(true) / 2),\r\n                  next   : ($activeSide.outerHeight(true) / 2)\r\n                }\r\n              }\r\n            ;\r\n            module.verbose('Setting the initial animation position as below', $nextSide, box);\r\n            $sides\r\n              .css({\r\n                'transform' : 'translateZ(-' + box.depth.active + 'px)'\r\n              })\r\n            ;\r\n            $activeSide\r\n              .css({\r\n                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\r\n              })\r\n            ;\r\n            $nextSide\r\n              .addClass(className.animating)\r\n              .css({\r\n                'top'       : box.origin + 'px',\r\n                'transform' : 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'\r\n              })\r\n            ;\r\n          },\r\n\r\n          left: function() {\r\n            var\r\n              height = {\r\n                active : $activeSide.outerWidth(true),\r\n                next   : $nextSide.outerWidth(true)\r\n              },\r\n              box = {\r\n                origin : ( ( height.active - height.next ) / 2),\r\n                depth  : {\r\n                  active : (height.next / 2),\r\n                  next   : (height.active / 2)\r\n                }\r\n              }\r\n            ;\r\n            module.verbose('Setting the initial animation position as left', $nextSide, box);\r\n            $sides\r\n              .css({\r\n                'transform' : 'translateZ(-' + box.depth.active + 'px)'\r\n              })\r\n            ;\r\n            $activeSide\r\n              .css({\r\n                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\r\n              })\r\n            ;\r\n            $nextSide\r\n              .addClass(className.animating)\r\n              .css({\r\n                'left'      : box.origin + 'px',\r\n                'transform' : 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'\r\n              })\r\n            ;\r\n          },\r\n\r\n          right: function() {\r\n            var\r\n              height = {\r\n                active : $activeSide.outerWidth(true),\r\n                next   : $nextSide.outerWidth(true)\r\n              },\r\n              box = {\r\n                origin : ( ( height.active - height.next ) / 2),\r\n                depth  : {\r\n                  active : (height.next / 2),\r\n                  next   : (height.active / 2)\r\n                }\r\n              }\r\n            ;\r\n            module.verbose('Setting the initial animation position as left', $nextSide, box);\r\n            $sides\r\n              .css({\r\n                'transform' : 'translateZ(-' + box.depth.active + 'px)'\r\n              })\r\n            ;\r\n            $activeSide\r\n              .css({\r\n                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\r\n              })\r\n            ;\r\n            $nextSide\r\n              .addClass(className.animating)\r\n              .css({\r\n                'left'      : box.origin + 'px',\r\n                'transform' : 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'\r\n              })\r\n            ;\r\n          },\r\n\r\n          behind: function() {\r\n            var\r\n              height = {\r\n                active : $activeSide.outerWidth(true),\r\n                next   : $nextSide.outerWidth(true)\r\n              },\r\n              box = {\r\n                origin : ( ( height.active - height.next ) / 2),\r\n                depth  : {\r\n                  active : (height.next / 2),\r\n                  next   : (height.active / 2)\r\n                }\r\n              }\r\n            ;\r\n            module.verbose('Setting the initial animation position as behind', $nextSide, box);\r\n            $activeSide\r\n              .css({\r\n                'transform' : 'rotateY(0deg)'\r\n              })\r\n            ;\r\n            $nextSide\r\n              .addClass(className.animating)\r\n              .css({\r\n                'left'      : box.origin + 'px',\r\n                'transform' : 'rotateY(-180deg)'\r\n              })\r\n            ;\r\n          }\r\n        },\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if($allModules.length > 1) {\r\n              title += ' ' + '(' + $allModules.length + ')';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.shape.settings = {\r\n\r\n  // module info\r\n  name : 'Shape',\r\n\r\n  // debug content outputted to console\r\n  debug      : false,\r\n\r\n  // verbose debug output\r\n  verbose    : false,\r\n\r\n  // performance data output\r\n  performance: true,\r\n\r\n  // event namespace\r\n  namespace  : 'shape',\r\n\r\n  // callback occurs on side change\r\n  beforeChange : function() {},\r\n  onChange     : function() {},\r\n\r\n  // allow animation to same side\r\n  allowRepeats: false,\r\n\r\n  // animation duration\r\n  duration   : false,\r\n\r\n  // possible errors\r\n  error: {\r\n    side   : 'You tried to switch to a side that does not exist.',\r\n    method : 'The method you called is not defined'\r\n  },\r\n\r\n  // classnames used\r\n  className   : {\r\n    animating : 'animating',\r\n    hidden    : 'hidden',\r\n    loading   : 'loading',\r\n    active    : 'active'\r\n  },\r\n\r\n  // selectors used\r\n  selector    : {\r\n    sides : '.sides',\r\n    side  : '.side'\r\n  }\r\n\r\n};\r\n\r\n\r\n})( jQuery, window, document );\r\n/*!\r\n * # Semantic UI 2.1.7 - Sidebar\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.sidebar = function(parameters) {\r\n  var\r\n    $allModules     = $(this),\r\n    $window         = $(window),\r\n    $document       = $(document),\r\n    $html           = $('html'),\r\n    $head           = $('head'),\r\n\r\n    moduleSelector  = $allModules.selector || '',\r\n\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n\r\n    requestAnimationFrame = window.requestAnimationFrame\r\n      || window.mozRequestAnimationFrame\r\n      || window.webkitRequestAnimationFrame\r\n      || window.msRequestAnimationFrame\r\n      || function(callback) { setTimeout(callback, 0); },\r\n\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings        = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.sidebar.settings, parameters)\r\n          : $.extend({}, $.fn.sidebar.settings),\r\n\r\n        selector        = settings.selector,\r\n        className       = settings.className,\r\n        namespace       = settings.namespace,\r\n        regExp          = settings.regExp,\r\n        error           = settings.error,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        $module         = $(this),\r\n        $context        = $(settings.context),\r\n\r\n        $sidebars       = $module.children(selector.sidebar),\r\n        $fixed          = $context.children(selector.fixed),\r\n        $pusher         = $context.children(selector.pusher),\r\n        $style,\r\n\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        elementNamespace,\r\n        id,\r\n        currentScroll,\r\n        transitionEvent,\r\n\r\n        module\r\n      ;\r\n\r\n      module      = {\r\n\r\n        initialize: function() {\r\n          module.debug('Initializing sidebar', parameters);\r\n\r\n          module.create.id();\r\n\r\n          transitionEvent = module.get.transitionEvent();\r\n\r\n          if(module.is.ios()) {\r\n            module.set.ios();\r\n          }\r\n\r\n          // avoids locking rendering if initialized in onReady\r\n          if(settings.delaySetup) {\r\n            requestAnimationFrame(module.setup.layout);\r\n          }\r\n          else {\r\n            module.setup.layout();\r\n          }\r\n\r\n          requestAnimationFrame(function() {\r\n            module.setup.cache();\r\n          });\r\n\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        create: {\r\n          id: function() {\r\n            id = (Math.random().toString(16) + '000000000').substr(2,8);\r\n            elementNamespace = '.' + id;\r\n            module.verbose('Creating unique id for element', id);\r\n          }\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous module for', $module);\r\n          $module\r\n            .off(eventNamespace)\r\n            .removeData(moduleNamespace)\r\n          ;\r\n          if(module.is.ios()) {\r\n            module.remove.ios();\r\n          }\r\n          // bound by uuid\r\n          $context.off(elementNamespace);\r\n          $window.off(elementNamespace);\r\n          $document.off(elementNamespace);\r\n        },\r\n\r\n        event: {\r\n          clickaway: function(event) {\r\n            var\r\n              clickedInPusher = ($pusher.find(event.target).length > 0 || $pusher.is(event.target)),\r\n              clickedContext  = ($context.is(event.target))\r\n            ;\r\n            if(clickedInPusher) {\r\n              module.verbose('User clicked on dimmed page');\r\n              module.hide();\r\n            }\r\n            if(clickedContext) {\r\n              module.verbose('User clicked on dimmable context (scaled out page)');\r\n              module.hide();\r\n            }\r\n          },\r\n          touch: function(event) {\r\n            //event.stopPropagation();\r\n          },\r\n          containScroll: function(event) {\r\n            if(element.scrollTop <= 0)  {\r\n              element.scrollTop = 1;\r\n            }\r\n            if((element.scrollTop + element.offsetHeight) >= element.scrollHeight) {\r\n              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;\r\n            }\r\n          },\r\n          scroll: function(event) {\r\n            if( $(event.target).closest(selector.sidebar).length === 0 ) {\r\n              event.preventDefault();\r\n            }\r\n          }\r\n        },\r\n\r\n        bind: {\r\n          clickaway: function() {\r\n            module.verbose('Adding clickaway events to context', $context);\r\n            if(settings.closable) {\r\n              $context\r\n                .on('click'    + elementNamespace, module.event.clickaway)\r\n                .on('touchend' + elementNamespace, module.event.clickaway)\r\n              ;\r\n            }\r\n          },\r\n          scrollLock: function() {\r\n            if(settings.scrollLock) {\r\n              module.debug('Disabling page scroll');\r\n              $window\r\n                .on('DOMMouseScroll' + elementNamespace, module.event.scroll)\r\n              ;\r\n            }\r\n            module.verbose('Adding events to contain sidebar scroll');\r\n            $document\r\n              .on('touchmove' + elementNamespace, module.event.touch)\r\n            ;\r\n            $module\r\n              .on('scroll' + eventNamespace, module.event.containScroll)\r\n            ;\r\n          }\r\n        },\r\n        unbind: {\r\n          clickaway: function() {\r\n            module.verbose('Removing clickaway events from context', $context);\r\n            $context.off(elementNamespace);\r\n          },\r\n          scrollLock: function() {\r\n            module.verbose('Removing scroll lock from page');\r\n            $document.off(elementNamespace);\r\n            $window.off(elementNamespace);\r\n            $module.off('scroll' + eventNamespace);\r\n          }\r\n        },\r\n\r\n        add: {\r\n          inlineCSS: function() {\r\n            var\r\n              width     = module.cache.width  || $module.outerWidth(),\r\n              height    = module.cache.height || $module.outerHeight(),\r\n              isRTL     = module.is.rtl(),\r\n              direction = module.get.direction(),\r\n              distance  = {\r\n                left   : width,\r\n                right  : -width,\r\n                top    : height,\r\n                bottom : -height\r\n              },\r\n              style\r\n            ;\r\n\r\n            if(isRTL){\r\n              module.verbose('RTL detected, flipping widths');\r\n              distance.left = -width;\r\n              distance.right = width;\r\n            }\r\n\r\n            style  = '<style>';\r\n\r\n            if(direction === 'left' || direction === 'right') {\r\n              module.debug('Adding CSS rules for animation distance', width);\r\n              style  += ''\r\n                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'\r\n                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'\r\n                + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'\r\n                + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'\r\n                + ' }'\r\n              ;\r\n            }\r\n            else if(direction === 'top' || direction == 'bottom') {\r\n              style  += ''\r\n                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'\r\n                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'\r\n                + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'\r\n                + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'\r\n                + ' }'\r\n              ;\r\n            }\r\n\r\n            /* IE is only browser not to create context with transforms */\r\n            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */\r\n            if( module.is.ie() ) {\r\n              if(direction === 'left' || direction === 'right') {\r\n                module.debug('Adding CSS rules for animation distance', width);\r\n                style  += ''\r\n                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'\r\n                  + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'\r\n                  + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'\r\n                  + ' }'\r\n                ;\r\n              }\r\n              else if(direction === 'top' || direction == 'bottom') {\r\n                style  += ''\r\n                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'\r\n                  + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'\r\n                  + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'\r\n                  + ' }'\r\n                ;\r\n              }\r\n              /* opposite sides visible forces content overlay */\r\n              style += ''\r\n                + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,'\r\n                + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {'\r\n                + '   -webkit-transform: translate3d(0px, 0, 0);'\r\n                + '           transform: translate3d(0px, 0, 0);'\r\n                + ' }'\r\n              ;\r\n            }\r\n            style += '</style>';\r\n            $style = $(style)\r\n              .appendTo($head)\r\n            ;\r\n            module.debug('Adding sizing css to head', $style);\r\n          }\r\n        },\r\n\r\n        refresh: function() {\r\n          module.verbose('Refreshing selector cache');\r\n          $context  = $(settings.context);\r\n          $sidebars = $context.children(selector.sidebar);\r\n          $pusher   = $context.children(selector.pusher);\r\n          $fixed    = $context.children(selector.fixed);\r\n          module.clear.cache();\r\n        },\r\n\r\n        refreshSidebars: function() {\r\n          module.verbose('Refreshing other sidebars');\r\n          $sidebars = $context.children(selector.sidebar);\r\n        },\r\n\r\n        repaint: function() {\r\n          module.verbose('Forcing repaint event');\r\n          element.style.display = 'none';\r\n          var ignored = element.offsetHeight;\r\n          element.scrollTop = element.scrollTop;\r\n          element.style.display = '';\r\n        },\r\n\r\n        setup: {\r\n          cache: function() {\r\n            module.cache = {\r\n              width  : $module.outerWidth(),\r\n              height : $module.outerHeight(),\r\n              rtl    : ($module.css('direction') == 'rtl')\r\n            };\r\n          },\r\n          layout: function() {\r\n            if( $context.children(selector.pusher).length === 0 ) {\r\n              module.debug('Adding wrapper element for sidebar');\r\n              module.error(error.pusher);\r\n              $pusher = $('<div class=\"pusher\" />');\r\n              $context\r\n                .children()\r\n                  .not(selector.omitted)\r\n                  .not($sidebars)\r\n                  .wrapAll($pusher)\r\n              ;\r\n              module.refresh();\r\n            }\r\n            if($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {\r\n              module.debug('Moved sidebar to correct parent element');\r\n              module.error(error.movedSidebar, element);\r\n              $module.detach().prependTo($context);\r\n              module.refresh();\r\n            }\r\n            module.clear.cache();\r\n            module.set.pushable();\r\n            module.set.direction();\r\n          }\r\n        },\r\n\r\n        attachEvents: function(selector, event) {\r\n          var\r\n            $toggle = $(selector)\r\n          ;\r\n          event = $.isFunction(module[event])\r\n            ? module[event]\r\n            : module.toggle\r\n          ;\r\n          if($toggle.length > 0) {\r\n            module.debug('Attaching sidebar events to element', selector, event);\r\n            $toggle\r\n              .on('click' + eventNamespace, event)\r\n            ;\r\n          }\r\n          else {\r\n            module.error(error.notFound, selector);\r\n          }\r\n        },\r\n\r\n        show: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if(module.is.hidden()) {\r\n            module.refreshSidebars();\r\n            if(settings.overlay)  {\r\n              module.error(error.overlay);\r\n              settings.transition = 'overlay';\r\n            }\r\n            module.refresh();\r\n            if(module.othersActive()) {\r\n              module.debug('Other sidebars currently visible');\r\n              if(settings.exclusive) {\r\n                // if not overlay queue animation after hide\r\n                if(settings.transition != 'overlay') {\r\n                  module.hideOthers(module.show);\r\n                  return;\r\n                }\r\n                else {\r\n                  module.hideOthers();\r\n                }\r\n              }\r\n              else {\r\n                settings.transition = 'overlay';\r\n              }\r\n            }\r\n            module.pushPage(function() {\r\n              callback.call(element);\r\n              settings.onShow.call(element);\r\n            });\r\n            settings.onChange.call(element);\r\n            settings.onVisible.call(element);\r\n          }\r\n          else {\r\n            module.debug('Sidebar is already visible');\r\n          }\r\n        },\r\n\r\n        hide: function(callback) {\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if(module.is.visible() || module.is.animating()) {\r\n            module.debug('Hiding sidebar', callback);\r\n            module.refreshSidebars();\r\n            module.pullPage(function() {\r\n              callback.call(element);\r\n              settings.onHidden.call(element);\r\n            });\r\n            settings.onChange.call(element);\r\n            settings.onHide.call(element);\r\n          }\r\n        },\r\n\r\n        othersAnimating: function() {\r\n          return ($sidebars.not($module).filter('.' + className.animating).length > 0);\r\n        },\r\n        othersVisible: function() {\r\n          return ($sidebars.not($module).filter('.' + className.visible).length > 0);\r\n        },\r\n        othersActive: function() {\r\n          return(module.othersVisible() || module.othersAnimating());\r\n        },\r\n\r\n        hideOthers: function(callback) {\r\n          var\r\n            $otherSidebars = $sidebars.not($module).filter('.' + className.visible),\r\n            sidebarCount   = $otherSidebars.length,\r\n            callbackCount  = 0\r\n          ;\r\n          callback = callback || function(){};\r\n          $otherSidebars\r\n            .sidebar('hide', function() {\r\n              callbackCount++;\r\n              if(callbackCount == sidebarCount) {\r\n                callback();\r\n              }\r\n            })\r\n          ;\r\n        },\r\n\r\n        toggle: function() {\r\n          module.verbose('Determining toggled direction');\r\n          if(module.is.hidden()) {\r\n            module.show();\r\n          }\r\n          else {\r\n            module.hide();\r\n          }\r\n        },\r\n\r\n        pushPage: function(callback) {\r\n          var\r\n            transition = module.get.transition(),\r\n            $transition = (transition === 'overlay' || module.othersActive())\r\n              ? $module\r\n              : $pusher,\r\n            animate,\r\n            dim,\r\n            transitionEnd\r\n          ;\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          if(settings.transition == 'scale down') {\r\n            module.scrollToTop();\r\n          }\r\n          module.set.transition(transition);\r\n          module.repaint();\r\n          animate = function() {\r\n            module.bind.clickaway();\r\n            module.add.inlineCSS();\r\n            module.set.animating();\r\n            module.set.visible();\r\n          };\r\n          dim = function() {\r\n            module.set.dimmed();\r\n          };\r\n          transitionEnd = function(event) {\r\n            if( event.target == $transition[0] ) {\r\n              $transition.off(transitionEvent + elementNamespace, transitionEnd);\r\n              module.remove.animating();\r\n              module.bind.scrollLock();\r\n              callback.call(element);\r\n            }\r\n          };\r\n          $transition.off(transitionEvent + elementNamespace);\r\n          $transition.on(transitionEvent + elementNamespace, transitionEnd);\r\n          requestAnimationFrame(animate);\r\n          if(settings.dimPage && !module.othersVisible()) {\r\n            requestAnimationFrame(dim);\r\n          }\r\n        },\r\n\r\n        pullPage: function(callback) {\r\n          var\r\n            transition = module.get.transition(),\r\n            $transition = (transition == 'overlay' || module.othersActive())\r\n              ? $module\r\n              : $pusher,\r\n            animate,\r\n            transitionEnd\r\n          ;\r\n          callback = $.isFunction(callback)\r\n            ? callback\r\n            : function(){}\r\n          ;\r\n          module.verbose('Removing context push state', module.get.direction());\r\n\r\n          module.unbind.clickaway();\r\n          module.unbind.scrollLock();\r\n\r\n          animate = function() {\r\n            module.set.transition(transition);\r\n            module.set.animating();\r\n            module.remove.visible();\r\n            if(settings.dimPage && !module.othersVisible()) {\r\n              $pusher.removeClass(className.dimmed);\r\n            }\r\n          };\r\n          transitionEnd = function(event) {\r\n            if( event.target == $transition[0] ) {\r\n              $transition.off(transitionEvent + elementNamespace, transitionEnd);\r\n              module.remove.animating();\r\n              module.remove.transition();\r\n              module.remove.inlineCSS();\r\n              if(transition == 'scale down' || (settings.returnScroll && module.is.mobile()) ) {\r\n                module.scrollBack();\r\n              }\r\n              callback.call(element);\r\n            }\r\n          };\r\n          $transition.off(transitionEvent + elementNamespace);\r\n          $transition.on(transitionEvent + elementNamespace, transitionEnd);\r\n          requestAnimationFrame(animate);\r\n        },\r\n\r\n        scrollToTop: function() {\r\n          module.verbose('Scrolling to top of page to avoid animation issues');\r\n          currentScroll = $(window).scrollTop();\r\n          $module.scrollTop(0);\r\n          window.scrollTo(0, 0);\r\n        },\r\n\r\n        scrollBack: function() {\r\n          module.verbose('Scrolling back to original page position');\r\n          window.scrollTo(0, currentScroll);\r\n        },\r\n\r\n        clear: {\r\n          cache: function() {\r\n            module.verbose('Clearing cached dimensions');\r\n            module.cache = {};\r\n          }\r\n        },\r\n\r\n        set: {\r\n\r\n          // ios only (scroll on html not document). This prevent auto-resize canvas/scroll in ios\r\n          ios: function() {\r\n            $html.addClass(className.ios);\r\n          },\r\n\r\n          // container\r\n          pushed: function() {\r\n            $context.addClass(className.pushed);\r\n          },\r\n          pushable: function() {\r\n            $context.addClass(className.pushable);\r\n          },\r\n\r\n          // pusher\r\n          dimmed: function() {\r\n            $pusher.addClass(className.dimmed);\r\n          },\r\n\r\n          // sidebar\r\n          active: function() {\r\n            $module.addClass(className.active);\r\n          },\r\n          animating: function() {\r\n            $module.addClass(className.animating);\r\n          },\r\n          transition: function(transition) {\r\n            transition = transition || module.get.transition();\r\n            $module.addClass(transition);\r\n          },\r\n          direction: function(direction) {\r\n            direction = direction || module.get.direction();\r\n            $module.addClass(className[direction]);\r\n          },\r\n          visible: function() {\r\n            $module.addClass(className.visible);\r\n          },\r\n          overlay: function() {\r\n            $module.addClass(className.overlay);\r\n          }\r\n        },\r\n        remove: {\r\n\r\n          inlineCSS: function() {\r\n            module.debug('Removing inline css styles', $style);\r\n            if($style && $style.length > 0) {\r\n              $style.remove();\r\n            }\r\n          },\r\n\r\n          // ios scroll on html not document\r\n          ios: function() {\r\n            $html.removeClass(className.ios);\r\n          },\r\n\r\n          // context\r\n          pushed: function() {\r\n            $context.removeClass(className.pushed);\r\n          },\r\n          pushable: function() {\r\n            $context.removeClass(className.pushable);\r\n          },\r\n\r\n          // sidebar\r\n          active: function() {\r\n            $module.removeClass(className.active);\r\n          },\r\n          animating: function() {\r\n            $module.removeClass(className.animating);\r\n          },\r\n          transition: function(transition) {\r\n            transition = transition || module.get.transition();\r\n            $module.removeClass(transition);\r\n          },\r\n          direction: function(direction) {\r\n            direction = direction || module.get.direction();\r\n            $module.removeClass(className[direction]);\r\n          },\r\n          visible: function() {\r\n            $module.removeClass(className.visible);\r\n          },\r\n          overlay: function() {\r\n            $module.removeClass(className.overlay);\r\n          }\r\n        },\r\n\r\n        get: {\r\n          direction: function() {\r\n            if($module.hasClass(className.top)) {\r\n              return className.top;\r\n            }\r\n            else if($module.hasClass(className.right)) {\r\n              return className.right;\r\n            }\r\n            else if($module.hasClass(className.bottom)) {\r\n              return className.bottom;\r\n            }\r\n            return className.left;\r\n          },\r\n          transition: function() {\r\n            var\r\n              direction = module.get.direction(),\r\n              transition\r\n            ;\r\n            transition = ( module.is.mobile() )\r\n              ? (settings.mobileTransition == 'auto')\r\n                ? settings.defaultTransition.mobile[direction]\r\n                : settings.mobileTransition\r\n              : (settings.transition == 'auto')\r\n                ? settings.defaultTransition.computer[direction]\r\n                : settings.transition\r\n            ;\r\n            module.verbose('Determined transition', transition);\r\n            return transition;\r\n          },\r\n          transitionEvent: function() {\r\n            var\r\n              element     = document.createElement('element'),\r\n              transitions = {\r\n                'transition'       :'transitionend',\r\n                'OTransition'      :'oTransitionEnd',\r\n                'MozTransition'    :'transitionend',\r\n                'WebkitTransition' :'webkitTransitionEnd'\r\n              },\r\n              transition\r\n            ;\r\n            for(transition in transitions){\r\n              if( element.style[transition] !== undefined ){\r\n                return transitions[transition];\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        is: {\r\n\r\n          ie: function() {\r\n            var\r\n              isIE11 = (!(window.ActiveXObject) && 'ActiveXObject' in window),\r\n              isIE   = ('ActiveXObject' in window)\r\n            ;\r\n            return (isIE11 || isIE);\r\n          },\r\n\r\n          ios: function() {\r\n            var\r\n              userAgent      = navigator.userAgent,\r\n              isIOS          = userAgent.match(regExp.ios),\r\n              isMobileChrome = userAgent.match(regExp.mobileChrome)\r\n            ;\r\n            if(isIOS && !isMobileChrome) {\r\n              module.verbose('Browser was found to be iOS', userAgent);\r\n              return true;\r\n            }\r\n            else {\r\n              return false;\r\n            }\r\n          },\r\n          mobile: function() {\r\n            var\r\n              userAgent    = navigator.userAgent,\r\n              isMobile     = userAgent.match(regExp.mobile)\r\n            ;\r\n            if(isMobile) {\r\n              module.verbose('Browser was found to be mobile', userAgent);\r\n              return true;\r\n            }\r\n            else {\r\n              module.verbose('Browser is not mobile, using regular transition', userAgent);\r\n              return false;\r\n            }\r\n          },\r\n          hidden: function() {\r\n            return !module.is.visible();\r\n          },\r\n          visible: function() {\r\n            return $module.hasClass(className.visible);\r\n          },\r\n          // alias\r\n          open: function() {\r\n            return module.is.visible();\r\n          },\r\n          closed: function() {\r\n            return module.is.hidden();\r\n          },\r\n          vertical: function() {\r\n            return $module.hasClass(className.top);\r\n          },\r\n          animating: function() {\r\n            return $context.hasClass(className.animating);\r\n          },\r\n          rtl: function () {\r\n            if(module.cache.rtl === undefined) {\r\n              module.cache.rtl = ($module.css('direction') == 'rtl');\r\n            }\r\n            return module.cache.rtl;\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      }\r\n    ;\r\n\r\n    if(methodInvoked) {\r\n      if(instance === undefined) {\r\n        module.initialize();\r\n      }\r\n      module.invoke(query);\r\n    }\r\n    else {\r\n      if(instance !== undefined) {\r\n        module.invoke('destroy');\r\n      }\r\n      module.initialize();\r\n    }\r\n  });\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.sidebar.settings = {\r\n\r\n  name              : 'Sidebar',\r\n  namespace         : 'sidebar',\r\n\r\n  debug             : false,\r\n  verbose           : false,\r\n  performance       : true,\r\n\r\n  transition        : 'auto',\r\n  mobileTransition  : 'auto',\r\n\r\n  defaultTransition : {\r\n    computer: {\r\n      left   : 'uncover',\r\n      right  : 'uncover',\r\n      top    : 'overlay',\r\n      bottom : 'overlay'\r\n    },\r\n    mobile: {\r\n      left   : 'uncover',\r\n      right  : 'uncover',\r\n      top    : 'overlay',\r\n      bottom : 'overlay'\r\n    }\r\n  },\r\n\r\n  context           : 'body',\r\n  exclusive         : false,\r\n  closable          : true,\r\n  dimPage           : true,\r\n  scrollLock        : false,\r\n  returnScroll      : false,\r\n  delaySetup        : false,\r\n\r\n  duration          : 500,\r\n\r\n  onChange          : function(){},\r\n  onShow            : function(){},\r\n  onHide            : function(){},\r\n\r\n  onHidden          : function(){},\r\n  onVisible         : function(){},\r\n\r\n  className         : {\r\n    active    : 'active',\r\n    animating : 'animating',\r\n    dimmed    : 'dimmed',\r\n    ios       : 'ios',\r\n    pushable  : 'pushable',\r\n    pushed    : 'pushed',\r\n    right     : 'right',\r\n    top       : 'top',\r\n    left      : 'left',\r\n    bottom    : 'bottom',\r\n    visible   : 'visible'\r\n  },\r\n\r\n  selector: {\r\n    fixed   : '.fixed',\r\n    omitted : 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',\r\n    pusher  : '.pusher',\r\n    sidebar : '.ui.sidebar'\r\n  },\r\n\r\n  regExp: {\r\n    ios          : /(iPad|iPhone|iPod)/g,\r\n    mobileChrome : /(CriOS)/g,\r\n    mobile       : /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g\r\n  },\r\n\r\n  error   : {\r\n    method       : 'The method you called is not defined.',\r\n    pusher       : 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',\r\n    movedSidebar : 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',\r\n    overlay      : 'The overlay setting is no longer supported, use animation: overlay',\r\n    notFound     : 'There were no elements that matched the specified selector'\r\n  }\r\n\r\n};\r\n\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Sticky\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.sticky = function(parameters) {\r\n  var\r\n    $allModules    = $(this),\r\n    moduleSelector = $allModules.selector || '',\r\n\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings              = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.sticky.settings, parameters)\r\n          : $.extend({}, $.fn.sticky.settings),\r\n\r\n        className             = settings.className,\r\n        namespace             = settings.namespace,\r\n        error                 = settings.error,\r\n\r\n        eventNamespace        = '.' + namespace,\r\n        moduleNamespace       = 'module-' + namespace,\r\n\r\n        $module               = $(this),\r\n        $window               = $(window),\r\n        $scroll               = $(settings.scrollContext),\r\n        $container,\r\n        $context,\r\n\r\n        selector              = $module.selector || '',\r\n        instance              = $module.data(moduleNamespace),\r\n\r\n        requestAnimationFrame = window.requestAnimationFrame\r\n          || window.mozRequestAnimationFrame\r\n          || window.webkitRequestAnimationFrame\r\n          || window.msRequestAnimationFrame\r\n          || function(callback) { setTimeout(callback, 0); },\r\n\r\n        element         = this,\r\n        observer,\r\n        module\r\n      ;\r\n\r\n      module      = {\r\n\r\n        initialize: function() {\r\n\r\n          module.determineContainer();\r\n          module.determineContext();\r\n          module.verbose('Initializing sticky', settings, $container);\r\n\r\n          module.save.positions();\r\n          module.checkErrors();\r\n          module.bind.events();\r\n\r\n          if(settings.observeChanges) {\r\n            module.observeChanges();\r\n          }\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous instance');\r\n          module.reset();\r\n          if(observer) {\r\n            observer.disconnect();\r\n          }\r\n          $window\r\n            .off('load' + eventNamespace, module.event.load)\r\n            .off('resize' + eventNamespace, module.event.resize)\r\n          ;\r\n          $scroll\r\n            .off('scrollchange' + eventNamespace, module.event.scrollchange)\r\n          ;\r\n          $module.removeData(moduleNamespace);\r\n        },\r\n\r\n        observeChanges: function() {\r\n          var\r\n            context = $context[0]\r\n          ;\r\n          if('MutationObserver' in window) {\r\n            observer = new MutationObserver(function(mutations) {\r\n              clearTimeout(module.timer);\r\n              module.timer = setTimeout(function() {\r\n                module.verbose('DOM tree modified, updating sticky menu', mutations);\r\n                module.refresh();\r\n              }, 100);\r\n            });\r\n            observer.observe(element, {\r\n              childList : true,\r\n              subtree   : true\r\n            });\r\n            observer.observe(context, {\r\n              childList : true,\r\n              subtree   : true\r\n            });\r\n            module.debug('Setting up mutation observer', observer);\r\n          }\r\n        },\r\n\r\n        determineContainer: function() {\r\n          $container = $module.offsetParent();\r\n        },\r\n\r\n        determineContext: function() {\r\n          if(settings.context) {\r\n            $context = $(settings.context);\r\n          }\r\n          else {\r\n            $context = $container;\r\n          }\r\n          if($context.length === 0) {\r\n            module.error(error.invalidContext, settings.context, $module);\r\n            return;\r\n          }\r\n        },\r\n\r\n        checkErrors: function() {\r\n          if( module.is.hidden() ) {\r\n            module.error(error.visible, $module);\r\n          }\r\n          if(module.cache.element.height > module.cache.context.height) {\r\n            module.reset();\r\n            module.error(error.elementSize, $module);\r\n            return;\r\n          }\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            $window\r\n              .on('load' + eventNamespace, module.event.load)\r\n              .on('resize' + eventNamespace, module.event.resize)\r\n            ;\r\n            // pub/sub pattern\r\n            $scroll\r\n              .off('scroll' + eventNamespace)\r\n              .on('scroll' + eventNamespace, module.event.scroll)\r\n              .on('scrollchange' + eventNamespace, module.event.scrollchange)\r\n            ;\r\n          }\r\n        },\r\n\r\n        event: {\r\n          load: function() {\r\n            module.verbose('Page contents finished loading');\r\n            requestAnimationFrame(module.refresh);\r\n          },\r\n          resize: function() {\r\n            module.verbose('Window resized');\r\n            requestAnimationFrame(module.refresh);\r\n          },\r\n          scroll: function() {\r\n            requestAnimationFrame(function() {\r\n              $scroll.triggerHandler('scrollchange' + eventNamespace, $scroll.scrollTop() );\r\n            });\r\n          },\r\n          scrollchange: function(event, scrollPosition) {\r\n            module.stick(scrollPosition);\r\n            settings.onScroll.call(element);\r\n          }\r\n        },\r\n\r\n        refresh: function(hardRefresh) {\r\n          module.reset();\r\n          if(!settings.context) {\r\n            module.determineContext();\r\n          }\r\n          if(hardRefresh) {\r\n            module.determineContainer();\r\n          }\r\n          module.save.positions();\r\n          module.stick();\r\n          settings.onReposition.call(element);\r\n        },\r\n\r\n        supports: {\r\n          sticky: function() {\r\n            var\r\n              $element = $('<div/>'),\r\n              element = $element[0]\r\n            ;\r\n            $element.addClass(className.supported);\r\n            return($element.css('position').match('sticky'));\r\n          }\r\n        },\r\n\r\n        save: {\r\n          lastScroll: function(scroll) {\r\n            module.lastScroll = scroll;\r\n          },\r\n          elementScroll: function(scroll) {\r\n            module.elementScroll = scroll;\r\n          },\r\n          positions: function() {\r\n            var\r\n              scrollContext = {\r\n                height : $scroll.height()\r\n              },\r\n              element = {\r\n                margin: {\r\n                  top    : parseInt($module.css('margin-top'), 10),\r\n                  bottom : parseInt($module.css('margin-bottom'), 10),\r\n                },\r\n                offset : $module.offset(),\r\n                width  : $module.outerWidth(),\r\n                height : $module.outerHeight()\r\n              },\r\n              context = {\r\n                offset : $context.offset(),\r\n                height : $context.outerHeight()\r\n              },\r\n              container = {\r\n                height: $container.outerHeight()\r\n              }\r\n            ;\r\n            if( !module.is.standardScroll() ) {\r\n              module.debug('Non-standard scroll. Removing scroll offset from element offset');\r\n\r\n              scrollContext.top  = $scroll.scrollTop();\r\n              scrollContext.left = $scroll.scrollLeft();\r\n\r\n              element.offset.top  += scrollContext.top;\r\n              context.offset.top  += scrollContext.top;\r\n              element.offset.left += scrollContext.left;\r\n              context.offset.left += scrollContext.left;\r\n            }\r\n            module.cache = {\r\n              fits : ( element.height < scrollContext.height ),\r\n              scrollContext : {\r\n                height : scrollContext.height\r\n              },\r\n              element: {\r\n                margin : element.margin,\r\n                top    : element.offset.top - element.margin.top,\r\n                left   : element.offset.left,\r\n                width  : element.width,\r\n                height : element.height,\r\n                bottom : element.offset.top + element.height\r\n              },\r\n              context: {\r\n                top           : context.offset.top,\r\n                height        : context.height,\r\n                bottom        : context.offset.top + context.height\r\n              }\r\n            };\r\n            module.set.containerSize();\r\n            module.set.size();\r\n            module.stick();\r\n            module.debug('Caching element positions', module.cache);\r\n          }\r\n        },\r\n\r\n        get: {\r\n          direction: function(scroll) {\r\n            var\r\n              direction = 'down'\r\n            ;\r\n            scroll = scroll || $scroll.scrollTop();\r\n            if(module.lastScroll !== undefined) {\r\n              if(module.lastScroll < scroll) {\r\n                direction = 'down';\r\n              }\r\n              else if(module.lastScroll > scroll) {\r\n                direction = 'up';\r\n              }\r\n            }\r\n            return direction;\r\n          },\r\n          scrollChange: function(scroll) {\r\n            scroll = scroll || $scroll.scrollTop();\r\n            return (module.lastScroll)\r\n              ? (scroll - module.lastScroll)\r\n              : 0\r\n            ;\r\n          },\r\n          currentElementScroll: function() {\r\n            if(module.elementScroll) {\r\n              return module.elementScroll;\r\n            }\r\n            return ( module.is.top() )\r\n              ? Math.abs(parseInt($module.css('top'), 10))    || 0\r\n              : Math.abs(parseInt($module.css('bottom'), 10)) || 0\r\n            ;\r\n          },\r\n\r\n          elementScroll: function(scroll) {\r\n            scroll = scroll || $scroll.scrollTop();\r\n            var\r\n              element        = module.cache.element,\r\n              scrollContext  = module.cache.scrollContext,\r\n              delta          = module.get.scrollChange(scroll),\r\n              maxScroll      = (element.height - scrollContext.height + settings.offset),\r\n              elementScroll  = module.get.currentElementScroll(),\r\n              possibleScroll = (elementScroll + delta)\r\n            ;\r\n            if(module.cache.fits || possibleScroll < 0) {\r\n              elementScroll = 0;\r\n            }\r\n            else if(possibleScroll > maxScroll ) {\r\n              elementScroll = maxScroll;\r\n            }\r\n            else {\r\n              elementScroll = possibleScroll;\r\n            }\r\n            return elementScroll;\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          lastScroll: function() {\r\n            delete module.lastScroll;\r\n          },\r\n          elementScroll: function(scroll) {\r\n            delete module.elementScroll;\r\n          },\r\n          offset: function() {\r\n            $module.css('margin-top', '');\r\n          }\r\n        },\r\n\r\n        set: {\r\n          offset: function() {\r\n            module.verbose('Setting offset on element', settings.offset);\r\n            $module\r\n              .css('margin-top', settings.offset)\r\n            ;\r\n          },\r\n          containerSize: function() {\r\n            var\r\n              tagName = $container.get(0).tagName\r\n            ;\r\n            if(tagName === 'HTML' || tagName == 'body') {\r\n              // this can trigger for too many reasons\r\n              //module.error(error.container, tagName, $module);\r\n              module.determineContainer();\r\n            }\r\n            else {\r\n              if( Math.abs($container.outerHeight() - module.cache.context.height) > settings.jitter) {\r\n                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);\r\n                $container.css({\r\n                  height: module.cache.context.height\r\n                });\r\n              }\r\n            }\r\n          },\r\n          minimumSize: function() {\r\n            var\r\n              element   = module.cache.element\r\n            ;\r\n            $container\r\n              .css('min-height', element.height)\r\n            ;\r\n          },\r\n          scroll: function(scroll) {\r\n            module.debug('Setting scroll on element', scroll);\r\n            if(module.elementScroll == scroll) {\r\n              return;\r\n            }\r\n            if( module.is.top() ) {\r\n              $module\r\n                .css('bottom', '')\r\n                .css('top', -scroll)\r\n              ;\r\n            }\r\n            if( module.is.bottom() ) {\r\n              $module\r\n                .css('top', '')\r\n                .css('bottom', scroll)\r\n              ;\r\n            }\r\n          },\r\n          size: function() {\r\n            if(module.cache.element.height !== 0 && module.cache.element.width !== 0) {\r\n              element.style.setProperty('width',  module.cache.element.width  + 'px', 'important');\r\n              element.style.setProperty('height', module.cache.element.height + 'px', 'important');\r\n            }\r\n          }\r\n        },\r\n\r\n        is: {\r\n          standardScroll: function() {\r\n            return ($scroll[0] == window);\r\n          },\r\n          top: function() {\r\n            return $module.hasClass(className.top);\r\n          },\r\n          bottom: function() {\r\n            return $module.hasClass(className.bottom);\r\n          },\r\n          initialPosition: function() {\r\n            return (!module.is.fixed() && !module.is.bound());\r\n          },\r\n          hidden: function() {\r\n            return (!$module.is(':visible'));\r\n          },\r\n          bound: function() {\r\n            return $module.hasClass(className.bound);\r\n          },\r\n          fixed: function() {\r\n            return $module.hasClass(className.fixed);\r\n          }\r\n        },\r\n\r\n        stick: function(scroll) {\r\n          var\r\n            cachedPosition = scroll || $scroll.scrollTop(),\r\n            cache          = module.cache,\r\n            fits           = cache.fits,\r\n            element        = cache.element,\r\n            scrollContext  = cache.scrollContext,\r\n            context        = cache.context,\r\n            offset         = (module.is.bottom() && settings.pushing)\r\n              ? settings.bottomOffset\r\n              : settings.offset,\r\n            scroll         = {\r\n              top    : cachedPosition + offset,\r\n              bottom : cachedPosition + offset + scrollContext.height\r\n            },\r\n            direction      = module.get.direction(scroll.top),\r\n            elementScroll  = (fits)\r\n              ? 0\r\n              : module.get.elementScroll(scroll.top),\r\n\r\n            // shorthand\r\n            doesntFit      = !fits,\r\n            elementVisible = (element.height !== 0)\r\n          ;\r\n\r\n          if(elementVisible) {\r\n\r\n            if( module.is.initialPosition() ) {\r\n              if(scroll.top >= context.bottom) {\r\n                module.debug('Initial element position is bottom of container');\r\n                module.bindBottom();\r\n              }\r\n              else if(scroll.top > element.top) {\r\n                if( (element.height + scroll.top - elementScroll) >= context.bottom ) {\r\n                  module.debug('Initial element position is bottom of container');\r\n                  module.bindBottom();\r\n                }\r\n                else {\r\n                  module.debug('Initial element position is fixed');\r\n                  module.fixTop();\r\n                }\r\n              }\r\n\r\n            }\r\n            else if( module.is.fixed() ) {\r\n\r\n              // currently fixed top\r\n              if( module.is.top() ) {\r\n                if( scroll.top <= element.top ) {\r\n                  module.debug('Fixed element reached top of container');\r\n                  module.setInitialPosition();\r\n                }\r\n                else if( (element.height + scroll.top - elementScroll) >= context.bottom ) {\r\n                  module.debug('Fixed element reached bottom of container');\r\n                  module.bindBottom();\r\n                }\r\n                // scroll element if larger than screen\r\n                else if(doesntFit) {\r\n                  module.set.scroll(elementScroll);\r\n                  module.save.lastScroll(scroll.top);\r\n                  module.save.elementScroll(elementScroll);\r\n                }\r\n              }\r\n\r\n              // currently fixed bottom\r\n              else if(module.is.bottom() ) {\r\n\r\n                // top edge\r\n                if( (scroll.bottom - element.height) <= element.top) {\r\n                  module.debug('Bottom fixed rail has reached top of container');\r\n                  module.setInitialPosition();\r\n                }\r\n                // bottom edge\r\n                else if(scroll.bottom >= context.bottom) {\r\n                  module.debug('Bottom fixed rail has reached bottom of container');\r\n                  module.bindBottom();\r\n                }\r\n                // scroll element if larger than screen\r\n                else if(doesntFit) {\r\n                  module.set.scroll(elementScroll);\r\n                  module.save.lastScroll(scroll.top);\r\n                  module.save.elementScroll(elementScroll);\r\n                }\r\n\r\n              }\r\n            }\r\n            else if( module.is.bottom() ) {\r\n              if( scroll.top <= element.top ) {\r\n                module.debug('Jumped from bottom fixed to top fixed, most likely used home/end button');\r\n                module.setInitialPosition();\r\n              }\r\n              else {\r\n                if(settings.pushing) {\r\n                  if(module.is.bound() && scroll.bottom <= context.bottom ) {\r\n                    module.debug('Fixing bottom attached element to bottom of browser.');\r\n                    module.fixBottom();\r\n                  }\r\n                }\r\n                else {\r\n                  if(module.is.bound() && (scroll.top <= context.bottom - element.height) ) {\r\n                    module.debug('Fixing bottom attached element to top of browser.');\r\n                    module.fixTop();\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        bindTop: function() {\r\n          module.debug('Binding element to top of parent container');\r\n          module.remove.offset();\r\n          $module\r\n            .css({\r\n              left         : '',\r\n              top          : '',\r\n              marginBottom : ''\r\n            })\r\n            .removeClass(className.fixed)\r\n            .removeClass(className.bottom)\r\n            .addClass(className.bound)\r\n            .addClass(className.top)\r\n          ;\r\n          settings.onTop.call(element);\r\n          settings.onUnstick.call(element);\r\n        },\r\n        bindBottom: function() {\r\n          module.debug('Binding element to bottom of parent container');\r\n          module.remove.offset();\r\n          $module\r\n            .css({\r\n              left         : '',\r\n              top          : ''\r\n            })\r\n            .removeClass(className.fixed)\r\n            .removeClass(className.top)\r\n            .addClass(className.bound)\r\n            .addClass(className.bottom)\r\n          ;\r\n          settings.onBottom.call(element);\r\n          settings.onUnstick.call(element);\r\n        },\r\n\r\n        setInitialPosition: function() {\r\n          module.debug('Returning to initial position');\r\n          module.unfix();\r\n          module.unbind();\r\n        },\r\n\r\n\r\n        fixTop: function() {\r\n          module.debug('Fixing element to top of page');\r\n          module.set.minimumSize();\r\n          module.set.offset();\r\n          $module\r\n            .css({\r\n              left         : module.cache.element.left,\r\n              bottom       : '',\r\n              marginBottom : ''\r\n            })\r\n            .removeClass(className.bound)\r\n            .removeClass(className.bottom)\r\n            .addClass(className.fixed)\r\n            .addClass(className.top)\r\n          ;\r\n          settings.onStick.call(element);\r\n        },\r\n\r\n        fixBottom: function() {\r\n          module.debug('Sticking element to bottom of page');\r\n          module.set.minimumSize();\r\n          module.set.offset();\r\n          $module\r\n            .css({\r\n              left         : module.cache.element.left,\r\n              bottom       : '',\r\n              marginBottom : ''\r\n            })\r\n            .removeClass(className.bound)\r\n            .removeClass(className.top)\r\n            .addClass(className.fixed)\r\n            .addClass(className.bottom)\r\n          ;\r\n          settings.onStick.call(element);\r\n        },\r\n\r\n        unbind: function() {\r\n          if( module.is.bound() ) {\r\n            module.debug('Removing container bound position on element');\r\n            module.remove.offset();\r\n            $module\r\n              .removeClass(className.bound)\r\n              .removeClass(className.top)\r\n              .removeClass(className.bottom)\r\n            ;\r\n          }\r\n        },\r\n\r\n        unfix: function() {\r\n          if( module.is.fixed() ) {\r\n            module.debug('Removing fixed position on element');\r\n            module.remove.offset();\r\n            $module\r\n              .removeClass(className.fixed)\r\n              .removeClass(className.top)\r\n              .removeClass(className.bottom)\r\n            ;\r\n            settings.onUnstick.call(element);\r\n          }\r\n        },\r\n\r\n        reset: function() {\r\n          module.debug('Reseting elements position');\r\n          module.unbind();\r\n          module.unfix();\r\n          module.resetCSS();\r\n          module.remove.offset();\r\n          module.remove.lastScroll();\r\n        },\r\n\r\n        resetCSS: function() {\r\n          $module\r\n            .css({\r\n              width  : '',\r\n              height : ''\r\n            })\r\n          ;\r\n          $container\r\n            .css({\r\n              height: ''\r\n            })\r\n          ;\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 0);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.sticky.settings = {\r\n\r\n  name           : 'Sticky',\r\n  namespace      : 'sticky',\r\n\r\n  debug          : false,\r\n  verbose        : true,\r\n  performance    : true,\r\n\r\n  // whether to stick in the opposite direction on scroll up\r\n  pushing        : false,\r\n\r\n  context        : false,\r\n\r\n  // Context to watch scroll events\r\n  scrollContext  : window,\r\n\r\n  // Offset to adjust scroll\r\n  offset         : 0,\r\n\r\n  // Offset to adjust scroll when attached to bottom of screen\r\n  bottomOffset   : 0,\r\n\r\n  jitter         : 5, // will only set container height if difference between context and container is larger than this number\r\n\r\n  // Whether to automatically observe changes with Mutation Observers\r\n  observeChanges : false,\r\n\r\n  // Called when position is recalculated\r\n  onReposition   : function(){},\r\n\r\n  // Called on each scroll\r\n  onScroll       : function(){},\r\n\r\n  // Called when element is stuck to viewport\r\n  onStick        : function(){},\r\n\r\n  // Called when element is unstuck from viewport\r\n  onUnstick      : function(){},\r\n\r\n  // Called when element reaches top of context\r\n  onTop          : function(){},\r\n\r\n  // Called when element reaches bottom of context\r\n  onBottom       : function(){},\r\n\r\n  error         : {\r\n    container      : 'Sticky element must be inside a relative container',\r\n    visible        : 'Element is hidden, you must call refresh after element becomes visible',\r\n    method         : 'The method you called is not defined.',\r\n    invalidContext : 'Context specified does not exist',\r\n    elementSize    : 'Sticky element is larger than its container, cannot create sticky.'\r\n  },\r\n\r\n  className : {\r\n    bound     : 'bound',\r\n    fixed     : 'fixed',\r\n    supported : 'native',\r\n    top       : 'top',\r\n    bottom    : 'bottom'\r\n  }\r\n\r\n};\r\n\r\n})( jQuery, window, document );\r\n/*!\r\n * # Semantic UI 2.1.7 - Tab\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ($, window, document, undefined) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.tab = function(parameters) {\r\n\r\n  var\r\n    // use window context if none specified\r\n    $allModules     = $.isFunction(this)\r\n        ? $(window)\r\n        : $(this),\r\n\r\n    moduleSelector  = $allModules.selector || '',\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n\r\n    initializedHistory = false,\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n\r\n        settings        = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.tab.settings, parameters)\r\n          : $.extend({}, $.fn.tab.settings),\r\n\r\n        className       = settings.className,\r\n        metadata        = settings.metadata,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n\r\n        eventNamespace  = '.' + settings.namespace,\r\n        moduleNamespace = 'module-' + settings.namespace,\r\n\r\n        $module         = $(this),\r\n        $context,\r\n        $tabs,\r\n\r\n        cache           = {},\r\n        firstLoad       = true,\r\n        recursionDepth  = 0,\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        activeTabPath,\r\n        parameterArray,\r\n        module,\r\n\r\n        historyEvent\r\n\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.debug('Initializing tab menu item', $module);\r\n          module.fix.callbacks();\r\n          module.determineTabs();\r\n\r\n          module.debug('Determining tabs', settings.context, $tabs);\r\n          // set up automatic routing\r\n          if(settings.auto) {\r\n            module.set.auto();\r\n          }\r\n          module.bind.events();\r\n\r\n          if(settings.history && !initializedHistory) {\r\n            module.initializeHistory();\r\n            initializedHistory = true;\r\n          }\r\n\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function () {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.debug('Destroying tabs', $module);\r\n          $module\r\n            .removeData(moduleNamespace)\r\n            .off(eventNamespace)\r\n          ;\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            // if using $.tab don't add events\r\n            if( !$.isWindow( element ) ) {\r\n              module.debug('Attaching tab activation events to element', $module);\r\n              $module\r\n                .on('click' + eventNamespace, module.event.click)\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        determineTabs: function() {\r\n          var\r\n            $reference\r\n          ;\r\n\r\n          // determine tab context\r\n          if(settings.context === 'parent') {\r\n            if($module.closest(selector.ui).length > 0) {\r\n              $reference = $module.closest(selector.ui);\r\n              module.verbose('Using closest UI element as parent', $reference);\r\n            }\r\n            else {\r\n              $reference = $module;\r\n            }\r\n            $context = $reference.parent();\r\n            module.verbose('Determined parent element for creating context', $context);\r\n          }\r\n          else if(settings.context) {\r\n            $context = $(settings.context);\r\n            module.verbose('Using selector for tab context', settings.context, $context);\r\n          }\r\n          else {\r\n            $context = $('body');\r\n          }\r\n          // find tabs\r\n          if(settings.childrenOnly) {\r\n            $tabs = $context.children(selector.tabs);\r\n            module.debug('Searching tab context children for tabs', $context, $tabs);\r\n          }\r\n          else {\r\n            $tabs = $context.find(selector.tabs);\r\n            module.debug('Searching tab context for tabs', $context, $tabs);\r\n          }\r\n        },\r\n\r\n        fix: {\r\n          callbacks: function() {\r\n            if( $.isPlainObject(parameters) && (parameters.onTabLoad || parameters.onTabInit) ) {\r\n              if(parameters.onTabLoad) {\r\n                parameters.onLoad = parameters.onTabLoad;\r\n                delete parameters.onTabLoad;\r\n                module.error(error.legacyLoad, parameters.onLoad);\r\n              }\r\n              if(parameters.onTabInit) {\r\n                parameters.onFirstLoad = parameters.onTabInit;\r\n                delete parameters.onTabInit;\r\n                module.error(error.legacyInit, parameters.onFirstLoad);\r\n              }\r\n              settings = $.extend(true, {}, $.fn.tab.settings, parameters);\r\n            }\r\n          }\r\n        },\r\n\r\n        initializeHistory: function() {\r\n          module.debug('Initializing page state');\r\n          if( $.address === undefined ) {\r\n            module.error(error.state);\r\n            return false;\r\n          }\r\n          else {\r\n            if(settings.historyType == 'state') {\r\n              module.debug('Using HTML5 to manage state');\r\n              if(settings.path !== false) {\r\n                $.address\r\n                  .history(true)\r\n                  .state(settings.path)\r\n                ;\r\n              }\r\n              else {\r\n                module.error(error.path);\r\n                return false;\r\n              }\r\n            }\r\n            $.address\r\n              .bind('change', module.event.history.change)\r\n            ;\r\n          }\r\n        },\r\n\r\n        event: {\r\n          click: function(event) {\r\n            var\r\n              tabPath = $(this).data(metadata.tab)\r\n            ;\r\n            if(tabPath !== undefined) {\r\n              if(settings.history) {\r\n                module.verbose('Updating page state', event);\r\n                $.address.value(tabPath);\r\n              }\r\n              else {\r\n                module.verbose('Changing tab', event);\r\n                module.changeTab(tabPath);\r\n              }\r\n              event.preventDefault();\r\n            }\r\n            else {\r\n              module.debug('No tab specified');\r\n            }\r\n          },\r\n          history: {\r\n            change: function(event) {\r\n              var\r\n                tabPath   = event.pathNames.join('/') || module.get.initialPath(),\r\n                pageTitle = settings.templates.determineTitle(tabPath) || false\r\n              ;\r\n              module.performance.display();\r\n              module.debug('History change event', tabPath, event);\r\n              historyEvent = event;\r\n              if(tabPath !== undefined) {\r\n                module.changeTab(tabPath);\r\n              }\r\n              if(pageTitle) {\r\n                $.address.title(pageTitle);\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        refresh: function() {\r\n          if(activeTabPath) {\r\n            module.debug('Refreshing tab', activeTabPath);\r\n            module.changeTab(activeTabPath);\r\n          }\r\n        },\r\n\r\n        cache: {\r\n\r\n          read: function(cacheKey) {\r\n            return (cacheKey !== undefined)\r\n              ? cache[cacheKey]\r\n              : false\r\n            ;\r\n          },\r\n          add: function(cacheKey, content) {\r\n            cacheKey = cacheKey || activeTabPath;\r\n            module.debug('Adding cached content for', cacheKey);\r\n            cache[cacheKey] = content;\r\n          },\r\n          remove: function(cacheKey) {\r\n            cacheKey = cacheKey || activeTabPath;\r\n            module.debug('Removing cached content for', cacheKey);\r\n            delete cache[cacheKey];\r\n          }\r\n        },\r\n\r\n        set: {\r\n          auto: function() {\r\n            var\r\n              url = (typeof settings.path == 'string')\r\n                ? settings.path.replace(/\\/$/, '') + '/{$tab}'\r\n                : '/{$tab}'\r\n            ;\r\n            module.verbose('Setting up automatic tab retrieval from server', url);\r\n            if($.isPlainObject(settings.apiSettings)) {\r\n              settings.apiSettings.url = url;\r\n            }\r\n            else {\r\n              settings.apiSettings = {\r\n                url: url\r\n              };\r\n            }\r\n          },\r\n          loading: function(tabPath) {\r\n            var\r\n              $tab      = module.get.tabElement(tabPath),\r\n              isLoading = $tab.hasClass(className.loading)\r\n            ;\r\n            if(!isLoading) {\r\n              module.verbose('Setting loading state for', $tab);\r\n              $tab\r\n                .addClass(className.loading)\r\n                .siblings($tabs)\r\n                  .removeClass(className.active + ' ' + className.loading)\r\n              ;\r\n              if($tab.length > 0) {\r\n                settings.onRequest.call($tab[0], tabPath);\r\n              }\r\n            }\r\n          },\r\n          state: function(state) {\r\n            $.address.value(state);\r\n          }\r\n        },\r\n\r\n        changeTab: function(tabPath) {\r\n          var\r\n            pushStateAvailable = (window.history && window.history.pushState),\r\n            shouldIgnoreLoad   = (pushStateAvailable && settings.ignoreFirstLoad && firstLoad),\r\n            remoteContent      = (settings.auto || $.isPlainObject(settings.apiSettings) ),\r\n            // only add default path if not remote content\r\n            pathArray = (remoteContent && !shouldIgnoreLoad)\r\n              ? module.utilities.pathToArray(tabPath)\r\n              : module.get.defaultPathArray(tabPath)\r\n          ;\r\n          tabPath = module.utilities.arrayToPath(pathArray);\r\n          $.each(pathArray, function(index, tab) {\r\n            var\r\n              currentPathArray   = pathArray.slice(0, index + 1),\r\n              currentPath        = module.utilities.arrayToPath(currentPathArray),\r\n\r\n              isTab              = module.is.tab(currentPath),\r\n              isLastIndex        = (index + 1 == pathArray.length),\r\n\r\n              $tab               = module.get.tabElement(currentPath),\r\n              $anchor,\r\n              nextPathArray,\r\n              nextPath,\r\n              isLastTab\r\n            ;\r\n            module.verbose('Looking for tab', tab);\r\n            if(isTab) {\r\n              module.verbose('Tab was found', tab);\r\n              // scope up\r\n              activeTabPath  = currentPath;\r\n              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);\r\n\r\n              if(isLastIndex) {\r\n                isLastTab = true;\r\n              }\r\n              else {\r\n                nextPathArray = pathArray.slice(0, index + 2);\r\n                nextPath      = module.utilities.arrayToPath(nextPathArray);\r\n                isLastTab     = ( !module.is.tab(nextPath) );\r\n                if(isLastTab) {\r\n                  module.verbose('Tab parameters found', nextPathArray);\r\n                }\r\n              }\r\n              if(isLastTab && remoteContent) {\r\n                if(!shouldIgnoreLoad) {\r\n                  module.activate.navigation(currentPath);\r\n                  module.fetch.content(currentPath, tabPath);\r\n                }\r\n                else {\r\n                  module.debug('Ignoring remote content on first tab load', currentPath);\r\n                  firstLoad = false;\r\n                  module.cache.add(tabPath, $tab.html());\r\n                  module.activate.all(currentPath);\r\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\r\n                  settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\r\n                }\r\n                return false;\r\n              }\r\n              else {\r\n                module.debug('Opened local tab', currentPath);\r\n                module.activate.all(currentPath);\r\n                if( !module.cache.read(currentPath) ) {\r\n                  module.cache.add(currentPath, true);\r\n                  module.debug('First time tab loaded calling tab init');\r\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\r\n                }\r\n                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\r\n              }\r\n\r\n            }\r\n            else if(tabPath.search('/') == -1 && tabPath !== '') {\r\n              // look for in page anchor\r\n              $anchor     = $('#' + tabPath + ', a[name=\"' + tabPath + '\"]');\r\n              currentPath = $anchor.closest('[data-tab]').data(metadata.tab);\r\n              $tab        = module.get.tabElement(currentPath);\r\n              // if anchor exists use parent tab\r\n              if($anchor && $anchor.length > 0 && currentPath) {\r\n                module.debug('Anchor link used, opening parent tab', $tab, $anchor);\r\n                if( !$tab.hasClass(className.active) ) {\r\n                  setTimeout(function() {\r\n                    module.scrollTo($anchor);\r\n                  }, 0);\r\n                }\r\n                module.activate.all(currentPath);\r\n                if( !module.cache.read(currentPath) ) {\r\n                  module.cache.add(currentPath, true);\r\n                  module.debug('First time tab loaded calling tab init');\r\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\r\n                }\r\n                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\r\n                return false;\r\n              }\r\n            }\r\n            else {\r\n              module.error(error.missingTab, $module, $context, currentPath);\r\n              return false;\r\n            }\r\n          });\r\n        },\r\n\r\n        scrollTo: function($element) {\r\n          var\r\n            scrollOffset = ($element && $element.length > 0)\r\n              ? $element.offset().top\r\n              : false\r\n          ;\r\n          if(scrollOffset !== false) {\r\n            module.debug('Forcing scroll to an in-page link in a hidden tab', scrollOffset, $element);\r\n            $(document).scrollTop(scrollOffset);\r\n          }\r\n        },\r\n\r\n        update: {\r\n          content: function(tabPath, html, evaluateScripts) {\r\n            var\r\n              $tab = module.get.tabElement(tabPath),\r\n              tab  = $tab[0]\r\n            ;\r\n            evaluateScripts = (evaluateScripts !== undefined)\r\n              ? evaluateScripts\r\n              : settings.evaluateScripts\r\n            ;\r\n            if(evaluateScripts) {\r\n              module.debug('Updating HTML and evaluating inline scripts', tabPath, html);\r\n              $tab.html(html);\r\n            }\r\n            else {\r\n              module.debug('Updating HTML', tabPath, html);\r\n              tab.innerHTML = html;\r\n            }\r\n          }\r\n        },\r\n\r\n        fetch: {\r\n\r\n          content: function(tabPath, fullTabPath) {\r\n            var\r\n              $tab        = module.get.tabElement(tabPath),\r\n              apiSettings = {\r\n                dataType         : 'html',\r\n                encodeParameters : false,\r\n                on               : 'now',\r\n                cache            : settings.alwaysRefresh,\r\n                headers          : {\r\n                  'X-Remote': true\r\n                },\r\n                onSuccess : function(response) {\r\n                  module.cache.add(fullTabPath, response);\r\n                  module.update.content(tabPath, response);\r\n                  if(tabPath == activeTabPath) {\r\n                    module.debug('Content loaded', tabPath);\r\n                    module.activate.tab(tabPath);\r\n                  }\r\n                  else {\r\n                    module.debug('Content loaded in background', tabPath);\r\n                  }\r\n                  settings.onFirstLoad.call($tab[0], tabPath, parameterArray, historyEvent);\r\n                  settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);\r\n                },\r\n                urlData: {\r\n                  tab: fullTabPath\r\n                }\r\n              },\r\n              request         = $tab.api('get request') || false,\r\n              existingRequest = ( request && request.state() === 'pending' ),\r\n              requestSettings,\r\n              cachedContent\r\n            ;\r\n\r\n            fullTabPath   = fullTabPath || tabPath;\r\n            cachedContent = module.cache.read(fullTabPath);\r\n\r\n\r\n            if(settings.cache && cachedContent) {\r\n              module.activate.tab(tabPath);\r\n              module.debug('Adding cached content', fullTabPath);\r\n              if(settings.evaluateScripts == 'once') {\r\n                module.update.content(tabPath, cachedContent, false);\r\n              }\r\n              else {\r\n                module.update.content(tabPath, cachedContent);\r\n              }\r\n              settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);\r\n            }\r\n            else if(existingRequest) {\r\n              module.set.loading(tabPath);\r\n              module.debug('Content is already loading', fullTabPath);\r\n            }\r\n            else if($.api !== undefined) {\r\n              requestSettings = $.extend(true, {}, settings.apiSettings, apiSettings);\r\n              module.debug('Retrieving remote content', fullTabPath, requestSettings);\r\n              module.set.loading(tabPath);\r\n              $tab.api(requestSettings);\r\n            }\r\n            else {\r\n              module.error(error.api);\r\n            }\r\n          }\r\n        },\r\n\r\n        activate: {\r\n          all: function(tabPath) {\r\n            module.activate.tab(tabPath);\r\n            module.activate.navigation(tabPath);\r\n          },\r\n          tab: function(tabPath) {\r\n            var\r\n              $tab     = module.get.tabElement(tabPath),\r\n              isActive = $tab.hasClass(className.active)\r\n            ;\r\n            module.verbose('Showing tab content for', $tab);\r\n            if(!isActive) {\r\n              $tab\r\n                .addClass(className.active)\r\n                .siblings($tabs)\r\n                  .removeClass(className.active + ' ' + className.loading)\r\n              ;\r\n              if($tab.length > 0) {\r\n                settings.onVisible.call($tab[0], tabPath);\r\n              }\r\n            }\r\n          },\r\n          navigation: function(tabPath) {\r\n            var\r\n              $navigation = module.get.navElement(tabPath),\r\n              isActive    = $navigation.hasClass(className.active)\r\n            ;\r\n            module.verbose('Activating tab navigation for', $navigation, tabPath);\r\n            if(!isActive) {\r\n              $navigation\r\n                .addClass(className.active)\r\n                .siblings($allModules)\r\n                  .removeClass(className.active + ' ' + className.loading)\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        deactivate: {\r\n          all: function() {\r\n            module.deactivate.navigation();\r\n            module.deactivate.tabs();\r\n          },\r\n          navigation: function() {\r\n            $allModules\r\n              .removeClass(className.active)\r\n            ;\r\n          },\r\n          tabs: function() {\r\n            $tabs\r\n              .removeClass(className.active + ' ' + className.loading)\r\n            ;\r\n          }\r\n        },\r\n\r\n        is: {\r\n          tab: function(tabName) {\r\n            return (tabName !== undefined)\r\n              ? ( module.get.tabElement(tabName).length > 0 )\r\n              : false\r\n            ;\r\n          }\r\n        },\r\n\r\n        get: {\r\n          initialPath: function() {\r\n            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);\r\n          },\r\n          path: function() {\r\n            return $.address.value();\r\n          },\r\n          // adds default tabs to tab path\r\n          defaultPathArray: function(tabPath) {\r\n            return module.utilities.pathToArray( module.get.defaultPath(tabPath) );\r\n          },\r\n          defaultPath: function(tabPath) {\r\n            var\r\n              $defaultNav = $allModules.filter('[data-' + metadata.tab + '^=\"' + tabPath + '/\"]').eq(0),\r\n              defaultTab  = $defaultNav.data(metadata.tab) || false\r\n            ;\r\n            if( defaultTab ) {\r\n              module.debug('Found default tab', defaultTab);\r\n              if(recursionDepth < settings.maxDepth) {\r\n                recursionDepth++;\r\n                return module.get.defaultPath(defaultTab);\r\n              }\r\n              module.error(error.recursion);\r\n            }\r\n            else {\r\n              module.debug('No default tabs found for', tabPath, $tabs);\r\n            }\r\n            recursionDepth = 0;\r\n            return tabPath;\r\n          },\r\n          navElement: function(tabPath) {\r\n            tabPath = tabPath || activeTabPath;\r\n            return $allModules.filter('[data-' + metadata.tab + '=\"' + tabPath + '\"]');\r\n          },\r\n          tabElement: function(tabPath) {\r\n            var\r\n              $fullPathTab,\r\n              $simplePathTab,\r\n              tabPathArray,\r\n              lastTab\r\n            ;\r\n            tabPath        = tabPath || activeTabPath;\r\n            tabPathArray   = module.utilities.pathToArray(tabPath);\r\n            lastTab        = module.utilities.last(tabPathArray);\r\n            $fullPathTab   = $tabs.filter('[data-' + metadata.tab + '=\"' + tabPath + '\"]');\r\n            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '=\"' + lastTab + '\"]');\r\n            return ($fullPathTab.length > 0)\r\n              ? $fullPathTab\r\n              : $simplePathTab\r\n            ;\r\n          },\r\n          tab: function() {\r\n            return activeTabPath;\r\n          }\r\n        },\r\n\r\n        utilities: {\r\n          filterArray: function(keepArray, removeArray) {\r\n            return $.grep(keepArray, function(keepValue) {\r\n              return ( $.inArray(keepValue, removeArray) == -1);\r\n            });\r\n          },\r\n          last: function(array) {\r\n            return $.isArray(array)\r\n              ? array[ array.length - 1]\r\n              : false\r\n            ;\r\n          },\r\n          pathToArray: function(pathName) {\r\n            if(pathName === undefined) {\r\n              pathName = activeTabPath;\r\n            }\r\n            return typeof pathName == 'string'\r\n              ? pathName.split('/')\r\n              : [pathName]\r\n            ;\r\n          },\r\n          arrayToPath: function(pathArray) {\r\n            return $.isArray(pathArray)\r\n              ? pathArray.join('/')\r\n              : false\r\n            ;\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n\r\n};\r\n\r\n// shortcut for tabbed content with no defined navigation\r\n$.tab = function() {\r\n  $(window).tab.apply(this, arguments);\r\n};\r\n\r\n$.fn.tab.settings = {\r\n\r\n  name            : 'Tab',\r\n  namespace       : 'tab',\r\n\r\n  debug           : false,\r\n  verbose         : false,\r\n  performance     : true,\r\n\r\n  auto            : false,  // uses pjax style endpoints fetching content from same url with remote-content headers\r\n  history         : false,  // use browser history\r\n  historyType     : 'hash', // #/ or html5 state\r\n  path            : false,  // base path of url\r\n\r\n  context         : false,  // specify a context that tabs must appear inside\r\n  childrenOnly    : false,  // use only tabs that are children of context\r\n  maxDepth        : 25,     // max depth a tab can be nested\r\n\r\n  alwaysRefresh   : false,  // load tab content new every tab click\r\n  cache           : true,   // cache the content requests to pull locally\r\n  ignoreFirstLoad : false,  // don't load remote content on first load\r\n\r\n  apiSettings     : false,  // settings for api call\r\n  evaluateScripts : 'once', // whether inline scripts should be parsed (true/false/once). Once will not re-evaluate on cached content\r\n\r\n  onFirstLoad : function(tabPath, parameterArray, historyEvent) {}, // called first time loaded\r\n  onLoad      : function(tabPath, parameterArray, historyEvent) {}, // called on every load\r\n  onVisible   : function(tabPath, parameterArray, historyEvent) {}, // called every time tab visible\r\n  onRequest   : function(tabPath, parameterArray, historyEvent) {}, // called ever time a tab beings loading remote content\r\n\r\n  templates    : {\r\n    determineTitle: function(tabArray) {} // returns page title for path\r\n  },\r\n\r\n  error: {\r\n    api        : 'You attempted to load content without API module',\r\n    method     : 'The method you called is not defined',\r\n    missingTab : 'Activated tab cannot be found. Tabs are case-sensitive.',\r\n    noContent  : 'The tab you specified is missing a content url.',\r\n    path       : 'History enabled, but no path was specified',\r\n    recursion  : 'Max recursive depth reached',\r\n    legacyInit : 'onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.',\r\n    legacyLoad : 'onTabLoad has been renamed to onLoad in 2.0. Please adjust your code',\r\n    state      : 'History requires Asual\\'s Address library <https://github.com/asual/jquery-address>'\r\n  },\r\n\r\n  metadata : {\r\n    tab    : 'tab',\r\n    loaded : 'loaded',\r\n    promise: 'promise'\r\n  },\r\n\r\n  className   : {\r\n    loading : 'loading',\r\n    active  : 'active'\r\n  },\r\n\r\n  selector    : {\r\n    tabs : '.ui.tab',\r\n    ui   : '.ui'\r\n  }\r\n\r\n};\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Transition\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.transition = function() {\r\n  var\r\n    $allModules     = $(this),\r\n    moduleSelector  = $allModules.selector || '',\r\n\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    moduleArguments = arguments,\r\n    query           = moduleArguments[0],\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n    methodInvoked   = (typeof query === 'string'),\r\n\r\n    requestAnimationFrame = window.requestAnimationFrame\r\n      || window.mozRequestAnimationFrame\r\n      || window.webkitRequestAnimationFrame\r\n      || window.msRequestAnimationFrame\r\n      || function(callback) { setTimeout(callback, 0); },\r\n\r\n    returnedValue\r\n  ;\r\n  $allModules\r\n    .each(function(index) {\r\n      var\r\n        $module  = $(this),\r\n        element  = this,\r\n\r\n        // set at run time\r\n        settings,\r\n        instance,\r\n\r\n        error,\r\n        className,\r\n        metadata,\r\n        animationEnd,\r\n        animationName,\r\n\r\n        namespace,\r\n        moduleNamespace,\r\n        eventNamespace,\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n\r\n          // get full settings\r\n          settings        = module.get.settings.apply(element, moduleArguments);\r\n\r\n          // shorthand\r\n          className       = settings.className;\r\n          error           = settings.error;\r\n          metadata        = settings.metadata;\r\n\r\n          // define namespace\r\n          eventNamespace  = '.' + settings.namespace;\r\n          moduleNamespace = 'module-' + settings.namespace;\r\n          instance        = $module.data(moduleNamespace) || module;\r\n\r\n          // get vendor specific events\r\n          animationEnd    = module.get.animationEndEvent();\r\n\r\n          if(methodInvoked) {\r\n            methodInvoked = module.invoke(query);\r\n          }\r\n\r\n          // method not invoked, lets run an animation\r\n          if(methodInvoked === false) {\r\n            module.verbose('Converted arguments into settings object', settings);\r\n            if(settings.interval) {\r\n              module.delay(settings.animate);\r\n            }\r\n            else  {\r\n              module.animate();\r\n            }\r\n            module.instantiate();\r\n          }\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, instance)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous module for', element);\r\n          $module\r\n            .removeData(moduleNamespace)\r\n          ;\r\n        },\r\n\r\n        refresh: function() {\r\n          module.verbose('Refreshing display type on next animation');\r\n          delete module.displayType;\r\n        },\r\n\r\n        forceRepaint: function() {\r\n          module.verbose('Forcing element repaint');\r\n          var\r\n            $parentElement = $module.parent(),\r\n            $nextElement = $module.next()\r\n          ;\r\n          if($nextElement.length === 0) {\r\n            $module.detach().appendTo($parentElement);\r\n          }\r\n          else {\r\n            $module.detach().insertBefore($nextElement);\r\n          }\r\n        },\r\n\r\n        repaint: function() {\r\n          module.verbose('Repainting element');\r\n          var\r\n            fakeAssignment = element.offsetWidth\r\n          ;\r\n        },\r\n\r\n        delay: function(interval) {\r\n          var\r\n            direction = module.get.animationDirection(),\r\n            shouldReverse,\r\n            delay\r\n          ;\r\n          if(!direction) {\r\n            direction = module.can.transition()\r\n              ? module.get.direction()\r\n              : 'static'\r\n            ;\r\n          }\r\n          interval = (interval !== undefined)\r\n            ? interval\r\n            : settings.interval\r\n          ;\r\n          shouldReverse = (settings.reverse == 'auto' && direction == className.outward);\r\n          delay = (shouldReverse || settings.reverse == true)\r\n            ? ($allModules.length - index) * settings.interval\r\n            : index * settings.interval\r\n          ;\r\n          module.debug('Delaying animation by', delay);\r\n          setTimeout(module.animate, delay);\r\n        },\r\n\r\n        animate: function(overrideSettings) {\r\n          settings = overrideSettings || settings;\r\n          if(!module.is.supported()) {\r\n            module.error(error.support);\r\n            return false;\r\n          }\r\n          module.debug('Preparing animation', settings.animation);\r\n          if(module.is.animating()) {\r\n            if(settings.queue) {\r\n              if(!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {\r\n                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);\r\n              }\r\n              else {\r\n                module.queue(settings.animation);\r\n              }\r\n              return false;\r\n            }\r\n            else if(!settings.allowRepeats && module.is.occurring()) {\r\n              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);\r\n              return false;\r\n            }\r\n            else {\r\n              module.debug('New animation started, completing previous early', settings.animation);\r\n              instance.complete();\r\n            }\r\n          }\r\n          if( module.can.animate() ) {\r\n            module.set.animating(settings.animation);\r\n          }\r\n          else {\r\n            module.error(error.noAnimation, settings.animation, element);\r\n          }\r\n        },\r\n\r\n        reset: function() {\r\n          module.debug('Resetting animation to beginning conditions');\r\n          module.remove.animationCallbacks();\r\n          module.restore.conditions();\r\n          module.remove.animating();\r\n        },\r\n\r\n        queue: function(animation) {\r\n          module.debug('Queueing animation of', animation);\r\n          module.queuing = true;\r\n          $module\r\n            .one(animationEnd + '.queue' + eventNamespace, function() {\r\n              module.queuing = false;\r\n              module.repaint();\r\n              module.animate.apply(this, settings);\r\n            })\r\n          ;\r\n        },\r\n\r\n        complete: function (event) {\r\n          module.debug('Animation complete', settings.animation);\r\n          module.remove.completeCallback();\r\n          module.remove.failSafe();\r\n          if(!module.is.looping()) {\r\n            if( module.is.outward() ) {\r\n              module.verbose('Animation is outward, hiding element');\r\n              module.restore.conditions();\r\n              module.hide();\r\n            }\r\n            else if( module.is.inward() ) {\r\n              module.verbose('Animation is outward, showing element');\r\n              module.restore.conditions();\r\n              module.show();\r\n            }\r\n            else {\r\n              module.verbose('Static animation completed');\r\n              module.restore.conditions();\r\n              settings.onComplete.call(element);\r\n            }\r\n          }\r\n        },\r\n\r\n        force: {\r\n          visible: function() {\r\n            var\r\n              style          = $module.attr('style'),\r\n              userStyle      = module.get.userStyle(),\r\n              displayType    = module.get.displayType(),\r\n              overrideStyle  = userStyle + 'display: ' + displayType + ' !important;',\r\n              currentDisplay = $module.css('display'),\r\n              emptyStyle     = (style === undefined || style === '')\r\n            ;\r\n            if(currentDisplay !== displayType) {\r\n              module.verbose('Overriding default display to show element', displayType);\r\n              $module\r\n                .attr('style', overrideStyle)\r\n              ;\r\n            }\r\n            else if(emptyStyle) {\r\n              $module.removeAttr('style');\r\n            }\r\n          },\r\n          hidden: function() {\r\n            var\r\n              style          = $module.attr('style'),\r\n              currentDisplay = $module.css('display'),\r\n              emptyStyle     = (style === undefined || style === '')\r\n            ;\r\n            if(currentDisplay !== 'none' && !module.is.hidden()) {\r\n              module.verbose('Overriding default display to hide element');\r\n              $module\r\n                .css('display', 'none')\r\n              ;\r\n            }\r\n            else if(emptyStyle) {\r\n              $module\r\n                .removeAttr('style')\r\n              ;\r\n            }\r\n          }\r\n        },\r\n\r\n        has: {\r\n          direction: function(animation) {\r\n            var\r\n              hasDirection = false\r\n            ;\r\n            animation = animation || settings.animation;\r\n            if(typeof animation === 'string') {\r\n              animation = animation.split(' ');\r\n              $.each(animation, function(index, word){\r\n                if(word === className.inward || word === className.outward) {\r\n                  hasDirection = true;\r\n                }\r\n              });\r\n            }\r\n            return hasDirection;\r\n          },\r\n          inlineDisplay: function() {\r\n            var\r\n              style = $module.attr('style') || ''\r\n            ;\r\n            return $.isArray(style.match(/display.*?;/, ''));\r\n          }\r\n        },\r\n\r\n        set: {\r\n          animating: function(animation) {\r\n            var\r\n              animationClass,\r\n              direction\r\n            ;\r\n            // remove previous callbacks\r\n            module.remove.completeCallback();\r\n\r\n            // determine exact animation\r\n            animation      = animation || settings.animation;\r\n            animationClass = module.get.animationClass(animation);\r\n\r\n            // save animation class in cache to restore class names\r\n            module.save.animation(animationClass);\r\n\r\n            // override display if necessary so animation appears visibly\r\n            module.force.visible();\r\n\r\n            module.remove.hidden();\r\n            module.remove.direction();\r\n\r\n            module.start.animation(animationClass);\r\n\r\n          },\r\n          duration: function(animationName, duration) {\r\n            duration = duration || settings.duration;\r\n            duration = (typeof duration == 'number')\r\n              ? duration + 'ms'\r\n              : duration\r\n            ;\r\n            if(duration || duration === 0) {\r\n              module.verbose('Setting animation duration', duration);\r\n              $module\r\n                .css({\r\n                  'animation-duration':  duration\r\n                })\r\n              ;\r\n            }\r\n          },\r\n          direction: function(direction) {\r\n            direction = direction || module.get.direction();\r\n            if(direction == className.inward) {\r\n              module.set.inward();\r\n            }\r\n            else {\r\n              module.set.outward();\r\n            }\r\n          },\r\n          looping: function() {\r\n            module.debug('Transition set to loop');\r\n            $module\r\n              .addClass(className.looping)\r\n            ;\r\n          },\r\n          hidden: function() {\r\n            $module\r\n              .addClass(className.transition)\r\n              .addClass(className.hidden)\r\n            ;\r\n          },\r\n          inward: function() {\r\n            module.debug('Setting direction to inward');\r\n            $module\r\n              .removeClass(className.outward)\r\n              .addClass(className.inward)\r\n            ;\r\n          },\r\n          outward: function() {\r\n            module.debug('Setting direction to outward');\r\n            $module\r\n              .removeClass(className.inward)\r\n              .addClass(className.outward)\r\n            ;\r\n          },\r\n          visible: function() {\r\n            $module\r\n              .addClass(className.transition)\r\n              .addClass(className.visible)\r\n            ;\r\n          }\r\n        },\r\n\r\n        start: {\r\n          animation: function(animationClass) {\r\n            animationClass = animationClass || module.get.animationClass();\r\n            module.debug('Starting tween', animationClass);\r\n            $module\r\n              .addClass(animationClass)\r\n              .one(animationEnd + '.complete' + eventNamespace, module.complete)\r\n            ;\r\n            if(settings.useFailSafe) {\r\n              module.add.failSafe();\r\n            }\r\n            module.set.duration(settings.duration);\r\n            settings.onStart.call(element);\r\n          }\r\n        },\r\n\r\n        save: {\r\n          animation: function(animation) {\r\n            if(!module.cache) {\r\n              module.cache = {};\r\n            }\r\n            module.cache.animation = animation;\r\n          },\r\n          displayType: function(displayType) {\r\n            if(displayType !== 'none') {\r\n              $module.data(metadata.displayType, displayType);\r\n            }\r\n          },\r\n          transitionExists: function(animation, exists) {\r\n            $.fn.transition.exists[animation] = exists;\r\n            module.verbose('Saving existence of transition', animation, exists);\r\n          }\r\n        },\r\n\r\n        restore: {\r\n          conditions: function() {\r\n            var\r\n              animation = module.get.currentAnimation()\r\n            ;\r\n            if(animation) {\r\n              $module\r\n                .removeClass(animation)\r\n              ;\r\n              module.verbose('Removing animation class', module.cache);\r\n            }\r\n            module.remove.duration();\r\n          }\r\n        },\r\n\r\n        add: {\r\n          failSafe: function() {\r\n            var\r\n              duration = module.get.duration()\r\n            ;\r\n            module.timer = setTimeout(function() {\r\n              $module.triggerHandler(animationEnd);\r\n            }, duration + settings.failSafeDelay);\r\n            module.verbose('Adding fail safe timer', module.timer);\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          animating: function() {\r\n            $module.removeClass(className.animating);\r\n          },\r\n          animationCallbacks: function() {\r\n            module.remove.queueCallback();\r\n            module.remove.completeCallback();\r\n          },\r\n          queueCallback: function() {\r\n            $module.off('.queue' + eventNamespace);\r\n          },\r\n          completeCallback: function() {\r\n            $module.off('.complete' + eventNamespace);\r\n          },\r\n          display: function() {\r\n            $module.css('display', '');\r\n          },\r\n          direction: function() {\r\n            $module\r\n              .removeClass(className.inward)\r\n              .removeClass(className.outward)\r\n            ;\r\n          },\r\n          duration: function() {\r\n            $module\r\n              .css('animation-duration', '')\r\n            ;\r\n          },\r\n          failSafe: function() {\r\n            module.verbose('Removing fail safe timer', module.timer);\r\n            if(module.timer) {\r\n              clearTimeout(module.timer);\r\n            }\r\n          },\r\n          hidden: function() {\r\n            $module.removeClass(className.hidden);\r\n          },\r\n          visible: function() {\r\n            $module.removeClass(className.visible);\r\n          },\r\n          looping: function() {\r\n            module.debug('Transitions are no longer looping');\r\n            if( module.is.looping() ) {\r\n              module.reset();\r\n              $module\r\n                .removeClass(className.looping)\r\n              ;\r\n            }\r\n          },\r\n          transition: function() {\r\n            $module\r\n              .removeClass(className.visible)\r\n              .removeClass(className.hidden)\r\n            ;\r\n          }\r\n        },\r\n        get: {\r\n          settings: function(animation, duration, onComplete) {\r\n            // single settings object\r\n            if(typeof animation == 'object') {\r\n              return $.extend(true, {}, $.fn.transition.settings, animation);\r\n            }\r\n            // all arguments provided\r\n            else if(typeof onComplete == 'function') {\r\n              return $.extend({}, $.fn.transition.settings, {\r\n                animation  : animation,\r\n                onComplete : onComplete,\r\n                duration   : duration\r\n              });\r\n            }\r\n            // only duration provided\r\n            else if(typeof duration == 'string' || typeof duration == 'number') {\r\n              return $.extend({}, $.fn.transition.settings, {\r\n                animation : animation,\r\n                duration  : duration\r\n              });\r\n            }\r\n            // duration is actually settings object\r\n            else if(typeof duration == 'object') {\r\n              return $.extend({}, $.fn.transition.settings, duration, {\r\n                animation : animation\r\n              });\r\n            }\r\n            // duration is actually callback\r\n            else if(typeof duration == 'function') {\r\n              return $.extend({}, $.fn.transition.settings, {\r\n                animation  : animation,\r\n                onComplete : duration\r\n              });\r\n            }\r\n            // only animation provided\r\n            else {\r\n              return $.extend({}, $.fn.transition.settings, {\r\n                animation : animation\r\n              });\r\n            }\r\n            return $.fn.transition.settings;\r\n          },\r\n          animationClass: function(animation) {\r\n            var\r\n              animationClass = animation || settings.animation,\r\n              directionClass = (module.can.transition() && !module.has.direction())\r\n                ? module.get.direction() + ' '\r\n                : ''\r\n            ;\r\n            return className.animating + ' '\r\n              + className.transition + ' '\r\n              + directionClass\r\n              + animationClass\r\n            ;\r\n          },\r\n          currentAnimation: function() {\r\n            return (module.cache && module.cache.animation !== undefined)\r\n              ? module.cache.animation\r\n              : false\r\n            ;\r\n          },\r\n          currentDirection: function() {\r\n            return module.is.inward()\r\n              ? className.inward\r\n              : className.outward\r\n            ;\r\n          },\r\n          direction: function() {\r\n            return module.is.hidden() || !module.is.visible()\r\n              ? className.inward\r\n              : className.outward\r\n            ;\r\n          },\r\n          animationDirection: function(animation) {\r\n            var\r\n              direction\r\n            ;\r\n            animation = animation || settings.animation;\r\n            if(typeof animation === 'string') {\r\n              animation = animation.split(' ');\r\n              // search animation name for out/in class\r\n              $.each(animation, function(index, word){\r\n                if(word === className.inward) {\r\n                  direction = className.inward;\r\n                }\r\n                else if(word === className.outward) {\r\n                  direction = className.outward;\r\n                }\r\n              });\r\n            }\r\n            // return found direction\r\n            if(direction) {\r\n              return direction;\r\n            }\r\n            return false;\r\n          },\r\n          duration: function(duration) {\r\n            duration = duration || settings.duration;\r\n            if(duration === false) {\r\n              duration = $module.css('animation-duration') || 0;\r\n            }\r\n            return (typeof duration === 'string')\r\n              ? (duration.indexOf('ms') > -1)\r\n                ? parseFloat(duration)\r\n                : parseFloat(duration) * 1000\r\n              : duration\r\n            ;\r\n          },\r\n          displayType: function() {\r\n            if(settings.displayType) {\r\n              return settings.displayType;\r\n            }\r\n            if($module.data(metadata.displayType) === undefined) {\r\n              // create fake element to determine display state\r\n              module.can.transition(true);\r\n            }\r\n            return $module.data(metadata.displayType);\r\n          },\r\n          userStyle: function(style) {\r\n            style = style || $module.attr('style') || '';\r\n            return style.replace(/display.*?;/, '');\r\n          },\r\n          transitionExists: function(animation) {\r\n            return $.fn.transition.exists[animation];\r\n          },\r\n          animationStartEvent: function() {\r\n            var\r\n              element     = document.createElement('div'),\r\n              animations  = {\r\n                'animation'       :'animationstart',\r\n                'OAnimation'      :'oAnimationStart',\r\n                'MozAnimation'    :'mozAnimationStart',\r\n                'WebkitAnimation' :'webkitAnimationStart'\r\n              },\r\n              animation\r\n            ;\r\n            for(animation in animations){\r\n              if( element.style[animation] !== undefined ){\r\n                return animations[animation];\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          animationEndEvent: function() {\r\n            var\r\n              element     = document.createElement('div'),\r\n              animations  = {\r\n                'animation'       :'animationend',\r\n                'OAnimation'      :'oAnimationEnd',\r\n                'MozAnimation'    :'mozAnimationEnd',\r\n                'WebkitAnimation' :'webkitAnimationEnd'\r\n              },\r\n              animation\r\n            ;\r\n            for(animation in animations){\r\n              if( element.style[animation] !== undefined ){\r\n                return animations[animation];\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n        },\r\n\r\n        can: {\r\n          transition: function(forced) {\r\n            var\r\n              animation         = settings.animation,\r\n              transitionExists  = module.get.transitionExists(animation),\r\n              elementClass,\r\n              tagName,\r\n              $clone,\r\n              currentAnimation,\r\n              inAnimation,\r\n              directionExists,\r\n              displayType\r\n            ;\r\n            if( transitionExists === undefined || forced) {\r\n              module.verbose('Determining whether animation exists');\r\n              elementClass = $module.attr('class');\r\n              tagName      = $module.prop('tagName');\r\n\r\n              $clone = $('<' + tagName + ' />').addClass( elementClass ).insertAfter($module);\r\n              currentAnimation = $clone\r\n                .addClass(animation)\r\n                .removeClass(className.inward)\r\n                .removeClass(className.outward)\r\n                .addClass(className.animating)\r\n                .addClass(className.transition)\r\n                .css('animationName')\r\n              ;\r\n              inAnimation = $clone\r\n                .addClass(className.inward)\r\n                .css('animationName')\r\n              ;\r\n              displayType = $clone\r\n                .attr('class', elementClass)\r\n                .removeAttr('style')\r\n                .removeClass(className.hidden)\r\n                .removeClass(className.visible)\r\n                .show()\r\n                .css('display')\r\n              ;\r\n              module.verbose('Determining final display state', displayType);\r\n              module.save.displayType(displayType);\r\n\r\n              $clone.remove();\r\n              if(currentAnimation != inAnimation) {\r\n                module.debug('Direction exists for animation', animation);\r\n                directionExists = true;\r\n              }\r\n              else if(currentAnimation == 'none' || !currentAnimation) {\r\n                module.debug('No animation defined in css', animation);\r\n                return;\r\n              }\r\n              else {\r\n                module.debug('Static animation found', animation, displayType);\r\n                directionExists = false;\r\n              }\r\n              module.save.transitionExists(animation, directionExists);\r\n            }\r\n            return (transitionExists !== undefined)\r\n              ? transitionExists\r\n              : directionExists\r\n            ;\r\n          },\r\n          animate: function() {\r\n            // can transition does not return a value if animation does not exist\r\n            return (module.can.transition() !== undefined);\r\n          }\r\n        },\r\n\r\n        is: {\r\n          animating: function() {\r\n            return $module.hasClass(className.animating);\r\n          },\r\n          inward: function() {\r\n            return $module.hasClass(className.inward);\r\n          },\r\n          outward: function() {\r\n            return $module.hasClass(className.outward);\r\n          },\r\n          looping: function() {\r\n            return $module.hasClass(className.looping);\r\n          },\r\n          occurring: function(animation) {\r\n            animation = animation || settings.animation;\r\n            animation = '.' + animation.replace(' ', '.');\r\n            return ( $module.filter(animation).length > 0 );\r\n          },\r\n          visible: function() {\r\n            return $module.is(':visible');\r\n          },\r\n          hidden: function() {\r\n            return $module.css('visibility') === 'hidden';\r\n          },\r\n          supported: function() {\r\n            return(animationEnd !== false);\r\n          }\r\n        },\r\n\r\n        hide: function() {\r\n          module.verbose('Hiding element');\r\n          if( module.is.animating() ) {\r\n            module.reset();\r\n          }\r\n          element.blur(); // IE will trigger focus change if element is not blurred before hiding\r\n          module.remove.display();\r\n          module.remove.visible();\r\n          module.set.hidden();\r\n          module.force.hidden();\r\n          settings.onHide.call(element);\r\n          settings.onComplete.call(element);\r\n          // module.repaint();\r\n        },\r\n\r\n        show: function(display) {\r\n          module.verbose('Showing element', display);\r\n          module.remove.hidden();\r\n          module.set.visible();\r\n          module.force.visible();\r\n          settings.onShow.call(element);\r\n          settings.onComplete.call(element);\r\n          // module.repaint();\r\n        },\r\n\r\n        toggle: function() {\r\n          if( module.is.visible() ) {\r\n            module.hide();\r\n          }\r\n          else {\r\n            module.show();\r\n          }\r\n        },\r\n\r\n        stop: function() {\r\n          module.debug('Stopping current animation');\r\n          $module.triggerHandler(animationEnd);\r\n        },\r\n\r\n        stopAll: function() {\r\n          module.debug('Stopping all animation');\r\n          module.remove.queueCallback();\r\n          $module.triggerHandler(animationEnd);\r\n        },\r\n\r\n        clear: {\r\n          queue: function() {\r\n            module.debug('Clearing animation queue');\r\n            module.remove.queueCallback();\r\n          }\r\n        },\r\n\r\n        enable: function() {\r\n          module.verbose('Starting animation');\r\n          $module.removeClass(className.disabled);\r\n        },\r\n\r\n        disable: function() {\r\n          module.debug('Stopping animation');\r\n          $module.addClass(className.disabled);\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if($allModules.length > 1) {\r\n              title += ' ' + '(' + $allModules.length + ')';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        // modified for transition to return invoke success\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return (found !== undefined)\r\n            ? found\r\n            : false\r\n          ;\r\n        }\r\n      };\r\n      module.initialize();\r\n    })\r\n  ;\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n// Records if CSS transition is available\r\n$.fn.transition.exists = {};\r\n\r\n$.fn.transition.settings = {\r\n\r\n  // module info\r\n  name          : 'Transition',\r\n\r\n  // debug content outputted to console\r\n  debug         : false,\r\n\r\n  // verbose debug output\r\n  verbose       : false,\r\n\r\n  // performance data output\r\n  performance   : true,\r\n\r\n  // event namespace\r\n  namespace     : 'transition',\r\n\r\n  // delay between animations in group\r\n  interval      : 0,\r\n\r\n  // whether group animations should be reversed\r\n  reverse       : 'auto',\r\n\r\n  // animation callback event\r\n  onStart       : function() {},\r\n  onComplete    : function() {},\r\n  onShow        : function() {},\r\n  onHide        : function() {},\r\n\r\n  // whether timeout should be used to ensure callback fires in cases animationend does not\r\n  useFailSafe   : true,\r\n\r\n  // delay in ms for fail safe\r\n  failSafeDelay : 100,\r\n\r\n  // whether EXACT animation can occur twice in a row\r\n  allowRepeats  : false,\r\n\r\n  // Override final display type on visible\r\n  displayType   : false,\r\n\r\n  // animation duration\r\n  animation     : 'fade',\r\n  duration      : false,\r\n\r\n  // new animations will occur after previous ones\r\n  queue         : true,\r\n\r\n  metadata : {\r\n    displayType: 'display'\r\n  },\r\n\r\n  className   : {\r\n    animating  : 'animating',\r\n    disabled   : 'disabled',\r\n    hidden     : 'hidden',\r\n    inward     : 'in',\r\n    loading    : 'loading',\r\n    looping    : 'looping',\r\n    outward    : 'out',\r\n    transition : 'transition',\r\n    visible    : 'visible'\r\n  },\r\n\r\n  // possible errors\r\n  error: {\r\n    noAnimation : 'Element is no longer attached to DOM. Unable to animate.',\r\n    repeated    : 'That animation is already occurring, cancelling repeated animation',\r\n    method      : 'The method you called is not defined',\r\n    support     : 'This browser does not support CSS animations'\r\n  }\r\n\r\n};\r\n\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - API\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.api = $.fn.api = function(parameters) {\r\n\r\n  var\r\n    // use window context if none specified\r\n    $allModules     = $.isFunction(this)\r\n        ? $(window)\r\n        : $(this),\r\n    moduleSelector = $allModules.selector || '',\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings          = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.api.settings, parameters)\r\n          : $.extend({}, $.fn.api.settings),\r\n\r\n        // internal aliases\r\n        namespace       = settings.namespace,\r\n        metadata        = settings.metadata,\r\n        selector        = settings.selector,\r\n        error           = settings.error,\r\n        className       = settings.className,\r\n\r\n        // define namespaces for modules\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        // element that creates request\r\n        $module         = $(this),\r\n        $form           = $module.closest(selector.form),\r\n\r\n        // context used for state\r\n        $context        = (settings.stateContext)\r\n          ? $(settings.stateContext)\r\n          : $module,\r\n\r\n        // request details\r\n        ajaxSettings,\r\n        requestSettings,\r\n        url,\r\n        data,\r\n        requestStartTime,\r\n\r\n        // standard module\r\n        element         = this,\r\n        context         = $context[0],\r\n        instance        = $module.data(moduleNamespace),\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          if(!methodInvoked) {\r\n            module.bind.events();\r\n          }\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, instance)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous module for', element);\r\n          $module\r\n            .removeData(moduleNamespace)\r\n            .off(eventNamespace)\r\n          ;\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            var\r\n              triggerEvent = module.get.event()\r\n            ;\r\n            if( triggerEvent ) {\r\n              module.verbose('Attaching API events to element', triggerEvent);\r\n              $module\r\n                .on(triggerEvent + eventNamespace, module.event.trigger)\r\n              ;\r\n            }\r\n            else if(settings.on == 'now') {\r\n              module.debug('Querying API endpoint immediately');\r\n              module.query();\r\n            }\r\n          }\r\n        },\r\n\r\n        decode: {\r\n          json: function(response) {\r\n            if(response !== undefined && typeof response == 'string') {\r\n              try {\r\n               response = JSON.parse(response);\r\n              }\r\n              catch(e) {\r\n                // isnt json string\r\n              }\r\n            }\r\n            return response;\r\n          }\r\n        },\r\n\r\n        read: {\r\n          cachedResponse: function(url) {\r\n            var\r\n              response\r\n            ;\r\n            if(window.Storage === undefined) {\r\n              module.error(error.noStorage);\r\n              return;\r\n            }\r\n            response = sessionStorage.getItem(url);\r\n            module.debug('Using cached response', url, response);\r\n            response = module.decode.json(response);\r\n            return false;\r\n          }\r\n        },\r\n        write: {\r\n          cachedResponse: function(url, response) {\r\n            if(response && response === '') {\r\n              module.debug('Response empty, not caching', response);\r\n              return;\r\n            }\r\n            if(window.Storage === undefined) {\r\n              module.error(error.noStorage);\r\n              return;\r\n            }\r\n            if( $.isPlainObject(response) ) {\r\n              response = JSON.stringify(response);\r\n            }\r\n            sessionStorage.setItem(url, response);\r\n            module.verbose('Storing cached response for url', url, response);\r\n          }\r\n        },\r\n\r\n        query: function() {\r\n\r\n          if(module.is.disabled()) {\r\n            module.debug('Element is disabled API request aborted');\r\n            return;\r\n          }\r\n\r\n          if(module.is.loading()) {\r\n            if(settings.interruptRequests) {\r\n              module.debug('Interrupting previous request');\r\n              module.abort();\r\n            }\r\n            else {\r\n              module.debug('Cancelling request, previous request is still pending');\r\n              return;\r\n            }\r\n          }\r\n\r\n          // pass element metadata to url (value, text)\r\n          if(settings.defaultData) {\r\n            $.extend(true, settings.urlData, module.get.defaultData());\r\n          }\r\n\r\n          // Add form content\r\n          if(settings.serializeForm) {\r\n            settings.data = module.add.formData(settings.data);\r\n          }\r\n\r\n          // call beforesend and get any settings changes\r\n          requestSettings = module.get.settings();\r\n\r\n          // check if before send cancelled request\r\n          if(requestSettings === false) {\r\n            module.cancelled = true;\r\n            module.error(error.beforeSend);\r\n            return;\r\n          }\r\n          else {\r\n            module.cancelled = false;\r\n          }\r\n\r\n          // get url\r\n          url = module.get.templatedURL();\r\n\r\n          if(!url && !module.is.mocked()) {\r\n            module.error(error.missingURL);\r\n            return;\r\n          }\r\n\r\n          // replace variables\r\n          url = module.add.urlData( url );\r\n          // missing url parameters\r\n          if( !url && !module.is.mocked()) {\r\n            return;\r\n          }\r\n\r\n          requestSettings.url = settings.base + url;\r\n\r\n          // look for jQuery ajax parameters in settings\r\n          ajaxSettings = $.extend(true, {}, settings, {\r\n            type       : settings.method || settings.type,\r\n            data       : data,\r\n            url        : settings.base + url,\r\n            beforeSend : settings.beforeXHR,\r\n            success    : function() {},\r\n            failure    : function() {},\r\n            complete   : function() {}\r\n          });\r\n\r\n          module.debug('Querying URL', ajaxSettings.url);\r\n          module.verbose('Using AJAX settings', ajaxSettings);\r\n\r\n          if(settings.cache === 'local' && module.read.cachedResponse(url)) {\r\n            module.debug('Response returned from local cache');\r\n            module.request = module.create.request();\r\n            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);\r\n            return;\r\n          }\r\n\r\n          if( !settings.throttle ) {\r\n            module.debug('Sending request', data, ajaxSettings.method);\r\n            module.send.request();\r\n          }\r\n          else {\r\n            if(!settings.throttleFirstRequest && !module.timer) {\r\n              module.debug('Sending request', data, ajaxSettings.method);\r\n              module.send.request();\r\n              module.timer = setTimeout(function(){}, settings.throttle);\r\n            }\r\n            else {\r\n              module.debug('Throttling request', settings.throttle);\r\n              clearTimeout(module.timer);\r\n              module.timer = setTimeout(function() {\r\n                if(module.timer) {\r\n                  delete module.timer;\r\n                }\r\n                module.debug('Sending throttled request', data, ajaxSettings.method);\r\n                module.send.request();\r\n              }, settings.throttle);\r\n            }\r\n          }\r\n\r\n        },\r\n\r\n        should: {\r\n          removeError: function() {\r\n            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );\r\n          }\r\n        },\r\n\r\n        is: {\r\n          disabled: function() {\r\n            return ($module.filter(selector.disabled).length > 0);\r\n          },\r\n          form: function() {\r\n            return $module.is('form') || $context.is('form');\r\n          },\r\n          mocked: function() {\r\n            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);\r\n          },\r\n          input: function() {\r\n            return $module.is('input');\r\n          },\r\n          loading: function() {\r\n            return (module.request && module.request.state() == 'pending');\r\n          },\r\n          abortedRequest: function(xhr) {\r\n            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\r\n              module.verbose('XHR request determined to be aborted');\r\n              return true;\r\n            }\r\n            else {\r\n              module.verbose('XHR request was not aborted');\r\n              return false;\r\n            }\r\n          },\r\n          validResponse: function(response) {\r\n            if( (settings.dataType !== 'json' && settings.dataType !== 'jsonp') || !$.isFunction(settings.successTest) ) {\r\n              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);\r\n              return true;\r\n            }\r\n            module.debug('Checking JSON returned success', settings.successTest, response);\r\n            if( settings.successTest(response) ) {\r\n              module.debug('Response passed success test', response);\r\n              return true;\r\n            }\r\n            else {\r\n              module.debug('Response failed success test', response);\r\n              return false;\r\n            }\r\n          }\r\n        },\r\n\r\n        was: {\r\n          cancelled: function() {\r\n            return (module.cancelled || false);\r\n          },\r\n          succesful: function() {\r\n            return (module.request && module.request.state() == 'resolved');\r\n          },\r\n          failure: function() {\r\n            return (module.request && module.request.state() == 'rejected');\r\n          },\r\n          complete: function() {\r\n            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );\r\n          }\r\n        },\r\n\r\n        add: {\r\n          urlData: function(url, urlData) {\r\n            var\r\n              requiredVariables,\r\n              optionalVariables\r\n            ;\r\n            if(url) {\r\n              requiredVariables = url.match(settings.regExp.required);\r\n              optionalVariables = url.match(settings.regExp.optional);\r\n              urlData           = urlData || settings.urlData;\r\n              if(requiredVariables) {\r\n                module.debug('Looking for required URL variables', requiredVariables);\r\n                $.each(requiredVariables, function(index, templatedString) {\r\n                  var\r\n                    // allow legacy {$var} style\r\n                    variable = (templatedString.indexOf('$') !== -1)\r\n                      ? templatedString.substr(2, templatedString.length - 3)\r\n                      : templatedString.substr(1, templatedString.length - 2),\r\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\r\n                      ? urlData[variable]\r\n                      : ($module.data(variable) !== undefined)\r\n                        ? $module.data(variable)\r\n                        : ($context.data(variable) !== undefined)\r\n                          ? $context.data(variable)\r\n                          : urlData[variable]\r\n                  ;\r\n                  // remove value\r\n                  if(value === undefined) {\r\n                    module.error(error.requiredParameter, variable, url);\r\n                    url = false;\r\n                    return false;\r\n                  }\r\n                  else {\r\n                    module.verbose('Found required variable', variable, value);\r\n                    value = (settings.encodeParameters)\r\n                      ? module.get.urlEncodedValue(value)\r\n                      : value\r\n                    ;\r\n                    url = url.replace(templatedString, value);\r\n                  }\r\n                });\r\n              }\r\n              if(optionalVariables) {\r\n                module.debug('Looking for optional URL variables', requiredVariables);\r\n                $.each(optionalVariables, function(index, templatedString) {\r\n                  var\r\n                    // allow legacy {/$var} style\r\n                    variable = (templatedString.indexOf('$') !== -1)\r\n                      ? templatedString.substr(3, templatedString.length - 4)\r\n                      : templatedString.substr(2, templatedString.length - 3),\r\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\r\n                      ? urlData[variable]\r\n                      : ($module.data(variable) !== undefined)\r\n                        ? $module.data(variable)\r\n                        : ($context.data(variable) !== undefined)\r\n                          ? $context.data(variable)\r\n                          : urlData[variable]\r\n                  ;\r\n                  // optional replacement\r\n                  if(value !== undefined) {\r\n                    module.verbose('Optional variable Found', variable, value);\r\n                    url = url.replace(templatedString, value);\r\n                  }\r\n                  else {\r\n                    module.verbose('Optional variable not found', variable);\r\n                    // remove preceding slash if set\r\n                    if(url.indexOf('/' + templatedString) !== -1) {\r\n                      url = url.replace('/' + templatedString, '');\r\n                    }\r\n                    else {\r\n                      url = url.replace(templatedString, '');\r\n                    }\r\n                  }\r\n                });\r\n              }\r\n            }\r\n            return url;\r\n          },\r\n          formData: function(data) {\r\n            var\r\n              canSerialize = ($.fn.serializeObject !== undefined),\r\n              formData     = (canSerialize)\r\n                ? $form.serializeObject()\r\n                : $form.serialize(),\r\n              hasOtherData\r\n            ;\r\n            data         = data || settings.data;\r\n            hasOtherData = $.isPlainObject(data);\r\n\r\n            if(hasOtherData) {\r\n              if(canSerialize) {\r\n                module.debug('Extending existing data with form data', data, formData);\r\n                data = $.extend(true, {}, data, formData);\r\n              }\r\n              else {\r\n                module.error(error.missingSerialize);\r\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\r\n                data = formData;\r\n              }\r\n            }\r\n            else {\r\n              module.debug('Adding form data', formData);\r\n              data = formData;\r\n            }\r\n            return data;\r\n          }\r\n        },\r\n\r\n        send: {\r\n          request: function() {\r\n            module.set.loading();\r\n            module.request = module.create.request();\r\n            if( module.is.mocked() ) {\r\n              module.mockedXHR = module.create.mockedXHR();\r\n            }\r\n            else {\r\n              module.xhr = module.create.xhr();\r\n            }\r\n            settings.onRequest.call(context, module.request, module.xhr);\r\n          }\r\n        },\r\n\r\n        event: {\r\n          trigger: function(event) {\r\n            module.query();\r\n            if(event.type == 'submit' || event.type == 'click') {\r\n              event.preventDefault();\r\n            }\r\n          },\r\n          xhr: {\r\n            always: function() {\r\n              // nothing special\r\n            },\r\n            done: function(response, textStatus, xhr) {\r\n              var\r\n                context            = this,\r\n                elapsedTime        = (new Date().getTime() - requestStartTime),\r\n                timeLeft           = (settings.loadingDuration - elapsedTime),\r\n                translatedResponse = ( $.isFunction(settings.onResponse) )\r\n                  ? settings.onResponse.call(context, $.extend(true, {}, response))\r\n                  : false\r\n              ;\r\n              timeLeft = (timeLeft > 0)\r\n                ? timeLeft\r\n                : 0\r\n              ;\r\n              if(translatedResponse) {\r\n                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);\r\n                response = translatedResponse;\r\n              }\r\n              if(timeLeft > 0) {\r\n                module.debug('Response completed early delaying state change by', timeLeft);\r\n              }\r\n              setTimeout(function() {\r\n                if( module.is.validResponse(response) ) {\r\n                  module.request.resolveWith(context, [response, xhr]);\r\n                }\r\n                else {\r\n                  module.request.rejectWith(context, [xhr, 'invalid']);\r\n                }\r\n              }, timeLeft);\r\n            },\r\n            fail: function(xhr, status, httpMessage) {\r\n              var\r\n                context     = this,\r\n                elapsedTime = (new Date().getTime() - requestStartTime),\r\n                timeLeft    = (settings.loadingDuration - elapsedTime)\r\n              ;\r\n              timeLeft = (timeLeft > 0)\r\n                ? timeLeft\r\n                : 0\r\n              ;\r\n              if(timeLeft > 0) {\r\n                module.debug('Response completed early delaying state change by', timeLeft);\r\n              }\r\n              setTimeout(function() {\r\n                if( module.is.abortedRequest(xhr) ) {\r\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\r\n                }\r\n                else {\r\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\r\n                }\r\n              }, timeLeft);\r\n            }\r\n          },\r\n          request: {\r\n            done: function(response, xhr) {\r\n              module.debug('Successful API Response', response);\r\n              if(settings.cache === 'local' && url) {\r\n                module.write.cachedResponse(url, response);\r\n                module.debug('Saving server response locally', module.cache);\r\n              }\r\n              settings.onSuccess.call(context, response, $module, xhr);\r\n            },\r\n            complete: function(firstParameter, secondParameter) {\r\n              var\r\n                xhr,\r\n                response\r\n              ;\r\n              // have to guess callback parameters based on request success\r\n              if( module.was.succesful() ) {\r\n                response = firstParameter;\r\n                xhr      = secondParameter;\r\n              }\r\n              else {\r\n                xhr      = firstParameter;\r\n                response = module.get.responseFromXHR(xhr);\r\n              }\r\n              module.remove.loading();\r\n              settings.onComplete.call(context, response, $module, xhr);\r\n            },\r\n            fail: function(xhr, status, httpMessage) {\r\n              var\r\n                // pull response from xhr if available\r\n                response     = module.get.responseFromXHR(xhr),\r\n                errorMessage = module.get.errorFromRequest(response, status, httpMessage)\r\n              ;\r\n              if(status == 'aborted') {\r\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\r\n                settings.onAbort.call(context, status, $module, xhr);\r\n              }\r\n              else if(status == 'invalid') {\r\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\r\n              }\r\n              else if(status == 'error')  {\r\n                if(xhr !== undefined) {\r\n                  module.debug('XHR produced a server error', status, httpMessage);\r\n                  // make sure we have an error to display to console\r\n                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\r\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\r\n                  }\r\n                  settings.onError.call(context, errorMessage, $module, xhr);\r\n                }\r\n              }\r\n\r\n              if(settings.errorDuration && status !== 'aborted') {\r\n                module.debug('Adding error state');\r\n                module.set.error();\r\n                if( module.should.removeError() ) {\r\n                  setTimeout(module.remove.error, settings.errorDuration);\r\n                }\r\n              }\r\n              module.debug('API Request failed', errorMessage, xhr);\r\n              settings.onFailure.call(context, response, $module, xhr);\r\n            }\r\n          }\r\n        },\r\n\r\n        create: {\r\n\r\n          request: function() {\r\n            // api request promise\r\n            return $.Deferred()\r\n              .always(module.event.request.complete)\r\n              .done(module.event.request.done)\r\n              .fail(module.event.request.fail)\r\n            ;\r\n          },\r\n\r\n          mockedXHR: function () {\r\n            var\r\n              // xhr does not simulate these properties of xhr but must return them\r\n              textStatus     = false,\r\n              status         = false,\r\n              httpMessage    = false,\r\n              responder      = settings.mockResponse      || settings.response,\r\n              asyncResponder = settings.mockResponseAsync || settings.responseAsync,\r\n              asyncCallback,\r\n              response,\r\n              mockedXHR\r\n            ;\r\n\r\n            mockedXHR = $.Deferred()\r\n              .always(module.event.xhr.complete)\r\n              .done(module.event.xhr.done)\r\n              .fail(module.event.xhr.fail)\r\n            ;\r\n\r\n            if(responder) {\r\n              if( $.isFunction(responder) ) {\r\n                module.debug('Using specified synchronous callback', responder);\r\n                response = responder.call(context, requestSettings);\r\n              }\r\n              else {\r\n                module.debug('Using settings specified response', responder);\r\n                response = responder;\r\n              }\r\n              // simulating response\r\n              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\r\n            }\r\n            else if( $.isFunction(asyncResponder) ) {\r\n              asyncCallback = function(response) {\r\n                module.debug('Async callback returned response', response);\r\n\r\n                if(response) {\r\n                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\r\n                }\r\n                else {\r\n                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);\r\n                }\r\n              };\r\n              module.debug('Using specified async response callback', asyncResponder);\r\n              asyncResponder.call(context, requestSettings, asyncCallback);\r\n            }\r\n            return mockedXHR;\r\n          },\r\n\r\n          xhr: function() {\r\n            var\r\n              xhr\r\n            ;\r\n            // ajax request promise\r\n            xhr = $.ajax(ajaxSettings)\r\n              .always(module.event.xhr.always)\r\n              .done(module.event.xhr.done)\r\n              .fail(module.event.xhr.fail)\r\n            ;\r\n            module.verbose('Created server request', xhr);\r\n            return xhr;\r\n          }\r\n        },\r\n\r\n        set: {\r\n          error: function() {\r\n            module.verbose('Adding error state to element', $context);\r\n            $context.addClass(className.error);\r\n          },\r\n          loading: function() {\r\n            module.verbose('Adding loading state to element', $context);\r\n            $context.addClass(className.loading);\r\n            requestStartTime = new Date().getTime();\r\n          }\r\n        },\r\n\r\n        remove: {\r\n          error: function() {\r\n            module.verbose('Removing error state from element', $context);\r\n            $context.removeClass(className.error);\r\n          },\r\n          loading: function() {\r\n            module.verbose('Removing loading state from element', $context);\r\n            $context.removeClass(className.loading);\r\n          }\r\n        },\r\n\r\n        get: {\r\n          responseFromXHR: function(xhr) {\r\n            return $.isPlainObject(xhr)\r\n              ? (settings.dataType == 'json' || settings.dataType == 'jsonp')\r\n                ? module.decode.json(xhr.responseText)\r\n                : xhr.responseText\r\n              : false\r\n            ;\r\n          },\r\n          errorFromRequest: function(response, status, httpMessage) {\r\n            return ($.isPlainObject(response) && response.error !== undefined)\r\n              ? response.error // use json error message\r\n              : (settings.error[status] !== undefined) // use server error message\r\n                ? settings.error[status]\r\n                : httpMessage\r\n            ;\r\n          },\r\n          request: function() {\r\n            return module.request || false;\r\n          },\r\n          xhr: function() {\r\n            return module.xhr || false;\r\n          },\r\n          settings: function() {\r\n            var\r\n              runSettings\r\n            ;\r\n            runSettings = settings.beforeSend.call(context, settings);\r\n            if(runSettings) {\r\n              if(runSettings.success !== undefined) {\r\n                module.debug('Legacy success callback detected', runSettings);\r\n                module.error(error.legacyParameters, runSettings.success);\r\n                runSettings.onSuccess = runSettings.success;\r\n              }\r\n              if(runSettings.failure !== undefined) {\r\n                module.debug('Legacy failure callback detected', runSettings);\r\n                module.error(error.legacyParameters, runSettings.failure);\r\n                runSettings.onFailure = runSettings.failure;\r\n              }\r\n              if(runSettings.complete !== undefined) {\r\n                module.debug('Legacy complete callback detected', runSettings);\r\n                module.error(error.legacyParameters, runSettings.complete);\r\n                runSettings.onComplete = runSettings.complete;\r\n              }\r\n            }\r\n            if(runSettings === undefined) {\r\n              module.error(error.noReturnedValue);\r\n            }\r\n            return (runSettings !== undefined)\r\n              ? $.extend(true, {}, runSettings)\r\n              : $.extend(true, {}, settings)\r\n            ;\r\n          },\r\n          urlEncodedValue: function(value) {\r\n            var\r\n              decodedValue   = window.decodeURIComponent(value),\r\n              encodedValue   = window.encodeURIComponent(value),\r\n              alreadyEncoded = (decodedValue !== value)\r\n            ;\r\n            if(alreadyEncoded) {\r\n              module.debug('URL value is already encoded, avoiding double encoding', value);\r\n              return value;\r\n            }\r\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\r\n            return encodedValue;\r\n          },\r\n          defaultData: function() {\r\n            var\r\n              data = {}\r\n            ;\r\n            if( !$.isWindow(element) ) {\r\n              if( module.is.input() ) {\r\n                data.value = $module.val();\r\n              }\r\n              else if( !module.is.form() ) {\r\n\r\n              }\r\n              else {\r\n                data.text = $module.text();\r\n              }\r\n            }\r\n            return data;\r\n          },\r\n          event: function() {\r\n            if( $.isWindow(element) || settings.on == 'now' ) {\r\n              module.debug('API called without element, no events attached');\r\n              return false;\r\n            }\r\n            else if(settings.on == 'auto') {\r\n              if( $module.is('input') ) {\r\n                return (element.oninput !== undefined)\r\n                  ? 'input'\r\n                  : (element.onpropertychange !== undefined)\r\n                    ? 'propertychange'\r\n                    : 'keyup'\r\n                ;\r\n              }\r\n              else if( $module.is('form') ) {\r\n                return 'submit';\r\n              }\r\n              else {\r\n                return 'click';\r\n              }\r\n            }\r\n            else {\r\n              return settings.on;\r\n            }\r\n          },\r\n          templatedURL: function(action) {\r\n            action = action || $module.data(metadata.action) || settings.action || false;\r\n            url    = $module.data(metadata.url) || settings.url || false;\r\n            if(url) {\r\n              module.debug('Using specified url', url);\r\n              return url;\r\n            }\r\n            if(action) {\r\n              module.debug('Looking up url for action', action, settings.api);\r\n              if(settings.api[action] === undefined && !module.is.mocked()) {\r\n                module.error(error.missingAction, settings.action, settings.api);\r\n                return;\r\n              }\r\n              url = settings.api[action];\r\n            }\r\n            else if( module.is.form() ) {\r\n              url = $module.attr('action') || $context.attr('action') || false;\r\n              module.debug('No url or action specified, defaulting to form action', url);\r\n            }\r\n            return url;\r\n          }\r\n        },\r\n\r\n        abort: function() {\r\n          var\r\n            xhr = module.get.xhr()\r\n          ;\r\n          if( xhr && xhr.state() !== 'resolved') {\r\n            module.debug('Cancelling API request');\r\n            xhr.abort();\r\n          }\r\n        },\r\n\r\n        // reset state\r\n        reset: function() {\r\n          module.remove.error();\r\n          module.remove.loading();\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                //'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.api.settings = {\r\n\r\n  name              : 'API',\r\n  namespace         : 'api',\r\n\r\n  debug             : false,\r\n  verbose           : false,\r\n  performance       : true,\r\n\r\n  // object containing all templates endpoints\r\n  api               : {},\r\n\r\n  // whether to cache responses\r\n  cache             : true,\r\n\r\n  // whether new requests should abort previous requests\r\n  interruptRequests : true,\r\n\r\n  // event binding\r\n  on                : 'auto',\r\n\r\n  // context for applying state classes\r\n  stateContext      : false,\r\n\r\n  // duration for loading state\r\n  loadingDuration   : 0,\r\n\r\n  // whether to hide errors after a period of time\r\n  hideError         : 'auto',\r\n\r\n  // duration for error state\r\n  errorDuration     : 2000,\r\n\r\n  // whether parameters should be encoded with encodeURIComponent\r\n  encodeParameters  : true,\r\n\r\n  // API action to use\r\n  action            : false,\r\n\r\n  // templated URL to use\r\n  url               : false,\r\n\r\n  // base URL to apply to all endpoints\r\n  base              : '',\r\n\r\n  // data that will\r\n  urlData           : {},\r\n\r\n  // whether to add default data to url data\r\n  defaultData          : true,\r\n\r\n  // whether to serialize closest form\r\n  serializeForm        : false,\r\n\r\n  // how long to wait before request should occur\r\n  throttle             : 0,\r\n\r\n  // whether to throttle first request or only repeated\r\n  throttleFirstRequest : true,\r\n\r\n  // standard ajax settings\r\n  method            : 'get',\r\n  data              : {},\r\n  dataType          : 'json',\r\n\r\n  // mock response\r\n  mockResponse      : false,\r\n  mockResponseAsync : false,\r\n\r\n  // aliases for mock\r\n  response          : false,\r\n  responseAsync     : false,\r\n\r\n  // callbacks before request\r\n  beforeSend  : function(settings) { return settings; },\r\n  beforeXHR   : function(xhr) {},\r\n  onRequest   : function(promise, xhr) {},\r\n\r\n  // after request\r\n  onResponse  : false, // function(response) { },\r\n\r\n  // response was successful, if JSON passed validation\r\n  onSuccess   : function(response, $module) {},\r\n\r\n  // request finished without aborting\r\n  onComplete  : function(response, $module) {},\r\n\r\n  // failed JSON success test\r\n  onFailure   : function(response, $module) {},\r\n\r\n  // server error\r\n  onError     : function(errorMessage, $module) {},\r\n\r\n  // request aborted\r\n  onAbort     : function(errorMessage, $module) {},\r\n\r\n  successTest : false,\r\n\r\n  // errors\r\n  error : {\r\n    beforeSend        : 'The before send function has aborted the request',\r\n    error             : 'There was an error with your request',\r\n    exitConditions    : 'API Request Aborted. Exit conditions met',\r\n    JSONParse         : 'JSON could not be parsed during error handling',\r\n    legacyParameters  : 'You are using legacy API success callback names',\r\n    method            : 'The method you called is not defined',\r\n    missingAction     : 'API action used but no url was defined',\r\n    missingSerialize  : 'jquery-serialize-object is required to add form data to an existing data object',\r\n    missingURL        : 'No URL specified for api event',\r\n    noReturnedValue   : 'The beforeSend callback must return a settings object, beforeSend ignored.',\r\n    noStorage         : 'Caching responses locally requires session storage',\r\n    parseError        : 'There was an error parsing your request',\r\n    requiredParameter : 'Missing a required URL parameter: ',\r\n    statusMessage     : 'Server gave an error: ',\r\n    timeout           : 'Your request timed out'\r\n  },\r\n\r\n  regExp  : {\r\n    required : /\\{\\$*[A-z0-9]+\\}/g,\r\n    optional : /\\{\\/\\$*[A-z0-9]+\\}/g,\r\n  },\r\n\r\n  className: {\r\n    loading : 'loading',\r\n    error   : 'error'\r\n  },\r\n\r\n  selector: {\r\n    disabled : '.disabled',\r\n    form      : 'form'\r\n  },\r\n\r\n  metadata: {\r\n    action  : 'action',\r\n    url     : 'url'\r\n  }\r\n};\r\n\r\n\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - State\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.state = function(parameters) {\r\n  var\r\n    $allModules     = $(this),\r\n\r\n    moduleSelector  = $allModules.selector || '',\r\n\r\n    hasTouch        = ('ontouchstart' in document.documentElement),\r\n    time            = new Date().getTime(),\r\n    performance     = [],\r\n\r\n    query           = arguments[0],\r\n    methodInvoked   = (typeof query == 'string'),\r\n    queryArguments  = [].slice.call(arguments, 1),\r\n\r\n    returnedValue\r\n  ;\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings          = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.state.settings, parameters)\r\n          : $.extend({}, $.fn.state.settings),\r\n\r\n        error           = settings.error,\r\n        metadata        = settings.metadata,\r\n        className       = settings.className,\r\n        namespace       = settings.namespace,\r\n        states          = settings.states,\r\n        text            = settings.text,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = namespace + '-module',\r\n\r\n        $module         = $(this),\r\n\r\n        element         = this,\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        module\r\n      ;\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.verbose('Initializing module');\r\n\r\n          // allow module to guess desired state based on element\r\n          if(settings.automatic) {\r\n            module.add.defaults();\r\n          }\r\n\r\n          // bind events with delegated events\r\n          if(settings.context && moduleSelector !== '') {\r\n            $(settings.context)\r\n              .on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text)\r\n              .on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text)\r\n              .on(moduleSelector, 'click'      + eventNamespace, module.toggle.state)\r\n            ;\r\n          }\r\n          else {\r\n            $module\r\n              .on('mouseenter' + eventNamespace, module.change.text)\r\n              .on('mouseleave' + eventNamespace, module.reset.text)\r\n              .on('click'      + eventNamespace, module.toggle.state)\r\n            ;\r\n          }\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.verbose('Storing instance of module', module);\r\n          instance = module;\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous module', instance);\r\n          $module\r\n            .off(eventNamespace)\r\n            .removeData(moduleNamespace)\r\n          ;\r\n        },\r\n\r\n        refresh: function() {\r\n          module.verbose('Refreshing selector cache');\r\n          $module = $(element);\r\n        },\r\n\r\n        add: {\r\n          defaults: function() {\r\n            var\r\n              userStates = parameters && $.isPlainObject(parameters.states)\r\n                ? parameters.states\r\n                : {}\r\n            ;\r\n            $.each(settings.defaults, function(type, typeStates) {\r\n              if( module.is[type] !== undefined && module.is[type]() ) {\r\n                module.verbose('Adding default states', type, element);\r\n                $.extend(settings.states, typeStates, userStates);\r\n              }\r\n            });\r\n          }\r\n        },\r\n\r\n        is: {\r\n\r\n          active: function() {\r\n            return $module.hasClass(className.active);\r\n          },\r\n          loading: function() {\r\n            return $module.hasClass(className.loading);\r\n          },\r\n          inactive: function() {\r\n            return !( $module.hasClass(className.active) );\r\n          },\r\n          state: function(state) {\r\n            if(className[state] === undefined) {\r\n              return false;\r\n            }\r\n            return $module.hasClass( className[state] );\r\n          },\r\n\r\n          enabled: function() {\r\n            return !( $module.is(settings.filter.active) );\r\n          },\r\n          disabled: function() {\r\n            return ( $module.is(settings.filter.active) );\r\n          },\r\n          textEnabled: function() {\r\n            return !( $module.is(settings.filter.text) );\r\n          },\r\n\r\n          // definitions for automatic type detection\r\n          button: function() {\r\n            return $module.is('.button:not(a, .submit)');\r\n          },\r\n          input: function() {\r\n            return $module.is('input');\r\n          },\r\n          progress: function() {\r\n            return $module.is('.ui.progress');\r\n          }\r\n        },\r\n\r\n        allow: function(state) {\r\n          module.debug('Now allowing state', state);\r\n          states[state] = true;\r\n        },\r\n        disallow: function(state) {\r\n          module.debug('No longer allowing', state);\r\n          states[state] = false;\r\n        },\r\n\r\n        allows: function(state) {\r\n          return states[state] || false;\r\n        },\r\n\r\n        enable: function() {\r\n          $module.removeClass(className.disabled);\r\n        },\r\n\r\n        disable: function() {\r\n          $module.addClass(className.disabled);\r\n        },\r\n\r\n        setState: function(state) {\r\n          if(module.allows(state)) {\r\n            $module.addClass( className[state] );\r\n          }\r\n        },\r\n\r\n        removeState: function(state) {\r\n          if(module.allows(state)) {\r\n            $module.removeClass( className[state] );\r\n          }\r\n        },\r\n\r\n        toggle: {\r\n          state: function() {\r\n            var\r\n              apiRequest,\r\n              requestCancelled\r\n            ;\r\n            if( module.allows('active') && module.is.enabled() ) {\r\n              module.refresh();\r\n              if($.fn.api !== undefined) {\r\n                apiRequest       = $module.api('get request');\r\n                requestCancelled = $module.api('was cancelled');\r\n                if( requestCancelled ) {\r\n                  module.debug('API Request cancelled by beforesend');\r\n                  settings.activateTest   = function(){ return false; };\r\n                  settings.deactivateTest = function(){ return false; };\r\n                }\r\n                else if(apiRequest) {\r\n                  module.listenTo(apiRequest);\r\n                  return;\r\n                }\r\n              }\r\n              module.change.state();\r\n            }\r\n          }\r\n        },\r\n\r\n        listenTo: function(apiRequest) {\r\n          module.debug('API request detected, waiting for state signal', apiRequest);\r\n          if(apiRequest) {\r\n            if(text.loading) {\r\n              module.update.text(text.loading);\r\n            }\r\n            $.when(apiRequest)\r\n              .then(function() {\r\n                if(apiRequest.state() == 'resolved') {\r\n                  module.debug('API request succeeded');\r\n                  settings.activateTest   = function(){ return true; };\r\n                  settings.deactivateTest = function(){ return true; };\r\n                }\r\n                else {\r\n                  module.debug('API request failed');\r\n                  settings.activateTest   = function(){ return false; };\r\n                  settings.deactivateTest = function(){ return false; };\r\n                }\r\n                module.change.state();\r\n              })\r\n            ;\r\n          }\r\n        },\r\n\r\n        // checks whether active/inactive state can be given\r\n        change: {\r\n\r\n          state: function() {\r\n            module.debug('Determining state change direction');\r\n            // inactive to active change\r\n            if( module.is.inactive() ) {\r\n              module.activate();\r\n            }\r\n            else {\r\n              module.deactivate();\r\n            }\r\n            if(settings.sync) {\r\n              module.sync();\r\n            }\r\n            settings.onChange.call(element);\r\n          },\r\n\r\n          text: function() {\r\n            if( module.is.textEnabled() ) {\r\n              if(module.is.disabled() ) {\r\n                module.verbose('Changing text to disabled text', text.hover);\r\n                module.update.text(text.disabled);\r\n              }\r\n              else if( module.is.active() ) {\r\n                if(text.hover) {\r\n                  module.verbose('Changing text to hover text', text.hover);\r\n                  module.update.text(text.hover);\r\n                }\r\n                else if(text.deactivate) {\r\n                  module.verbose('Changing text to deactivating text', text.deactivate);\r\n                  module.update.text(text.deactivate);\r\n                }\r\n              }\r\n              else {\r\n                if(text.hover) {\r\n                  module.verbose('Changing text to hover text', text.hover);\r\n                  module.update.text(text.hover);\r\n                }\r\n                else if(text.activate){\r\n                  module.verbose('Changing text to activating text', text.activate);\r\n                  module.update.text(text.activate);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n        },\r\n\r\n        activate: function() {\r\n          if( settings.activateTest.call(element) ) {\r\n            module.debug('Setting state to active');\r\n            $module\r\n              .addClass(className.active)\r\n            ;\r\n            module.update.text(text.active);\r\n            settings.onActivate.call(element);\r\n          }\r\n        },\r\n\r\n        deactivate: function() {\r\n          if( settings.deactivateTest.call(element) ) {\r\n            module.debug('Setting state to inactive');\r\n            $module\r\n              .removeClass(className.active)\r\n            ;\r\n            module.update.text(text.inactive);\r\n            settings.onDeactivate.call(element);\r\n          }\r\n        },\r\n\r\n        sync: function() {\r\n          module.verbose('Syncing other buttons to current state');\r\n          if( module.is.active() ) {\r\n            $allModules\r\n              .not($module)\r\n                .state('activate');\r\n          }\r\n          else {\r\n            $allModules\r\n              .not($module)\r\n                .state('deactivate')\r\n            ;\r\n          }\r\n        },\r\n\r\n        get: {\r\n          text: function() {\r\n            return (settings.selector.text)\r\n              ? $module.find(settings.selector.text).text()\r\n              : $module.html()\r\n            ;\r\n          },\r\n          textFor: function(state) {\r\n            return text[state] || false;\r\n          }\r\n        },\r\n\r\n        flash: {\r\n          text: function(text, duration, callback) {\r\n            var\r\n              previousText = module.get.text()\r\n            ;\r\n            module.debug('Flashing text message', text, duration);\r\n            text     = text     || settings.text.flash;\r\n            duration = duration || settings.flashDuration;\r\n            callback = callback || function() {};\r\n            module.update.text(text);\r\n            setTimeout(function(){\r\n              module.update.text(previousText);\r\n              callback.call(element);\r\n            }, duration);\r\n          }\r\n        },\r\n\r\n        reset: {\r\n          // on mouseout sets text to previous value\r\n          text: function() {\r\n            var\r\n              activeText   = text.active   || $module.data(metadata.storedText),\r\n              inactiveText = text.inactive || $module.data(metadata.storedText)\r\n            ;\r\n            if( module.is.textEnabled() ) {\r\n              if( module.is.active() && activeText) {\r\n                module.verbose('Resetting active text', activeText);\r\n                module.update.text(activeText);\r\n              }\r\n              else if(inactiveText) {\r\n                module.verbose('Resetting inactive text', activeText);\r\n                module.update.text(inactiveText);\r\n              }\r\n            }\r\n          }\r\n        },\r\n\r\n        update: {\r\n          text: function(text) {\r\n            var\r\n              currentText = module.get.text()\r\n            ;\r\n            if(text && text !== currentText) {\r\n              module.debug('Updating text', text);\r\n              if(settings.selector.text) {\r\n                $module\r\n                  .data(metadata.storedText, text)\r\n                  .find(settings.selector.text)\r\n                    .text(text)\r\n                ;\r\n              }\r\n              else {\r\n                $module\r\n                  .data(metadata.storedText, text)\r\n                  .html(text)\r\n                ;\r\n              }\r\n            }\r\n            else {\r\n              module.debug('Text is already set, ignoring update', text);\r\n            }\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          module.debug('Changing setting', name, value);\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.state.settings = {\r\n\r\n  // module info\r\n  name           : 'State',\r\n\r\n  // debug output\r\n  debug          : false,\r\n\r\n  // verbose debug output\r\n  verbose        : false,\r\n\r\n  // namespace for events\r\n  namespace      : 'state',\r\n\r\n  // debug data includes performance\r\n  performance    : true,\r\n\r\n  // callback occurs on state change\r\n  onActivate     : function() {},\r\n  onDeactivate   : function() {},\r\n  onChange       : function() {},\r\n\r\n  // state test functions\r\n  activateTest   : function() { return true; },\r\n  deactivateTest : function() { return true; },\r\n\r\n  // whether to automatically map default states\r\n  automatic      : true,\r\n\r\n  // activate / deactivate changes all elements instantiated at same time\r\n  sync           : false,\r\n\r\n  // default flash text duration, used for temporarily changing text of an element\r\n  flashDuration  : 1000,\r\n\r\n  // selector filter\r\n  filter     : {\r\n    text   : '.loading, .disabled',\r\n    active : '.disabled'\r\n  },\r\n\r\n  context    : false,\r\n\r\n  // error\r\n  error: {\r\n    beforeSend : 'The before send function has cancelled state change',\r\n    method     : 'The method you called is not defined.'\r\n  },\r\n\r\n  // metadata\r\n  metadata: {\r\n    promise    : 'promise',\r\n    storedText : 'stored-text'\r\n  },\r\n\r\n  // change class on state\r\n  className: {\r\n    active   : 'active',\r\n    disabled : 'disabled',\r\n    error    : 'error',\r\n    loading  : 'loading',\r\n    success  : 'success',\r\n    warning  : 'warning'\r\n  },\r\n\r\n  selector: {\r\n    // selector for text node\r\n    text: false\r\n  },\r\n\r\n  defaults : {\r\n    input: {\r\n      disabled : true,\r\n      loading  : true,\r\n      active   : true\r\n    },\r\n    button: {\r\n      disabled : true,\r\n      loading  : true,\r\n      active   : true,\r\n    },\r\n    progress: {\r\n      active   : true,\r\n      success  : true,\r\n      warning  : true,\r\n      error    : true\r\n    }\r\n  },\r\n\r\n  states     : {\r\n    active   : true,\r\n    disabled : true,\r\n    error    : true,\r\n    loading  : true,\r\n    success  : true,\r\n    warning  : true\r\n  },\r\n\r\n  text     : {\r\n    disabled   : false,\r\n    flash      : false,\r\n    hover      : false,\r\n    active     : false,\r\n    inactive   : false,\r\n    activate   : false,\r\n    deactivate : false\r\n  }\r\n\r\n};\r\n\r\n\r\n\r\n})( jQuery, window, document );\r\n\r\n/*!\r\n * # Semantic UI 2.1.7 - Visibility\r\n * http://github.com/semantic-org/semantic-ui/\r\n *\r\n *\r\n * Copyright 2015 Contributors\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/MIT\r\n *\r\n */\r\n\r\n;(function ( $, window, document, undefined ) {\r\n\r\n\"use strict\";\r\n\r\n$.fn.visibility = function(parameters) {\r\n  var\r\n    $allModules    = $(this),\r\n    moduleSelector = $allModules.selector || '',\r\n\r\n    time           = new Date().getTime(),\r\n    performance    = [],\r\n\r\n    query          = arguments[0],\r\n    methodInvoked  = (typeof query == 'string'),\r\n    queryArguments = [].slice.call(arguments, 1),\r\n    returnedValue\r\n  ;\r\n\r\n  $allModules\r\n    .each(function() {\r\n      var\r\n        settings        = ( $.isPlainObject(parameters) )\r\n          ? $.extend(true, {}, $.fn.visibility.settings, parameters)\r\n          : $.extend({}, $.fn.visibility.settings),\r\n\r\n        className       = settings.className,\r\n        namespace       = settings.namespace,\r\n        error           = settings.error,\r\n        metadata        = settings.metadata,\r\n\r\n        eventNamespace  = '.' + namespace,\r\n        moduleNamespace = 'module-' + namespace,\r\n\r\n        $window         = $(window),\r\n\r\n        $module         = $(this),\r\n        $context        = $(settings.context),\r\n\r\n        $placeholder,\r\n\r\n        selector        = $module.selector || '',\r\n        instance        = $module.data(moduleNamespace),\r\n\r\n        requestAnimationFrame = window.requestAnimationFrame\r\n          || window.mozRequestAnimationFrame\r\n          || window.webkitRequestAnimationFrame\r\n          || window.msRequestAnimationFrame\r\n          || function(callback) { setTimeout(callback, 0); },\r\n\r\n        element         = this,\r\n        disabled        = false,\r\n\r\n        observer,\r\n        module\r\n      ;\r\n\r\n      module = {\r\n\r\n        initialize: function() {\r\n          module.debug('Initializing', settings);\r\n\r\n          module.setup.cache();\r\n\r\n          if( module.should.trackChanges() ) {\r\n\r\n            if(settings.type == 'image') {\r\n              module.setup.image();\r\n            }\r\n            if(settings.type == 'fixed') {\r\n              module.setup.fixed();\r\n            }\r\n\r\n            if(settings.observeChanges) {\r\n              module.observeChanges();\r\n            }\r\n            module.bind.events();\r\n          }\r\n\r\n          module.save.position();\r\n          if( !module.is.visible() ) {\r\n            module.error(error.visible, $module);\r\n          }\r\n\r\n          if(settings.initialCheck) {\r\n            module.checkVisibility();\r\n          }\r\n          module.instantiate();\r\n        },\r\n\r\n        instantiate: function() {\r\n          module.debug('Storing instance', module);\r\n          $module\r\n            .data(moduleNamespace, module)\r\n          ;\r\n          instance = module;\r\n        },\r\n\r\n        destroy: function() {\r\n          module.verbose('Destroying previous module');\r\n          if(observer) {\r\n            observer.disconnect();\r\n          }\r\n          $window\r\n            .off('load'   + eventNamespace, module.event.load)\r\n            .off('resize' + eventNamespace, module.event.resize)\r\n          ;\r\n          $context\r\n            .off('scrollchange' + eventNamespace, module.event.scrollchange)\r\n          ;\r\n          $module\r\n            .off(eventNamespace)\r\n            .removeData(moduleNamespace)\r\n          ;\r\n        },\r\n\r\n        observeChanges: function() {\r\n          if('MutationObserver' in window) {\r\n            observer = new MutationObserver(function(mutations) {\r\n              module.verbose('DOM tree modified, updating visibility calculations');\r\n              module.timer = setTimeout(function() {\r\n                module.verbose('DOM tree modified, updating sticky menu');\r\n                module.refresh();\r\n              }, 100);\r\n            });\r\n            observer.observe(element, {\r\n              childList : true,\r\n              subtree   : true\r\n            });\r\n            module.debug('Setting up mutation observer', observer);\r\n          }\r\n        },\r\n\r\n        bind: {\r\n          events: function() {\r\n            module.verbose('Binding visibility events to scroll and resize');\r\n            if(settings.refreshOnLoad) {\r\n              $window\r\n                .on('load'   + eventNamespace, module.event.load)\r\n              ;\r\n            }\r\n            $window\r\n              .on('resize' + eventNamespace, module.event.resize)\r\n            ;\r\n            // pub/sub pattern\r\n            $context\r\n              .off('scroll'      + eventNamespace)\r\n              .on('scroll'       + eventNamespace, module.event.scroll)\r\n              .on('scrollchange' + eventNamespace, module.event.scrollchange)\r\n            ;\r\n          }\r\n        },\r\n\r\n        event: {\r\n          resize: function() {\r\n            module.debug('Window resized');\r\n            if(settings.refreshOnResize) {\r\n              requestAnimationFrame(module.refresh);\r\n            }\r\n          },\r\n          load: function() {\r\n            module.debug('Page finished loading');\r\n            requestAnimationFrame(module.refresh);\r\n          },\r\n          // publishes scrollchange event on one scroll\r\n          scroll: function() {\r\n            if(settings.throttle) {\r\n              clearTimeout(module.timer);\r\n              module.timer = setTimeout(function() {\r\n                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);\r\n              }, settings.throttle);\r\n            }\r\n            else {\r\n              requestAnimationFrame(function() {\r\n                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);\r\n              });\r\n            }\r\n          },\r\n          // subscribes to scrollchange\r\n          scrollchange: function(event, scrollPosition) {\r\n            module.checkVisibility(scrollPosition);\r\n          },\r\n        },\r\n\r\n        precache: function(images, callback) {\r\n          if (!(images instanceof Array)) {\r\n            images = [images];\r\n          }\r\n          var\r\n            imagesLength  = images.length,\r\n            loadedCounter = 0,\r\n            cache         = [],\r\n            cacheImage    = document.createElement('img'),\r\n            handleLoad    = function() {\r\n              loadedCounter++;\r\n              if (loadedCounter >= images.length) {\r\n                if ($.isFunction(callback)) {\r\n                  callback();\r\n                }\r\n              }\r\n            }\r\n          ;\r\n          while (imagesLength--) {\r\n            cacheImage         = document.createElement('img');\r\n            cacheImage.onload  = handleLoad;\r\n            cacheImage.onerror = handleLoad;\r\n            cacheImage.src     = images[imagesLength];\r\n            cache.push(cacheImage);\r\n          }\r\n        },\r\n\r\n        enableCallbacks: function() {\r\n          module.debug('Allowing callbacks to occur');\r\n          disabled = false;\r\n        },\r\n\r\n        disableCallbacks: function() {\r\n          module.debug('Disabling all callbacks temporarily');\r\n          disabled = true;\r\n        },\r\n\r\n        should: {\r\n          trackChanges: function() {\r\n            if(methodInvoked) {\r\n              module.debug('One time query, no need to bind events');\r\n              return false;\r\n            }\r\n            module.debug('Callbacks being attached');\r\n            return true;\r\n          }\r\n        },\r\n\r\n        setup: {\r\n          cache: function() {\r\n            module.cache = {\r\n              occurred : {},\r\n              screen   : {},\r\n              element  : {},\r\n            };\r\n          },\r\n          image: function() {\r\n            var\r\n              src = $module.data(metadata.src)\r\n            ;\r\n            if(src) {\r\n              module.verbose('Lazy loading image', src);\r\n              settings.once           = true;\r\n              settings.observeChanges = false;\r\n\r\n              // show when top visible\r\n              settings.onOnScreen = function() {\r\n                module.debug('Image on screen', element);\r\n                module.precache(src, function() {\r\n                  module.set.image(src);\r\n                });\r\n              };\r\n            }\r\n          },\r\n          fixed: function() {\r\n            module.debug('Setting up fixed');\r\n            settings.once           = false;\r\n            settings.observeChanges = false;\r\n            settings.initialCheck   = true;\r\n            settings.refreshOnLoad  = true;\r\n            if(!parameters.transition) {\r\n              settings.transition = false;\r\n            }\r\n            module.create.placeholder();\r\n            module.debug('Added placeholder', $placeholder);\r\n            settings.onTopPassed = function() {\r\n              module.debug('Element passed, adding fixed position', $module);\r\n              module.show.placeholder();\r\n              module.set.fixed();\r\n              if(settings.transition) {\r\n                if($.fn.transition !== undefined) {\r\n                  $module.transition(settings.transition, settings.duration);\r\n                }\r\n              }\r\n            };\r\n            settings.onTopPassedReverse = function() {\r\n              module.debug('Element returned to position, removing fixed', $module);\r\n              module.hide.placeholder();\r\n              module.remove.fixed();\r\n            };\r\n          }\r\n        },\r\n\r\n        create: {\r\n          placeholder: function() {\r\n            module.verbose('Creating fixed position placeholder');\r\n            $placeholder = $module\r\n              .clone(false)\r\n              .css('display', 'none')\r\n              .addClass(className.placeholder)\r\n              .insertAfter($module)\r\n            ;\r\n          }\r\n        },\r\n\r\n        show: {\r\n          placeholder: function() {\r\n            module.verbose('Showing placeholder');\r\n            $placeholder\r\n              .css('display', 'block')\r\n              .css('visibility', 'hidden')\r\n            ;\r\n          }\r\n        },\r\n        hide: {\r\n          placeholder: function() {\r\n            module.verbose('Hiding placeholder');\r\n            $placeholder\r\n              .css('display', 'none')\r\n              .css('visibility', '')\r\n            ;\r\n          }\r\n        },\r\n\r\n        set: {\r\n          fixed: function() {\r\n            module.verbose('Setting element to fixed position');\r\n            $module\r\n              .addClass(className.fixed)\r\n              .css({\r\n                position : 'fixed',\r\n                top      : settings.offset + 'px',\r\n                left     : 'auto',\r\n                zIndex   : '1'\r\n              })\r\n            ;\r\n          },\r\n          image: function(src) {\r\n            $module\r\n              .attr('src', src)\r\n            ;\r\n            if(settings.transition) {\r\n              if( $.fn.transition !== undefined ) {\r\n                $module.transition(settings.transition, settings.duration);\r\n              }\r\n              else {\r\n                $module.fadeIn(settings.duration);\r\n              }\r\n            }\r\n            else {\r\n              $module.show();\r\n            }\r\n          }\r\n        },\r\n\r\n        is: {\r\n          onScreen: function() {\r\n            var\r\n              calculations   = module.get.elementCalculations()\r\n            ;\r\n            return calculations.onScreen;\r\n          },\r\n          offScreen: function() {\r\n            var\r\n              calculations   = module.get.elementCalculations()\r\n            ;\r\n            return calculations.offScreen;\r\n          },\r\n          visible: function() {\r\n            if(module.cache && module.cache.element) {\r\n              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);\r\n            }\r\n            return false;\r\n          }\r\n        },\r\n\r\n        refresh: function() {\r\n          module.debug('Refreshing constants (width/height)');\r\n          if(settings.type == 'fixed') {\r\n            module.remove.fixed();\r\n            module.remove.occurred();\r\n          }\r\n          module.reset();\r\n          module.save.position();\r\n          if(settings.checkOnRefresh) {\r\n            module.checkVisibility();\r\n          }\r\n          settings.onRefresh.call(element);\r\n        },\r\n\r\n        reset: function() {\r\n          module.verbose('Reseting all cached values');\r\n          if( $.isPlainObject(module.cache) ) {\r\n            module.cache.screen = {};\r\n            module.cache.element = {};\r\n          }\r\n        },\r\n\r\n        checkVisibility: function(scroll) {\r\n          module.verbose('Checking visibility of element', module.cache.element);\r\n\r\n          if( !disabled && module.is.visible() ) {\r\n\r\n            // save scroll position\r\n            module.save.scroll(scroll);\r\n\r\n            // update calculations derived from scroll\r\n            module.save.calculations();\r\n\r\n            // percentage\r\n            module.passed();\r\n\r\n            // reverse (must be first)\r\n            module.passingReverse();\r\n            module.topVisibleReverse();\r\n            module.bottomVisibleReverse();\r\n            module.topPassedReverse();\r\n            module.bottomPassedReverse();\r\n\r\n            // one time\r\n            module.onScreen();\r\n            module.offScreen();\r\n            module.passing();\r\n            module.topVisible();\r\n            module.bottomVisible();\r\n            module.topPassed();\r\n            module.bottomPassed();\r\n\r\n            // on update callback\r\n            if(settings.onUpdate) {\r\n              settings.onUpdate.call(element, module.get.elementCalculations());\r\n            }\r\n          }\r\n        },\r\n\r\n        passed: function(amount, newCallback) {\r\n          var\r\n            calculations   = module.get.elementCalculations(),\r\n            amountInPixels\r\n          ;\r\n          // assign callback\r\n          if(amount && newCallback) {\r\n            settings.onPassed[amount] = newCallback;\r\n          }\r\n          else if(amount !== undefined) {\r\n            return (module.get.pixelsPassed(amount) > calculations.pixelsPassed);\r\n          }\r\n          else if(calculations.passing) {\r\n            $.each(settings.onPassed, function(amount, callback) {\r\n              if(calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {\r\n                module.execute(callback, amount);\r\n              }\r\n              else if(!settings.once) {\r\n                module.remove.occurred(callback);\r\n              }\r\n            });\r\n          }\r\n        },\r\n\r\n        onScreen: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onOnScreen,\r\n            callbackName = 'onScreen'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for onScreen', newCallback);\r\n            settings.onOnScreen = newCallback;\r\n          }\r\n          if(calculations.onScreen) {\r\n            module.execute(callback, callbackName);\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback !== undefined) {\r\n            return calculations.onOnScreen;\r\n          }\r\n        },\r\n\r\n        offScreen: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onOffScreen,\r\n            callbackName = 'offScreen'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for offScreen', newCallback);\r\n            settings.onOffScreen = newCallback;\r\n          }\r\n          if(calculations.offScreen) {\r\n            module.execute(callback, callbackName);\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback !== undefined) {\r\n            return calculations.onOffScreen;\r\n          }\r\n        },\r\n\r\n        passing: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onPassing,\r\n            callbackName = 'passing'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for passing', newCallback);\r\n            settings.onPassing = newCallback;\r\n          }\r\n          if(calculations.passing) {\r\n            module.execute(callback, callbackName);\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback !== undefined) {\r\n            return calculations.passing;\r\n          }\r\n        },\r\n\r\n\r\n        topVisible: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onTopVisible,\r\n            callbackName = 'topVisible'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for top visible', newCallback);\r\n            settings.onTopVisible = newCallback;\r\n          }\r\n          if(calculations.topVisible) {\r\n            module.execute(callback, callbackName);\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback === undefined) {\r\n            return calculations.topVisible;\r\n          }\r\n        },\r\n\r\n        bottomVisible: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onBottomVisible,\r\n            callbackName = 'bottomVisible'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for bottom visible', newCallback);\r\n            settings.onBottomVisible = newCallback;\r\n          }\r\n          if(calculations.bottomVisible) {\r\n            module.execute(callback, callbackName);\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback === undefined) {\r\n            return calculations.bottomVisible;\r\n          }\r\n        },\r\n\r\n        topPassed: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onTopPassed,\r\n            callbackName = 'topPassed'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for top passed', newCallback);\r\n            settings.onTopPassed = newCallback;\r\n          }\r\n          if(calculations.topPassed) {\r\n            module.execute(callback, callbackName);\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback === undefined) {\r\n            return calculations.topPassed;\r\n          }\r\n        },\r\n\r\n        bottomPassed: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onBottomPassed,\r\n            callbackName = 'bottomPassed'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for bottom passed', newCallback);\r\n            settings.onBottomPassed = newCallback;\r\n          }\r\n          if(calculations.bottomPassed) {\r\n            module.execute(callback, callbackName);\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback === undefined) {\r\n            return calculations.bottomPassed;\r\n          }\r\n        },\r\n\r\n        passingReverse: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onPassingReverse,\r\n            callbackName = 'passingReverse'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for passing reverse', newCallback);\r\n            settings.onPassingReverse = newCallback;\r\n          }\r\n          if(!calculations.passing) {\r\n            if(module.get.occurred('passing')) {\r\n              module.execute(callback, callbackName);\r\n            }\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback !== undefined) {\r\n            return !calculations.passing;\r\n          }\r\n        },\r\n\r\n\r\n        topVisibleReverse: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onTopVisibleReverse,\r\n            callbackName = 'topVisibleReverse'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for top visible reverse', newCallback);\r\n            settings.onTopVisibleReverse = newCallback;\r\n          }\r\n          if(!calculations.topVisible) {\r\n            if(module.get.occurred('topVisible')) {\r\n              module.execute(callback, callbackName);\r\n            }\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback === undefined) {\r\n            return !calculations.topVisible;\r\n          }\r\n        },\r\n\r\n        bottomVisibleReverse: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onBottomVisibleReverse,\r\n            callbackName = 'bottomVisibleReverse'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for bottom visible reverse', newCallback);\r\n            settings.onBottomVisibleReverse = newCallback;\r\n          }\r\n          if(!calculations.bottomVisible) {\r\n            if(module.get.occurred('bottomVisible')) {\r\n              module.execute(callback, callbackName);\r\n            }\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback === undefined) {\r\n            return !calculations.bottomVisible;\r\n          }\r\n        },\r\n\r\n        topPassedReverse: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onTopPassedReverse,\r\n            callbackName = 'topPassedReverse'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for top passed reverse', newCallback);\r\n            settings.onTopPassedReverse = newCallback;\r\n          }\r\n          if(!calculations.topPassed) {\r\n            if(module.get.occurred('topPassed')) {\r\n              module.execute(callback, callbackName);\r\n            }\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback === undefined) {\r\n            return !calculations.onTopPassed;\r\n          }\r\n        },\r\n\r\n        bottomPassedReverse: function(newCallback) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            callback     = newCallback || settings.onBottomPassedReverse,\r\n            callbackName = 'bottomPassedReverse'\r\n          ;\r\n          if(newCallback) {\r\n            module.debug('Adding callback for bottom passed reverse', newCallback);\r\n            settings.onBottomPassedReverse = newCallback;\r\n          }\r\n          if(!calculations.bottomPassed) {\r\n            if(module.get.occurred('bottomPassed')) {\r\n              module.execute(callback, callbackName);\r\n            }\r\n          }\r\n          else if(!settings.once) {\r\n            module.remove.occurred(callbackName);\r\n          }\r\n          if(newCallback === undefined) {\r\n            return !calculations.bottomPassed;\r\n          }\r\n        },\r\n\r\n        execute: function(callback, callbackName) {\r\n          var\r\n            calculations = module.get.elementCalculations(),\r\n            screen       = module.get.screenCalculations()\r\n          ;\r\n          callback = callback || false;\r\n          if(callback) {\r\n            if(settings.continuous) {\r\n              module.debug('Callback being called continuously', callbackName, calculations);\r\n              callback.call(element, calculations, screen);\r\n            }\r\n            else if(!module.get.occurred(callbackName)) {\r\n              module.debug('Conditions met', callbackName, calculations);\r\n              callback.call(element, calculations, screen);\r\n            }\r\n          }\r\n          module.save.occurred(callbackName);\r\n        },\r\n\r\n        remove: {\r\n          fixed: function() {\r\n            module.debug('Removing fixed position');\r\n            $module\r\n              .removeClass(className.fixed)\r\n              .css({\r\n                position : '',\r\n                top      : '',\r\n                left     : '',\r\n                zIndex   : ''\r\n              })\r\n            ;\r\n          },\r\n          occurred: function(callback) {\r\n            if(callback) {\r\n              var\r\n                occurred = module.cache.occurred\r\n              ;\r\n              if(occurred[callback] !== undefined && occurred[callback] === true) {\r\n                module.debug('Callback can now be called again', callback);\r\n                module.cache.occurred[callback] = false;\r\n              }\r\n            }\r\n            else {\r\n              module.cache.occurred = {};\r\n            }\r\n          }\r\n        },\r\n\r\n        save: {\r\n          calculations: function() {\r\n            module.verbose('Saving all calculations necessary to determine positioning');\r\n            module.save.direction();\r\n            module.save.screenCalculations();\r\n            module.save.elementCalculations();\r\n          },\r\n          occurred: function(callback) {\r\n            if(callback) {\r\n              if(module.cache.occurred[callback] === undefined || (module.cache.occurred[callback] !== true)) {\r\n                module.verbose('Saving callback occurred', callback);\r\n                module.cache.occurred[callback] = true;\r\n              }\r\n            }\r\n          },\r\n          scroll: function(scrollPosition) {\r\n            scrollPosition      = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;\r\n            module.cache.scroll = scrollPosition;\r\n          },\r\n          direction: function() {\r\n            var\r\n              scroll     = module.get.scroll(),\r\n              lastScroll = module.get.lastScroll(),\r\n              direction\r\n            ;\r\n            if(scroll > lastScroll && lastScroll) {\r\n              direction = 'down';\r\n            }\r\n            else if(scroll < lastScroll && lastScroll) {\r\n              direction = 'up';\r\n            }\r\n            else {\r\n              direction = 'static';\r\n            }\r\n            module.cache.direction = direction;\r\n            return module.cache.direction;\r\n          },\r\n          elementPosition: function() {\r\n            var\r\n              element = module.cache.element,\r\n              screen  = module.get.screenSize()\r\n            ;\r\n            module.verbose('Saving element position');\r\n            // (quicker than $.extend)\r\n            element.fits          = (element.height < screen.height);\r\n            element.offset        = $module.offset();\r\n            element.width         = $module.outerWidth();\r\n            element.height        = $module.outerHeight();\r\n            // store\r\n            module.cache.element = element;\r\n            return element;\r\n          },\r\n          elementCalculations: function() {\r\n            var\r\n              screen     = module.get.screenCalculations(),\r\n              element    = module.get.elementPosition()\r\n            ;\r\n            // offset\r\n            if(settings.includeMargin) {\r\n              element.margin        = {};\r\n              element.margin.top    = parseInt($module.css('margin-top'), 10);\r\n              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);\r\n              element.top    = element.offset.top - element.margin.top;\r\n              element.bottom = element.offset.top + element.height + element.margin.bottom;\r\n            }\r\n            else {\r\n              element.top    = element.offset.top;\r\n              element.bottom = element.offset.top + element.height;\r\n            }\r\n\r\n            // visibility\r\n            element.topVisible       = (screen.bottom >= element.top);\r\n            element.topPassed        = (screen.top >= element.top);\r\n            element.bottomVisible    = (screen.bottom >= element.bottom);\r\n            element.bottomPassed     = (screen.top >= element.bottom);\r\n            element.pixelsPassed     = 0;\r\n            element.percentagePassed = 0;\r\n\r\n            // meta calculations\r\n            element.onScreen  = (element.topVisible && !element.bottomPassed);\r\n            element.passing   = (element.topPassed && !element.bottomPassed);\r\n            element.offScreen = (!element.onScreen);\r\n\r\n            // passing calculations\r\n            if(element.passing) {\r\n              element.pixelsPassed     = (screen.top - element.top);\r\n              element.percentagePassed = (screen.top - element.top) / element.height;\r\n            }\r\n            module.cache.element = element;\r\n            module.verbose('Updated element calculations', element);\r\n            return element;\r\n          },\r\n          screenCalculations: function() {\r\n            var\r\n              scroll = module.get.scroll()\r\n            ;\r\n            module.save.direction();\r\n            module.cache.screen.top    = scroll;\r\n            module.cache.screen.bottom = scroll + module.cache.screen.height;\r\n            return module.cache.screen;\r\n          },\r\n          screenSize: function() {\r\n            module.verbose('Saving window position');\r\n            module.cache.screen = {\r\n              height: $context.height()\r\n            };\r\n          },\r\n          position: function() {\r\n            module.save.screenSize();\r\n            module.save.elementPosition();\r\n          }\r\n        },\r\n\r\n        get: {\r\n          pixelsPassed: function(amount) {\r\n            var\r\n              element = module.get.elementCalculations()\r\n            ;\r\n            if(amount.search('%') > -1) {\r\n              return ( element.height * (parseInt(amount, 10) / 100) );\r\n            }\r\n            return parseInt(amount, 10);\r\n          },\r\n          occurred: function(callback) {\r\n            return (module.cache.occurred !== undefined)\r\n              ? module.cache.occurred[callback] || false\r\n              : false\r\n            ;\r\n          },\r\n          direction: function() {\r\n            if(module.cache.direction === undefined) {\r\n              module.save.direction();\r\n            }\r\n            return module.cache.direction;\r\n          },\r\n          elementPosition: function() {\r\n            if(module.cache.element === undefined) {\r\n              module.save.elementPosition();\r\n            }\r\n            return module.cache.element;\r\n          },\r\n          elementCalculations: function() {\r\n            if(module.cache.element === undefined) {\r\n              module.save.elementCalculations();\r\n            }\r\n            return module.cache.element;\r\n          },\r\n          screenCalculations: function() {\r\n            if(module.cache.screen === undefined) {\r\n              module.save.screenCalculations();\r\n            }\r\n            return module.cache.screen;\r\n          },\r\n          screenSize: function() {\r\n            if(module.cache.screen === undefined) {\r\n              module.save.screenSize();\r\n            }\r\n            return module.cache.screen;\r\n          },\r\n          scroll: function() {\r\n            if(module.cache.scroll === undefined) {\r\n              module.save.scroll();\r\n            }\r\n            return module.cache.scroll;\r\n          },\r\n          lastScroll: function() {\r\n            if(module.cache.screen === undefined) {\r\n              module.debug('First scroll event, no last scroll could be found');\r\n              return false;\r\n            }\r\n            return module.cache.screen.top;\r\n          }\r\n        },\r\n\r\n        setting: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, settings, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            settings[name] = value;\r\n          }\r\n          else {\r\n            return settings[name];\r\n          }\r\n        },\r\n        internal: function(name, value) {\r\n          if( $.isPlainObject(name) ) {\r\n            $.extend(true, module, name);\r\n          }\r\n          else if(value !== undefined) {\r\n            module[name] = value;\r\n          }\r\n          else {\r\n            return module[name];\r\n          }\r\n        },\r\n        debug: function() {\r\n          if(settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.debug.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        verbose: function() {\r\n          if(settings.verbose && settings.debug) {\r\n            if(settings.performance) {\r\n              module.performance.log(arguments);\r\n            }\r\n            else {\r\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\r\n              module.verbose.apply(console, arguments);\r\n            }\r\n          }\r\n        },\r\n        error: function() {\r\n          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\r\n          module.error.apply(console, arguments);\r\n        },\r\n        performance: {\r\n          log: function(message) {\r\n            var\r\n              currentTime,\r\n              executionTime,\r\n              previousTime\r\n            ;\r\n            if(settings.performance) {\r\n              currentTime   = new Date().getTime();\r\n              previousTime  = time || currentTime;\r\n              executionTime = currentTime - previousTime;\r\n              time          = currentTime;\r\n              performance.push({\r\n                'Name'           : message[0],\r\n                'Arguments'      : [].slice.call(message, 1) || '',\r\n                'Element'        : element,\r\n                'Execution Time' : executionTime\r\n              });\r\n            }\r\n            clearTimeout(module.performance.timer);\r\n            module.performance.timer = setTimeout(module.performance.display, 500);\r\n          },\r\n          display: function() {\r\n            var\r\n              title = settings.name + ':',\r\n              totalTime = 0\r\n            ;\r\n            time = false;\r\n            clearTimeout(module.performance.timer);\r\n            $.each(performance, function(index, data) {\r\n              totalTime += data['Execution Time'];\r\n            });\r\n            title += ' ' + totalTime + 'ms';\r\n            if(moduleSelector) {\r\n              title += ' \\'' + moduleSelector + '\\'';\r\n            }\r\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\r\n              console.groupCollapsed(title);\r\n              if(console.table) {\r\n                console.table(performance);\r\n              }\r\n              else {\r\n                $.each(performance, function(index, data) {\r\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\r\n                });\r\n              }\r\n              console.groupEnd();\r\n            }\r\n            performance = [];\r\n          }\r\n        },\r\n        invoke: function(query, passedArguments, context) {\r\n          var\r\n            object = instance,\r\n            maxDepth,\r\n            found,\r\n            response\r\n          ;\r\n          passedArguments = passedArguments || queryArguments;\r\n          context         = element         || context;\r\n          if(typeof query == 'string' && object !== undefined) {\r\n            query    = query.split(/[\\. ]/);\r\n            maxDepth = query.length - 1;\r\n            $.each(query, function(depth, value) {\r\n              var camelCaseValue = (depth != maxDepth)\r\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\r\n                : query\r\n              ;\r\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\r\n                object = object[camelCaseValue];\r\n              }\r\n              else if( object[camelCaseValue] !== undefined ) {\r\n                found = object[camelCaseValue];\r\n                return false;\r\n              }\r\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\r\n                object = object[value];\r\n              }\r\n              else if( object[value] !== undefined ) {\r\n                found = object[value];\r\n                return false;\r\n              }\r\n              else {\r\n                module.error(error.method, query);\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n          if ( $.isFunction( found ) ) {\r\n            response = found.apply(context, passedArguments);\r\n          }\r\n          else if(found !== undefined) {\r\n            response = found;\r\n          }\r\n          if($.isArray(returnedValue)) {\r\n            returnedValue.push(response);\r\n          }\r\n          else if(returnedValue !== undefined) {\r\n            returnedValue = [returnedValue, response];\r\n          }\r\n          else if(response !== undefined) {\r\n            returnedValue = response;\r\n          }\r\n          return found;\r\n        }\r\n      };\r\n\r\n      if(methodInvoked) {\r\n        if(instance === undefined) {\r\n          module.initialize();\r\n        }\r\n        instance.save.scroll();\r\n        instance.save.calculations();\r\n        module.invoke(query);\r\n      }\r\n      else {\r\n        if(instance !== undefined) {\r\n          instance.invoke('destroy');\r\n        }\r\n        module.initialize();\r\n      }\r\n    })\r\n  ;\r\n\r\n  return (returnedValue !== undefined)\r\n    ? returnedValue\r\n    : this\r\n  ;\r\n};\r\n\r\n$.fn.visibility.settings = {\r\n\r\n  name                   : 'Visibility',\r\n  namespace              : 'visibility',\r\n\r\n  debug                  : false,\r\n  verbose                : false,\r\n  performance            : true,\r\n\r\n  // whether to use mutation observers to follow changes\r\n  observeChanges         : true,\r\n\r\n  // check position immediately on init\r\n  initialCheck           : true,\r\n\r\n  // whether to refresh calculations after all page images load\r\n  refreshOnLoad          : true,\r\n\r\n  // whether to refresh calculations after page resize event\r\n  refreshOnResize        : true,\r\n\r\n  // should call callbacks on refresh event (resize, etc)\r\n  checkOnRefresh         : true,\r\n\r\n  // callback should only occur one time\r\n  once                   : true,\r\n\r\n  // callback should fire continuously whe evaluates to true\r\n  continuous             : false,\r\n\r\n  // offset to use with scroll top\r\n  offset                 : 0,\r\n\r\n  // whether to include margin in elements position\r\n  includeMargin          : false,\r\n\r\n  // scroll context for visibility checks\r\n  context                : window,\r\n\r\n  // visibility check delay in ms (defaults to animationFrame)\r\n  throttle               : false,\r\n\r\n  // special visibility type (image, fixed)\r\n  type                   : false,\r\n\r\n  // image only animation settings\r\n  transition             : 'fade in',\r\n  duration               : 1000,\r\n\r\n  // array of callbacks for percentage\r\n  onPassed               : {},\r\n\r\n  // standard callbacks\r\n  onOnScreen             : false,\r\n  onOffScreen            : false,\r\n  onPassing              : false,\r\n  onTopVisible           : false,\r\n  onBottomVisible        : false,\r\n  onTopPassed            : false,\r\n  onBottomPassed         : false,\r\n\r\n  // reverse callbacks\r\n  onPassingReverse       : false,\r\n  onTopVisibleReverse    : false,\r\n  onBottomVisibleReverse : false,\r\n  onTopPassedReverse     : false,\r\n  onBottomPassedReverse  : false,\r\n\r\n  // utility callbacks\r\n  onUpdate               : false, // disabled by default for performance\r\n  onRefresh              : function(){},\r\n\r\n  metadata : {\r\n    src: 'src'\r\n  },\r\n\r\n  className: {\r\n    fixed       : 'fixed',\r\n    placeholder : 'placeholder'\r\n  },\r\n\r\n  error : {\r\n    method  : 'The method you called is not defined.',\r\n    visible : 'Element is hidden, you must call refresh after element becomes visible'\r\n  }\r\n\r\n};\r\n\r\n})( jQuery, window, document );","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/client/stores/httpStatusCodes.js":"export default [\r\n\t{\r\n\t\tlabel: 'Continue',\r\n\t\tvalue: '100'\r\n\t}, {\r\n\t\tlabel: 'Switching Protocol',\r\n\t\tvalue: '101'\r\n\t}, {\r\n\t\tlabel: 'OK',\r\n\t\tvalue: '200'\r\n\t}, {\r\n\t\tlabel: 'Created',\r\n\t\tvalue: '201'\r\n\t}, {\r\n\t\tlabel: 'Accepted',\r\n\t\tvalue: '202'\r\n\t}, {\r\n\t\tlabel: 'Non-Authoritative Information',\r\n\t\tvalue: '203'\r\n\t}, {\r\n\t\tlabel: 'No Content',\r\n\t\tvalue: '204'\r\n\t}, {\r\n\t\tlabel: 'Reset Content',\r\n\t\tvalue: '205'\r\n\t}, {\r\n\t\tlabel: 'Partial Content',\r\n\t\tvalue: '206'\r\n\t}, {\r\n\t\tlabel: 'Multiple Choice',\r\n\t\tvalue: '300'\r\n\t}, {\r\n\t\tlabel: 'Moved Permanently',\r\n\t\tvalue: '301'\r\n\t}, {\r\n\t\tlabel: 'Found',\r\n\t\tvalue: '302'\r\n\t}, {\r\n\t\tlabel: 'See Other',\r\n\t\tvalue: '303'\r\n\t}, {\r\n\t\tlabel: 'Not Modified',\r\n\t\tvalue: '304'\r\n\t}, {\r\n\t\tlabel: 'Use Proxy',\r\n\t\tvalue: '305'\r\n\t}, {\r\n\t\tlabel: 'Temporary Redirect',\r\n\t\tvalue: '307'\r\n\t}, {\r\n\t\tlabel: 'Permanent Redirect',\r\n\t\tvalue: '308'\r\n\t}, {\r\n\t\tlabel: 'Bad Request',\r\n\t\tvalue: '400'\r\n\t}, {\r\n\t\tlabel: 'Unauthorized',\r\n\t\tvalue: '401'\r\n\t}, {\r\n\t\tlabel: 'Payment Required',\r\n\t\tvalue: '402'\r\n\t}, {\r\n\t\tlabel: 'Forbidden',\r\n\t\tvalue: '403'\r\n\t}, {\r\n\t\tlabel: 'Not Found',\r\n\t\tvalue: '404'\r\n\t}, {\r\n\t\tlabel: 'Method Not Allowed',\r\n\t\tvalue: '405'\r\n\t}, {\r\n\t\tlabel: 'Not Acceptable',\r\n\t\tvalue: '406'\r\n\t}, {\r\n\t\tlabel: 'Proxy Authentication Required',\r\n\t\tvalue: '407'\r\n\t}, {\r\n\t\tlabel: 'Request Timeout',\r\n\t\tvalue: '408'\r\n\t}, {\r\n\t\tlabel: 'Conflict',\r\n\t\tvalue: '409'\r\n\t}, {\r\n\t\tlabel: 'Gone',\r\n\t\tvalue: '410'\r\n\t}, {\r\n\t\tlabel: 'Lenght Required',\r\n\t\tvalue: '411'\r\n\t}, {\r\n\t\tlabel: 'Precondition Failed',\r\n\t\tvalue: '412'\r\n\t}, {\r\n\t\tlabel: 'Payload Too Large',\r\n\t\tvalue: '413'\r\n\t}, {\r\n\t\tlabel: 'URI Too Long',\r\n\t\tvalue: '414'\r\n\t}, {\r\n\t\tlabel: 'Unsupported Media Type',\r\n\t\tvalue: '415'\r\n\t}, {\r\n\t\tlabel: 'Requested Range Not Satisfiable',\r\n\t\tvalue: '416'\r\n\t}, {\r\n\t\tlabel: 'Expectation Failed',\r\n\t\tvalue: '417'\r\n\t}, {\r\n\t\tlabel: 'I\\'m a teapot',\r\n\t\tvalue: '418'\r\n\t}, {\r\n\t\tlabel: 'Misdirected Request',\r\n\t\tvalue: '421'\r\n\t}, {\r\n\t\tlabel: 'Upgrade Required',\r\n\t\tvalue: '426'\r\n\t}, {\r\n\t\tlabel: 'Precondition Required',\r\n\t\tvalue: '428'\r\n\t}, {\r\n\t\tlabel: 'Too Many Requests',\r\n\t\tvalue: '429'\r\n\t}, {\r\n\t\tlabel: 'Request Header Fields Too Large',\r\n\t\tvalue: '431'\r\n\t}, {\r\n\t\tlabel: 'Internal Server Error',\r\n\t\tvalue: '500'\r\n\t}, {\r\n\t\tlabel: 'Not Implemented',\r\n\t\tvalue: '501'\r\n\t}, {\r\n\t\tlabel: 'Service Unavailable',\r\n\t\tvalue: '502'\r\n\t}, {\r\n\t\tlabel: 'Gateway Timeout',\r\n\t\tvalue: '504'\r\n\t}, {\r\n\t\tlabel: 'HTTP Version Not Supported',\r\n\t\tvalue: '505'\r\n\t}, {\r\n\t\tlabel: 'Variant Also Negotiates',\r\n\t\tvalue: '506'\r\n\t}, {\r\n\t\tlabel: 'Variant Also Negotiates',\r\n\t\tvalue: '507'\r\n\t}, {\r\n\t\tlabel: 'Network Authentication Required',\r\n\t\tvalue: '511'\r\n\t}\r\n];","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/client/stores/index.js":"import mobx, {observable, computed} from 'mobx';\r\nimport {observer} from 'mobx-react';\r\nimport Endpoint from '../models/http/Endpoint';\r\nimport Header from '../models/http/Header';\r\nimport Response from '../models/http/Response';\r\nimport Beamer from '../lib/Beamer';\r\nimport contentTypes from '../models/http/ContentTypes';\r\nimport ContentType from '../models/http/ContentType';\r\nimport SocketEndpoint from '../models/socket/SocketEndpoint';\r\nimport GraphqlEndpoint from '../models/graphql/GraphqlEndpoint';\r\nimport initialGraphqlSchema from '../models/graphql/InitialSchema';\r\nimport JsonServerEndpoint from '../models/jsonServer/JsonServerEndpoint';\r\nimport initialJsonServerDb from '../models/jsonServer/initialJsonServerDb';\r\nimport ProxyEndpoint from '../models/proxy/ProxyEndpoint';\r\nimport { initial, deploying, deployed, failed } from '../models/Statuses';\r\nimport jsonStringfy from 'json-stringify-pretty-compact';\r\nimport { parseSpec, getPayload, isAnyJsonServerEndpointAvailable } from '../lib/Util';\r\n\r\nclass AppState {\r\n  @observable endpoints = [];\r\n  @observable currentRequest;\r\n  @observable port = 0;\r\n  @observable status = null;\r\n  @observable generators = [];\r\n  @observable msg = null;\r\n  @observable stars = 0;\r\n\r\n  constructor() {\r\n    this.responseTypes = contentTypes;\r\n    this.initialize();\r\n    this.status = initial;\r\n\r\n    /**\r\n     * When in production build, the server which is serving the html is the same server\r\n     * handling the other functionality as well. So just connect to the current origin.\r\n     */\r\n    let devServerUrl = window.location.origin;\r\n\r\n    // While developing and when the app is served through webpack-dev-server, we want\r\n    // to connect to the localhost server specifically. __DEV__ is configured in webpack config\r\n    // through DefinePlugin.\r\n    if (__DEV__) {\r\n      devServerUrl = 'http://localhost:3333';\r\n    }\r\n\r\n    this.beamer = new Beamer(devServerUrl);\r\n    this.beamer.onStart((data) => {\r\n      this.port = data.port;\r\n      this.loadSpec(data.spec);\r\n      this.generators = data.generators;\r\n    });\r\n\r\n    this.beamer.onDeploymentCompletion(() => {\r\n      setTimeout(() => {\r\n        this.status = deployed;\r\n      }, 800);\r\n    });\r\n\r\n    this.beamer.onNewGeneratorInstallation((response) => {\r\n      this.msg = `${response.generatorName} is installed`;\r\n      this.generators = response.generators;\r\n    });\r\n\r\n    this.beamer.onMessage((message) => {\r\n      this.msg = message;\r\n      this.msg = '';\r\n    });\r\n\r\n    this.beamer.onJsonServerDbUpdate((db) => {\r\n      this.updateJsonDb(db);\r\n    });\r\n\r\n    $.get(\"https://api.github.com/repos/raathigesh/atmo/stargazers\", (data) => {\r\n        this.stars = data.length;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reinitializes the endpoint array.\r\n   */\r\n  initialize = () => {\r\n    this.endpoints = [];\r\n    this.endpoints.push(new Endpoint('/', 'GET', [new Header('Access-Control-Allow-Origin', '*')], new Response(contentTypes[0], '{}')));\r\n    this.currentRequest = this.endpoints[0];\r\n  }\r\n\r\n  /**\r\n   * Sets the current active endpoint\r\n   */\r\n  setCurrentEndpoint = (index) => {\r\n    this.currentRequest = this.endpoints[index];\r\n  }\r\n\r\n  /**\r\n   * Creates a new http endpoint\r\n   */\r\n  createEndPoint = () => {\r\n    this.endpoints.push(new Endpoint('/', 'GET', [new Header('Access-Control-Allow-Origin', '*')], new Response(contentTypes[0], '{}')));\r\n    this.currentRequest = this.endpoints[this.endpoints.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Creates a new socket endpoint\r\n   */\r\n  createSocketEndpoint = () => {\r\n    this.endpoints.push(new SocketEndpoint('', '', '{}', 'all'));\r\n    this.currentRequest = this.endpoints[this.endpoints.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Creates a new graphql endpoint\r\n   */\r\n  createGraphqlEndpoint = () => {\r\n    this.endpoints.push(new GraphqlEndpoint('', initialGraphqlSchema));\r\n    this.currentRequest = this.endpoints[this.endpoints.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Creates a new json server endpoint if one already doesn't exists\r\n   */\r\n  createJsonServerEndpoint = () => {\r\n    if (!isAnyJsonServerEndpointAvailable(this.endpoints)) {\r\n      this.endpoints.push(new JsonServerEndpoint('/api', initialJsonServerDb));\r\n      this.currentRequest = this.endpoints[this.endpoints.length - 1];\r\n    } else {\r\n      this.msg = 'Only one json-server endpoint is supported at a time.'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new prodxy endpoint\r\n   */\r\n  createProxyEndpoint = () => {\r\n    this.endpoints.push(new ProxyEndpoint('/proxy', ''));\r\n    this.currentRequest = this.endpoints[this.endpoints.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Returns the state of the endpoints\r\n   */\r\n  getPayload = () => {\r\n    return getPayload(this.endpoints);\r\n  }\r\n\r\n  /**\r\n   * Sents socket event to deploy the new changes\r\n   */\r\n  deployChanges = () => {\r\n    this.status = deploying;\r\n    this.beamer.deployChanges(this.getPayload());\r\n  }\r\n\r\n  /**\r\n   * Sents socket event to save the application state\r\n   */\r\n  saveChanges = () => {\r\n    this.beamer.saveChanges(this.getPayload());\r\n  }\r\n\r\n  /**\r\n   * Parses a spec to endpoints\r\n   */\r\n  loadSpec = (spec) => {\r\n    this.endpoints = parseSpec(spec);\r\n    this.currentRequest = this.endpoints[0];\r\n  }\r\n\r\n  /**\r\n   * Deletes the current endpoint\r\n   */\r\n  deleteEndpoint = () => {\r\n    this.endpoints.forEach((endpoint, index) => {\r\n      if (endpoint === this.currentRequest) {\r\n        this.endpoints.splice(index, 1);\r\n        if (this.endpoints[index]) {\r\n          this.currentRequest = this.endpoints[index];\r\n        } else {\r\n          this.currentRequest = this.endpoints[index - 1];\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the json server DB of the exising json-server endpoint.\r\n   * Maximum of one json-server endpoint is supported.\r\n   */\r\n  updateJsonDb = (db) => {\r\n    if (db) {\r\n      for (let endpoint of this.endpoints) {\r\n        if (endpoint.type === 'jsonServer') {\r\n          endpoint.setModel(jsonStringfy(db));\r\n          this.showNotification('Synced json-server db.');\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      this.showNotification('It seems like nothing much to sync.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rerturns total endpoint length\r\n   */\r\n  @computed get totalEndpoints() {\r\n    return this.endpoints.length;\r\n  }\r\n\r\n  /**\r\n   * Emits a socket event to the server to start generating the project\r\n   * through code generation. Spec and name of the geenrator is sent as \r\n   * payload.\r\n   */\r\n  generateProject = (generator) => {\r\n    this.beamer.generateProject({\r\n      spec: this.getPayload(),\r\n      generator: generator\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emits an socket event informing the server to start installing a generator.\r\n   * Name of the geenrator that should be installed is sent as payload.\r\n   */\r\n  installGenerator = (name) => {\r\n    this.msg = `Started installing ${name}`;\r\n    this.beamer.installGenerator(name);\r\n  }\r\n\r\n  /**\r\n   * Emits a socket event asking for the updates json-server db. This is beacause,\r\n   * in memory json-server DB can be in a differnt state from the initial since users\r\n   * can create resources or delete existing resouces through the generated REST endpoints \r\n   */\r\n  syncJsonServer = () => {\r\n    this.beamer.syncJsonServer();\r\n  }\r\n\r\n  /**\r\n   * Updates notification. The notification component will show this in the UI\r\n   * when this method is called.\r\n   */\r\n  showNotification = (msg) => {\r\n    this.msg = msg;\r\n    this.msg = '';\r\n  }\r\n};\r\n\r\nexport default new AppState();\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/apiServer/index.js":"var express = require('express');\r\nvar http = require('http');\r\nvar path = require('path');\r\nvar chalk = require('chalk');\r\nvar enableDestroy = require('server-destroy');\r\nvar morgan = require('morgan');\r\nvar bodyParser = require('body-parser');\r\n\r\nvar app = null;\r\nvar server = null;\r\nvar io = null;\r\n\r\nvar httpModule = require('../endpoints/http');\r\nvar socketModule = require('../endpoints/socket');\r\nvar graphqlModule = require('../endpoints/graphql');\r\nvar jsonServerModule = require('../endpoints/jsonServer');\r\nvar proxyModule = require('../endpoints/proxy');\r\n\r\nvar jsonServerRouter = null;\r\n\r\n/**\r\n * Creates the API server with the specified port.\r\n */\r\nfunction createApiServer(port, static, logs) {\r\n  server && server.destroy();\r\n  app = express();\r\n  server = http.createServer(app);\r\n  io = require('socket.io')(server);\r\n\r\n  app.get('/_status', function internalStaus(req, res) {\r\n    res.send('API server running.');\r\n  });\r\n\r\n  if (logs) {\r\n    app.use(morgan('dev'));\r\n  }\r\n\r\n  app.use(bodyParser.json());\r\n  app.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n  if (static) {\r\n    app.use(express.static(path.join(process.cwd(), 'public')));\r\n  }\r\n\r\n  server.listen(port, function () {\r\n    console.log(chalk.green('Api: http://localhost:' + port));\r\n  });\r\n\r\n  enableDestroy(server);\r\n\r\n  return server;\r\n}\r\n\r\n/**\r\n * Deployes the new endpoints provided by the UI\r\n */\r\nfunction deploy(port, static, spec, logs, done) {\r\n  createApiServer(port, static, logs);\r\n  httpModule(app, spec);\r\n  socketModule(io, spec);\r\n  graphqlModule(app, spec);\r\n  jsonServerRouter = jsonServerModule(app, spec);\r\n  proxyModule(app, spec);\r\n  done();\r\n}\r\n\r\nfunction getJsonServerDb() {\r\n  return jsonServerRouter && jsonServerRouter.db.getState();\r\n}\r\n\r\nmodule.exports = {\r\n  createApiServer: createApiServer,\r\n  deploy: deploy,\r\n  getJsonServerDb: getJsonServerDb\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/http.js":"function allowCrossDomain(req, res, next) {\r\n  // intercept OPTIONS method\r\n  if ('OPTIONS' == req.method) {\r\n    var allowHeaders = req.headers['access-control-request-headers'] ? req.headers['access-control-request-headers'] + ',' : '';\r\n    allowHeaders += 'Content-Type,Authorization';\r\n\r\n    res.header('Access-Control-Allow-Origin', '*');\r\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\r\n    res.header('Access-Control-Allow-Headers', allowHeaders);\r\n\r\n    res.sendStatus(200);\r\n  } else {\r\n    next();\r\n  }\r\n}\r\n\r\nfunction httpModule(app, spec) {\r\n  app.use(allowCrossDomain);\r\n\r\n  for (var i = 0; i < spec.endpoints.length; i++) {\r\n    addRoute(app, spec.endpoints[i]);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds new routes\r\n */\r\nfunction addRoute(app, endpoint) {\r\n  if (endpoint.method === 'GET') {\r\n    app.get(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'POST') {\r\n    app.post(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'PUT') {\r\n    app.put(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'PATCH') {\r\n    app.patch(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'DELETE') {\r\n    app.delete(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'COPY') {\r\n    app.copy(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'HEAD') {\r\n    app.head(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'OPTIONS') {\r\n    app.options(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'PURGE') {\r\n    app.purge(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'LOCK') {\r\n    app.lock(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  } else if (endpoint.method === 'UNLOCK') {\r\n    app.unlock(endpoint.url, function (req, res) {\r\n      responseCallback(req, res, endpoint);\r\n    });\r\n  }\r\n}\r\n\r\nfunction responseCallback(req, res, endpoint) {\r\n  setHeaders(res, endpoint.headers);\r\n  \r\n  res.status(endpoint.response.responseCode);\r\n\r\n  if(endpoint.response.contentType.type === 'JavaScript') {\r\n    setContentTypeHeader(res, 'application/json');\r\n    eval(endpoint.response.content);\r\n  } else {\r\n    setContentTypeHeader(res, endpoint.response.contentType.contentType);\r\n    res.send(endpoint.response.content);\r\n  }  \r\n}\r\n\r\nfunction setHeaders(res, headers) {\r\n  headers.forEach(function (header) {\r\n    if (header.key !== \"\") {\r\n      res.set(header.key, header.value);\r\n    }\r\n  });\r\n}\r\n\r\nfunction setContentTypeHeader(res, contentType) {\r\n  res.set('Content-Type', contentType);\r\n}\r\n\r\nmodule.exports = httpModule;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/socket.js":"function socketModule(io, spec) {\r\n  initializeSocketEndpoints(io, spec.socketEndpoints)\r\n}\r\n\r\nfunction initializeSocketEndpoints(io, endpoints) {\r\n  io.on('connection', function (socket) {\r\n    socket.removeAllListeners();\r\n    for (var i = 0; i < endpoints.length; i++) {\r\n      registerEvent(endpoints[i], socket, io);\r\n    }\r\n  });\r\n}\r\n\r\nfunction registerEvent(endpoint, socket, io) {\r\n  socket.on(endpoint.eventName, function (data) {\r\n    if (endpoint.emitType === 'all') {\r\n      io.sockets.emit(endpoint.eventToEmit, endpoint.payload);\r\n    } else if (endpoint.emitType === 'broadcast') {\r\n      socket.broadcast.emit(endpoint.eventToEmit, endpoint.payload);\r\n    } else {\r\n      io.to(socket.id).emit(endpoint.eventToEmit, endpoint.payload);\r\n    }\r\n  });\r\n}\r\n\r\nmodule.exports = socketModule","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/graphql.js":"var apollo = require('apollo-server');\r\n\r\nfunction graphqlModule(app, spec) {\r\n  registerGraphqlEndpoints(app, spec.graphqlEndpoints)\r\n}\r\n\r\nvar mocks = {\r\n  String: function () {\r\n    return \"It works!\"\r\n  }\r\n};\r\n\r\nfunction registerGraphqlEndpoints(app, endpoints) {\r\n  for (var i = 0; i < endpoints.length; i++) {\r\n    var endpoint = endpoints[i];\r\n    app.use(endpoint.url, apollo.apolloServer({\r\n      graphiql: true,\r\n      pretty: true,\r\n      schema: endpoint.schema,\r\n      mocks: mocks\r\n    }));\r\n  }\r\n}\r\n\r\nmodule.exports = graphqlModule;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/jsonServer.js":"\r\nvar jsonServer = require('json-server');\r\n\r\nfunction jsonServerModule(app, spec) {\r\n  var router = null;\r\n  if (spec.jsonServerEndpoint) {\r\n    router = jsonServer.router(JSON.parse(spec.jsonServerEndpoint.model));\r\n    app.use(spec.jsonServerEndpoint.url, router);\r\n  }\r\n  return router;\r\n}\r\n\r\nmodule.exports = jsonServerModule;","/home/travis/build/npmtest/node-npmtest-atmo/node_modules/atmo/src/server/endpoints/proxy.js":"\r\nvar proxy = require('express-http-proxy');\r\n\r\nfunction proxyModule(app, spec) {\r\n  for (var i = 0; i < spec.proxyEndpoints.length; i++) {\r\n    var endpoint = spec.proxyEndpoints[i];\r\n    app.use(endpoint.url, proxy(endpoint.urlToProxy, {\r\n      forwardPath: function (req, res) {\r\n        return require('url').parse(req.url).path;\r\n      },\r\n      intercept: function(rsp, data, req, responseOut, callback) {\r\n        responseOut.set('Access-Control-Allow-Origin', '*');\r\n        callback(null, data);\r\n      }\r\n    }));\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = proxyModule;"}